{"mappings":"C,A,W,I,E,A,C,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,C,E,iB,C,A,C,E,E,Q,A,E,Q,S,C,C,C,E,O,c,C,E,O,C,c,C,I,W,O,C,E,I,K,E,W,C,E,a,C,C,GCGC,IAAA,EAAA,EAAA,S,E,E,S,E,E,S,E,E,S,E,E,S,E,E,SAOM,SAAS,EAAY,CAAK,EA0B/B,SAAS,EAAW,CAAC,CAAE,CAAG,EACxB,GAAI,CAAE,CAAA,GAAO,AAAe,UAAf,OAAO,GAAoB,EAAI,IAAI,EAAI,EAAI,KAAI,AAAJ,EAAQ,OAChE,IAAM,EAAS,CACb,EAAG,EAAI,IAAI,CACX,EAAG,EAAI,KAAK,CAAG,EAAA,UAAS,CACxB,EAAG,AAAC,CAAA,EAAI,GAAG,EAAI,EAAI,KAAI,AAAJ,EAAS,EAAA,UAAS,CACrC,EAAG,EAAI,MAAM,EAAI,GACjB,EAAG,KACL,EACA,AAAA,CAAA,EAAA,EAAA,MAAK,AAAL,EAAO,SAAU,CAAC,EAAO,CAAE,KAAA,EAAW,AAAA,EAAA,aAAY,CAAE,YAAY,CAAE,EAAM,EAAE,CAC5E,CA3BA,OAAO,OAAO,CARF,CACV,SAAU,AAAA,CAAA,EAAA,EAAA,MAAK,AAAL,EAYZ,SAAkB,CAAC,CAAE,CAAY,EAC/B,IAAM,EAAO,EAAe,EAAe,EAAA,UAAS,CAAI,EACxD,AAAA,CAAA,EAAA,EAAA,MAAK,AAAL,EAAO,EAAA,qBAAoB,CAAG,CAAC,WAAY,CACzC,KAAA,CACF,EAAE,CAAE,KAAA,EAAW,AAAA,EAAA,aAAY,CAAE,OAAO,CAAE,EAAM,EAAE,EAC9C,EAAW,EAAG,CACZ,KAAM,WACN,MAAO,EAAO,EAAA,UAAS,CACvB,OAAQ,IACV,GACA,AAAA,CAAA,EAAA,EAAA,MAAK,AAAL,EAAO,oBAAqB,CAAC,EAAM,WAAW,CAAE,KAAA,EAAW,AAAA,EAAA,aAAY,CAAE,aAAa,CAAE,EAAM,EAAE,CAClG,GAtBE,gBAkCF,SAAyB,CAAC,CAAE,CAAO,EACjC,EAAM,OAAO,CAAC,OAAO,CAAG,CAC1B,EAnCE,WAAA,EACA,WAoCF,SAAoB,CAAC,CAAE,CAAI,CAAE,CAAE,EACzB,EAAE,EAAe,IACrB,CAAA,EAAM,OAAO,CAAC,UAAU,CAAC,EAAK,KAAK,CAAC,MAAM,CAAI,AAAA,CAAA,GAAK,CAAA,EAAI,KAAK,CAAC,KAA7D,CACF,CAtCA,GAGoB,OAAO,CAAC,CAAC,CAAC,EAAQ,EAAO,GAAK,AAAA,CAAA,EAAA,EAAA,eAAc,AAAd,EAAgB,OAAS,EAAQ,EAAQ,MAAO,EAAM,EAAE,GA+B1G,IAAI,EAAe,CAKrB,C,E","sources":["<anon>","node_modules/@newrelic/browser-agent/dist/esm/loaders/api/apiAsync.js"],"sourcesContent":["(function () {\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  var parcelRequire = $parcel$global[\"parcelRequire5e30\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"clV38\", function(module, exports) {\n\n$parcel$export(module.exports, \"setAsyncAPI\", function () { return $02521fca9e7b9780$export$a9508e562370f886; });\n/**\n * Copyright 2020-2025 New Relic, Inc. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */ \nvar $gUmiN = parcelRequire(\"gUmiN\");\n\nvar $dpdfa = parcelRequire(\"dpdfa\");\n\nvar $8auZx = parcelRequire(\"8auZx\");\n\nvar $8oG2U = parcelRequire(\"8oG2U\");\n\nvar $02hiY = parcelRequire(\"02hiY\");\n\nvar $7CBaz = parcelRequire(\"7CBaz\");\nfunction $02521fca9e7b9780$export$a9508e562370f886(agent) {\n    const api = {\n        finished: (0, $8oG2U.single)(finished),\n        setErrorHandler: setErrorHandler,\n        addToTrace: addToTrace,\n        addRelease: addRelease\n    };\n    // Hook all of the api functions up to the queues/stubs created in loader/api.js\n    Object.entries(api).forEach(([fnName, fnCall])=>(0, $8auZx.registerHandler)('api-' + fnName, fnCall, 'api', agent.ee));\n    // All API functions get passed the time they were called as their\n    // first parameter. These functions can be called asynchronously.\n    function finished(t, providedTime) {\n        const time = providedTime ? providedTime - (0, $7CBaz.originTime) : t;\n        (0, $dpdfa.handle)((0, $02hiY.CUSTOM_METRIC_CHANNEL), [\n            'finished',\n            {\n                time: time\n            }\n        ], undefined, (0, $gUmiN.FEATURE_NAMES).metrics, agent.ee);\n        addToTrace(t, {\n            name: 'finished',\n            start: time + (0, $7CBaz.originTime),\n            origin: 'nr'\n        });\n        (0, $dpdfa.handle)('api-addPageAction', [\n            time,\n            'finished'\n        ], undefined, (0, $gUmiN.FEATURE_NAMES).genericEvents, agent.ee);\n    }\n    function addToTrace(_, evt) {\n        if (!(evt && typeof evt === 'object' && evt.name && evt.start)) return;\n        const report = {\n            n: evt.name,\n            s: evt.start - (0, $7CBaz.originTime),\n            e: (evt.end || evt.start) - (0, $7CBaz.originTime),\n            o: evt.origin || '',\n            t: 'api'\n        };\n        (0, $dpdfa.handle)('bstApi', [\n            report\n        ], undefined, (0, $gUmiN.FEATURE_NAMES).sessionTrace, agent.ee);\n    }\n    function setErrorHandler(_, handler) {\n        agent.runtime.onerror = handler;\n    }\n    let releaseCount = 0;\n    function addRelease(_, name, id) {\n        if (++releaseCount > 10) return;\n        agent.runtime.releaseIds[name.slice(-200)] = ('' + id).slice(-200);\n    }\n}\n\n});\n\n})();\n//# sourceMappingURL=apiAsync.a3851da6.js.map\n","/**\n * Copyright 2020-2025 New Relic, Inc. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { FEATURE_NAMES } from '../features/features';\nimport { handle } from '../../common/event-emitter/handle';\nimport { registerHandler } from '../../common/event-emitter/register-handler';\nimport { single } from '../../common/util/invoke';\nimport { CUSTOM_METRIC_CHANNEL } from '../../features/metrics/constants';\nimport { originTime } from '../../common/constants/runtime';\nexport function setAsyncAPI(agent) {\n  const api = {\n    finished: single(finished),\n    setErrorHandler,\n    addToTrace,\n    addRelease\n  };\n\n  // Hook all of the api functions up to the queues/stubs created in loader/api.js\n  Object.entries(api).forEach(([fnName, fnCall]) => registerHandler('api-' + fnName, fnCall, 'api', agent.ee));\n\n  // All API functions get passed the time they were called as their\n  // first parameter. These functions can be called asynchronously.\n\n  function finished(t, providedTime) {\n    const time = providedTime ? providedTime - originTime : t;\n    handle(CUSTOM_METRIC_CHANNEL, ['finished', {\n      time\n    }], undefined, FEATURE_NAMES.metrics, agent.ee);\n    addToTrace(t, {\n      name: 'finished',\n      start: time + originTime,\n      origin: 'nr'\n    });\n    handle('api-addPageAction', [time, 'finished'], undefined, FEATURE_NAMES.genericEvents, agent.ee);\n  }\n  function addToTrace(_, evt) {\n    if (!(evt && typeof evt === 'object' && evt.name && evt.start)) return;\n    const report = {\n      n: evt.name,\n      s: evt.start - originTime,\n      e: (evt.end || evt.start) - originTime,\n      o: evt.origin || '',\n      t: 'api'\n    };\n    handle('bstApi', [report], undefined, FEATURE_NAMES.sessionTrace, agent.ee);\n  }\n  function setErrorHandler(_, handler) {\n    agent.runtime.onerror = handler;\n  }\n  let releaseCount = 0;\n  function addRelease(_, name, id) {\n    if (++releaseCount > 10) return;\n    agent.runtime.releaseIds[name.slice(-200)] = ('' + id).slice(-200);\n  }\n}"],"names":["parcelRequire","$parcel$global","globalThis","self","window","global","parcelRegister","register","module","exports","Object","defineProperty","get","$02521fca9e7b9780$export$a9508e562370f886","set","s","enumerable","configurable","$gUmiN","$dpdfa","$8auZx","$8oG2U","$02hiY","$7CBaz","agent","addToTrace","_","evt","name","start","report","n","originTime","e","end","o","origin","t","handle","undefined","FEATURE_NAMES","sessionTrace","ee","entries","finished","single","providedTime","time","CUSTOM_METRIC_CHANNEL","metrics","genericEvents","setErrorHandler","handler","runtime","onerror","addRelease","id","releaseCount","releaseIds","slice","forEach","fnName","fnCall","registerHandler"],"version":3,"file":"apiAsync.a3851da6.js.map"}
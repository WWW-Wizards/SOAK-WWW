{"mappings":"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","sources":["<anon>","node_modules/fflate/esm/browser.js"],"sourcesContent":["(function () {\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  var parcelRequire = $parcel$global[\"parcelRequire5e30\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"20yeu\", function(module, exports) {\n\n$parcel$export(module.exports, \"gzipSync\", function () { return $176622c6c12b4bff$export$3d616c3fb3e15483; });\n$parcel$export(module.exports, \"strToU8\", function () { return $176622c6c12b4bff$export$366b39a6daa8ed7a; });\n// DEFLATE is a complex format; to read this code, you should probably check the RFC first:\n// https://tools.ietf.org/html/rfc1951\n// You may also wish to take a look at the guide I made about this program:\n// https://gist.github.com/101arrowz/253f31eb5abc3d9275ab943003ffecad\n// Some of the following code is similar to that of UZIP.js:\n// https://github.com/photopea/UZIP.js\n// However, the vast majority of the codebase has diverged from UZIP.js to increase performance and reduce bundle size.\n// Sometimes 0 will appear where -1 would be more appropriate. This is because using a uint\n// is better for memory in most engines (I *think*).\nvar $176622c6c12b4bff$var$ch2 = {};\nvar $176622c6c12b4bff$var$wk = function(c, id, msg, transfer, cb) {\n    var w = new Worker($176622c6c12b4bff$var$ch2[id] || ($176622c6c12b4bff$var$ch2[id] = URL.createObjectURL(new Blob([\n        c + ';addEventListener(\"error\",function(e){e=e.error;postMessage({$e$:[e.message,e.code,e.stack]})})'\n    ], {\n        type: 'text/javascript'\n    }))));\n    w.onmessage = function(e) {\n        var d = e.data, ed = d.$e$;\n        if (ed) {\n            var err = new Error(ed[0]);\n            err['code'] = ed[1];\n            err.stack = ed[2];\n            cb(err, null);\n        } else cb(null, d);\n    };\n    w.postMessage(msg, transfer);\n    return w;\n};\n// aliases for shorter compressed code (most minifers don't do this)\nvar $176622c6c12b4bff$var$u8 = Uint8Array, $176622c6c12b4bff$var$u16 = Uint16Array, $176622c6c12b4bff$var$i32 = Int32Array;\n// fixed length extra bits\nvar $176622c6c12b4bff$var$fleb = new $176622c6c12b4bff$var$u8([\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    0,\n    1,\n    1,\n    1,\n    1,\n    2,\n    2,\n    2,\n    2,\n    3,\n    3,\n    3,\n    3,\n    4,\n    4,\n    4,\n    4,\n    5,\n    5,\n    5,\n    5,\n    0,\n    /* unused */ 0,\n    0,\n    /* impossible */ 0\n]);\n// fixed distance extra bits\nvar $176622c6c12b4bff$var$fdeb = new $176622c6c12b4bff$var$u8([\n    0,\n    0,\n    0,\n    0,\n    1,\n    1,\n    2,\n    2,\n    3,\n    3,\n    4,\n    4,\n    5,\n    5,\n    6,\n    6,\n    7,\n    7,\n    8,\n    8,\n    9,\n    9,\n    10,\n    10,\n    11,\n    11,\n    12,\n    12,\n    13,\n    13,\n    /* unused */ 0,\n    0\n]);\n// code length index map\nvar $176622c6c12b4bff$var$clim = new $176622c6c12b4bff$var$u8([\n    16,\n    17,\n    18,\n    0,\n    8,\n    7,\n    9,\n    6,\n    10,\n    5,\n    11,\n    4,\n    12,\n    3,\n    13,\n    2,\n    14,\n    1,\n    15\n]);\n// get base, reverse index map from extra bits\nvar $176622c6c12b4bff$var$freb = function(eb, start) {\n    var b = new $176622c6c12b4bff$var$u16(31);\n    for(var i = 0; i < 31; ++i)b[i] = start += 1 << eb[i - 1];\n    // numbers here are at max 18 bits\n    var r = new $176622c6c12b4bff$var$i32(b[30]);\n    for(var i = 1; i < 30; ++i)for(var j = b[i]; j < b[i + 1]; ++j)r[j] = j - b[i] << 5 | i;\n    return {\n        b: b,\n        r: r\n    };\n};\nvar $176622c6c12b4bff$var$_a = $176622c6c12b4bff$var$freb($176622c6c12b4bff$var$fleb, 2), $176622c6c12b4bff$var$fl = $176622c6c12b4bff$var$_a.b, $176622c6c12b4bff$var$revfl = $176622c6c12b4bff$var$_a.r;\n// we can ignore the fact that the other numbers are wrong; they never happen anyway\n$176622c6c12b4bff$var$fl[28] = 258, $176622c6c12b4bff$var$revfl[258] = 28;\nvar $176622c6c12b4bff$var$_b = $176622c6c12b4bff$var$freb($176622c6c12b4bff$var$fdeb, 0), $176622c6c12b4bff$var$fd = $176622c6c12b4bff$var$_b.b, $176622c6c12b4bff$var$revfd = $176622c6c12b4bff$var$_b.r;\n// map of value to reverse (assuming 16 bits)\nvar $176622c6c12b4bff$var$rev = new $176622c6c12b4bff$var$u16(32768);\nfor(var $176622c6c12b4bff$var$i = 0; $176622c6c12b4bff$var$i < 32768; ++$176622c6c12b4bff$var$i){\n    // reverse table algorithm from SO\n    var $176622c6c12b4bff$var$x = ($176622c6c12b4bff$var$i & 0xAAAA) >> 1 | ($176622c6c12b4bff$var$i & 0x5555) << 1;\n    $176622c6c12b4bff$var$x = ($176622c6c12b4bff$var$x & 0xCCCC) >> 2 | ($176622c6c12b4bff$var$x & 0x3333) << 2;\n    $176622c6c12b4bff$var$x = ($176622c6c12b4bff$var$x & 0xF0F0) >> 4 | ($176622c6c12b4bff$var$x & 0x0F0F) << 4;\n    $176622c6c12b4bff$var$rev[$176622c6c12b4bff$var$i] = (($176622c6c12b4bff$var$x & 0xFF00) >> 8 | ($176622c6c12b4bff$var$x & 0x00FF) << 8) >> 1;\n}\n// create huffman tree from u8 \"map\": index -> code length for code index\n// mb (max bits) must be at most 15\n// TODO: optimize/split up?\nvar $176622c6c12b4bff$var$hMap = function(cd, mb, r) {\n    var s = cd.length;\n    // index\n    var i = 0;\n    // u16 \"map\": index -> # of codes with bit length = index\n    var l = new $176622c6c12b4bff$var$u16(mb);\n    // length of cd must be 288 (total # of codes)\n    for(; i < s; ++i)if (cd[i]) ++l[cd[i] - 1];\n    // u16 \"map\": index -> minimum code for bit length = index\n    var le = new $176622c6c12b4bff$var$u16(mb);\n    for(i = 1; i < mb; ++i)le[i] = le[i - 1] + l[i - 1] << 1;\n    var co;\n    if (r) {\n        // u16 \"map\": index -> number of actual bits, symbol for code\n        co = new $176622c6c12b4bff$var$u16(1 << mb);\n        // bits to remove for reverser\n        var rvb = 15 - mb;\n        for(i = 0; i < s; ++i)// ignore 0 lengths\n        if (cd[i]) {\n            // num encoding both symbol and bits read\n            var sv = i << 4 | cd[i];\n            // free bits\n            var r_1 = mb - cd[i];\n            // start value\n            var v = le[cd[i] - 1]++ << r_1;\n            // m is end value\n            for(var m = v | (1 << r_1) - 1; v <= m; ++v)// every 16 bit value starting with the code yields the same result\n            co[$176622c6c12b4bff$var$rev[v] >> rvb] = sv;\n        }\n    } else {\n        co = new $176622c6c12b4bff$var$u16(s);\n        for(i = 0; i < s; ++i)if (cd[i]) co[i] = $176622c6c12b4bff$var$rev[le[cd[i] - 1]++] >> 15 - cd[i];\n    }\n    return co;\n};\n// fixed length tree\nvar $176622c6c12b4bff$var$flt = new $176622c6c12b4bff$var$u8(288);\nfor(var $176622c6c12b4bff$var$i = 0; $176622c6c12b4bff$var$i < 144; ++$176622c6c12b4bff$var$i)$176622c6c12b4bff$var$flt[$176622c6c12b4bff$var$i] = 8;\nfor(var $176622c6c12b4bff$var$i = 144; $176622c6c12b4bff$var$i < 256; ++$176622c6c12b4bff$var$i)$176622c6c12b4bff$var$flt[$176622c6c12b4bff$var$i] = 9;\nfor(var $176622c6c12b4bff$var$i = 256; $176622c6c12b4bff$var$i < 280; ++$176622c6c12b4bff$var$i)$176622c6c12b4bff$var$flt[$176622c6c12b4bff$var$i] = 7;\nfor(var $176622c6c12b4bff$var$i = 280; $176622c6c12b4bff$var$i < 288; ++$176622c6c12b4bff$var$i)$176622c6c12b4bff$var$flt[$176622c6c12b4bff$var$i] = 8;\n// fixed distance tree\nvar $176622c6c12b4bff$var$fdt = new $176622c6c12b4bff$var$u8(32);\nfor(var $176622c6c12b4bff$var$i = 0; $176622c6c12b4bff$var$i < 32; ++$176622c6c12b4bff$var$i)$176622c6c12b4bff$var$fdt[$176622c6c12b4bff$var$i] = 5;\n// fixed length map\nvar $176622c6c12b4bff$var$flm = /*#__PURE__*/ $176622c6c12b4bff$var$hMap($176622c6c12b4bff$var$flt, 9, 0), $176622c6c12b4bff$var$flrm = /*#__PURE__*/ $176622c6c12b4bff$var$hMap($176622c6c12b4bff$var$flt, 9, 1);\n// fixed distance map\nvar $176622c6c12b4bff$var$fdm = /*#__PURE__*/ $176622c6c12b4bff$var$hMap($176622c6c12b4bff$var$fdt, 5, 0), $176622c6c12b4bff$var$fdrm = /*#__PURE__*/ $176622c6c12b4bff$var$hMap($176622c6c12b4bff$var$fdt, 5, 1);\n// find max of array\nvar $176622c6c12b4bff$var$max = function(a) {\n    var m = a[0];\n    for(var i = 1; i < a.length; ++i)if (a[i] > m) m = a[i];\n    return m;\n};\n// read d, starting at bit p and mask with m\nvar $176622c6c12b4bff$var$bits = function(d, p, m) {\n    var o = p / 8 | 0;\n    return (d[o] | d[o + 1] << 8) >> (p & 7) & m;\n};\n// read d, starting at bit p continuing for at least 16 bits\nvar $176622c6c12b4bff$var$bits16 = function(d, p) {\n    var o = p / 8 | 0;\n    return (d[o] | d[o + 1] << 8 | d[o + 2] << 16) >> (p & 7);\n};\n// get end of byte\nvar $176622c6c12b4bff$var$shft = function(p) {\n    return (p + 7) / 8 | 0;\n};\n// typed array slice - allows garbage collector to free original reference,\n// while being more compatible than .slice\nvar $176622c6c12b4bff$var$slc = function(v, s, e) {\n    if (s == null || s < 0) s = 0;\n    if (e == null || e > v.length) e = v.length;\n    // can't use .constructor in case user-supplied\n    return new $176622c6c12b4bff$var$u8(v.subarray(s, e));\n};\nvar $176622c6c12b4bff$export$ae5516a5a74c19a8 = {\n    UnexpectedEOF: 0,\n    InvalidBlockType: 1,\n    InvalidLengthLiteral: 2,\n    InvalidDistance: 3,\n    StreamFinished: 4,\n    NoStreamHandler: 5,\n    InvalidHeader: 6,\n    NoCallback: 7,\n    InvalidUTF8: 8,\n    ExtraFieldTooLong: 9,\n    InvalidDate: 10,\n    FilenameTooLong: 11,\n    StreamFinishing: 12,\n    InvalidZipData: 13,\n    UnknownCompressionMethod: 14\n};\n// error codes\nvar $176622c6c12b4bff$var$ec = [\n    'unexpected EOF',\n    'invalid block type',\n    'invalid length/literal',\n    'invalid distance',\n    'stream finished',\n    'no stream handler',\n    ,\n    'no callback',\n    'invalid UTF-8 data',\n    'extra field too long',\n    'date not in range 1980-2099',\n    'filename too long',\n    'stream finishing',\n    'invalid zip data'\n];\nvar $176622c6c12b4bff$var$err = function(ind, msg, nt) {\n    var e = new Error(msg || $176622c6c12b4bff$var$ec[ind]);\n    e.code = ind;\n    if (Error.captureStackTrace) Error.captureStackTrace(e, $176622c6c12b4bff$var$err);\n    if (!nt) throw e;\n    return e;\n};\n// expands raw DEFLATE data\nvar $176622c6c12b4bff$var$inflt = function(dat, st, buf, dict) {\n    // source length       dict length\n    var sl = dat.length, dl = dict ? dict.length : 0;\n    if (!sl || st.f && !st.l) return buf || new $176622c6c12b4bff$var$u8(0);\n    var noBuf = !buf;\n    // have to estimate size\n    var resize = noBuf || st.i != 2;\n    // no state\n    var noSt = st.i;\n    // Assumes roughly 33% compression ratio average\n    if (noBuf) buf = new $176622c6c12b4bff$var$u8(sl * 3);\n    // ensure buffer can fit at least l elements\n    var cbuf = function(l) {\n        var bl = buf.length;\n        // need to increase size to fit\n        if (l > bl) {\n            // Double or set to necessary, whichever is greater\n            var nbuf = new $176622c6c12b4bff$var$u8(Math.max(bl * 2, l));\n            nbuf.set(buf);\n            buf = nbuf;\n        }\n    };\n    //  last chunk         bitpos           bytes\n    var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;\n    // total bits\n    var tbts = sl * 8;\n    do {\n        if (!lm) {\n            // BFINAL - this is only 1 when last chunk is next\n            final = $176622c6c12b4bff$var$bits(dat, pos, 1);\n            // type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman\n            var type = $176622c6c12b4bff$var$bits(dat, pos + 1, 3);\n            pos += 3;\n            if (!type) {\n                // go to end of byte boundary\n                var s = $176622c6c12b4bff$var$shft(pos) + 4, l = dat[s - 4] | dat[s - 3] << 8, t = s + l;\n                if (t > sl) {\n                    if (noSt) $176622c6c12b4bff$var$err(0);\n                    break;\n                }\n                // ensure size\n                if (resize) cbuf(bt + l);\n                // Copy over uncompressed data\n                buf.set(dat.subarray(s, t), bt);\n                // Get new bitpos, update byte count\n                st.b = bt += l, st.p = pos = t * 8, st.f = final;\n                continue;\n            } else if (type == 1) lm = $176622c6c12b4bff$var$flrm, dm = $176622c6c12b4bff$var$fdrm, lbt = 9, dbt = 5;\n            else if (type == 2) {\n                //  literal                            lengths\n                var hLit = $176622c6c12b4bff$var$bits(dat, pos, 31) + 257, hcLen = $176622c6c12b4bff$var$bits(dat, pos + 10, 15) + 4;\n                var tl = hLit + $176622c6c12b4bff$var$bits(dat, pos + 5, 31) + 1;\n                pos += 14;\n                // length+distance tree\n                var ldt = new $176622c6c12b4bff$var$u8(tl);\n                // code length tree\n                var clt = new $176622c6c12b4bff$var$u8(19);\n                for(var i = 0; i < hcLen; ++i)// use index map to get real code\n                clt[$176622c6c12b4bff$var$clim[i]] = $176622c6c12b4bff$var$bits(dat, pos + i * 3, 7);\n                pos += hcLen * 3;\n                // code lengths bits\n                var clb = $176622c6c12b4bff$var$max(clt), clbmsk = (1 << clb) - 1;\n                // code lengths map\n                var clm = $176622c6c12b4bff$var$hMap(clt, clb, 1);\n                for(var i = 0; i < tl;){\n                    var r = clm[$176622c6c12b4bff$var$bits(dat, pos, clbmsk)];\n                    // bits read\n                    pos += r & 15;\n                    // symbol\n                    var s = r >> 4;\n                    // code length to copy\n                    if (s < 16) ldt[i++] = s;\n                    else {\n                        //  copy   count\n                        var c = 0, n = 0;\n                        if (s == 16) n = 3 + $176622c6c12b4bff$var$bits(dat, pos, 3), pos += 2, c = ldt[i - 1];\n                        else if (s == 17) n = 3 + $176622c6c12b4bff$var$bits(dat, pos, 7), pos += 3;\n                        else if (s == 18) n = 11 + $176622c6c12b4bff$var$bits(dat, pos, 127), pos += 7;\n                        while(n--)ldt[i++] = c;\n                    }\n                }\n                //    length tree                 distance tree\n                var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);\n                // max length bits\n                lbt = $176622c6c12b4bff$var$max(lt);\n                // max dist bits\n                dbt = $176622c6c12b4bff$var$max(dt);\n                lm = $176622c6c12b4bff$var$hMap(lt, lbt, 1);\n                dm = $176622c6c12b4bff$var$hMap(dt, dbt, 1);\n            } else $176622c6c12b4bff$var$err(1);\n            if (pos > tbts) {\n                if (noSt) $176622c6c12b4bff$var$err(0);\n                break;\n            }\n        }\n        // Make sure the buffer can hold this + the largest possible addition\n        // Maximum chunk size (practically, theoretically infinite) is 2^17\n        if (resize) cbuf(bt + 131072);\n        var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;\n        var lpos = pos;\n        for(;; lpos = pos){\n            // bits read, code\n            var c = lm[$176622c6c12b4bff$var$bits16(dat, pos) & lms], sym = c >> 4;\n            pos += c & 15;\n            if (pos > tbts) {\n                if (noSt) $176622c6c12b4bff$var$err(0);\n                break;\n            }\n            if (!c) $176622c6c12b4bff$var$err(2);\n            if (sym < 256) buf[bt++] = sym;\n            else if (sym == 256) {\n                lpos = pos, lm = null;\n                break;\n            } else {\n                var add = sym - 254;\n                // no extra bits needed if less\n                if (sym > 264) {\n                    // index\n                    var i = sym - 257, b = $176622c6c12b4bff$var$fleb[i];\n                    add = $176622c6c12b4bff$var$bits(dat, pos, (1 << b) - 1) + $176622c6c12b4bff$var$fl[i];\n                    pos += b;\n                }\n                // dist\n                var d = dm[$176622c6c12b4bff$var$bits16(dat, pos) & dms], dsym = d >> 4;\n                if (!d) $176622c6c12b4bff$var$err(3);\n                pos += d & 15;\n                var dt = $176622c6c12b4bff$var$fd[dsym];\n                if (dsym > 3) {\n                    var b = $176622c6c12b4bff$var$fdeb[dsym];\n                    dt += $176622c6c12b4bff$var$bits16(dat, pos) & (1 << b) - 1, pos += b;\n                }\n                if (pos > tbts) {\n                    if (noSt) $176622c6c12b4bff$var$err(0);\n                    break;\n                }\n                if (resize) cbuf(bt + 131072);\n                var end = bt + add;\n                if (bt < dt) {\n                    var shift = dl - dt, dend = Math.min(dt, end);\n                    if (shift + bt < 0) $176622c6c12b4bff$var$err(3);\n                    for(; bt < dend; ++bt)buf[bt] = dict[shift + bt];\n                }\n                for(; bt < end; ++bt)buf[bt] = buf[bt - dt];\n            }\n        }\n        st.l = lm, st.p = lpos, st.b = bt, st.f = final;\n        if (lm) final = 1, st.m = lbt, st.d = dm, st.n = dbt;\n    }while (!final);\n    // don't reallocate for streams or user buffers\n    return bt != buf.length && noBuf ? $176622c6c12b4bff$var$slc(buf, 0, bt) : buf.subarray(0, bt);\n};\n// starting at p, write the minimum number of bits that can hold v to d\nvar $176622c6c12b4bff$var$wbits = function(d, p, v) {\n    v <<= p & 7;\n    var o = p / 8 | 0;\n    d[o] |= v;\n    d[o + 1] |= v >> 8;\n};\n// starting at p, write the minimum number of bits (>8) that can hold v to d\nvar $176622c6c12b4bff$var$wbits16 = function(d, p, v) {\n    v <<= p & 7;\n    var o = p / 8 | 0;\n    d[o] |= v;\n    d[o + 1] |= v >> 8;\n    d[o + 2] |= v >> 16;\n};\n// creates code lengths from a frequency table\nvar $176622c6c12b4bff$var$hTree = function(d, mb) {\n    // Need extra info to make a tree\n    var t = [];\n    for(var i = 0; i < d.length; ++i)if (d[i]) t.push({\n        s: i,\n        f: d[i]\n    });\n    var s = t.length;\n    var t2 = t.slice();\n    if (!s) return {\n        t: $176622c6c12b4bff$var$et,\n        l: 0\n    };\n    if (s == 1) {\n        var v = new $176622c6c12b4bff$var$u8(t[0].s + 1);\n        v[t[0].s] = 1;\n        return {\n            t: v,\n            l: 1\n        };\n    }\n    t.sort(function(a, b) {\n        return a.f - b.f;\n    });\n    // after i2 reaches last ind, will be stopped\n    // freq must be greater than largest possible number of symbols\n    t.push({\n        s: -1,\n        f: 25001\n    });\n    var l = t[0], r = t[1], i0 = 0, i1 = 1, i2 = 2;\n    t[0] = {\n        s: -1,\n        f: l.f + r.f,\n        l: l,\n        r: r\n    };\n    // efficient algorithm from UZIP.js\n    // i0 is lookbehind, i2 is lookahead - after processing two low-freq\n    // symbols that combined have high freq, will start processing i2 (high-freq,\n    // non-composite) symbols instead\n    // see https://reddit.com/r/photopea/comments/ikekht/uzipjs_questions/\n    while(i1 != s - 1){\n        l = t[t[i0].f < t[i2].f ? i0++ : i2++];\n        r = t[i0 != i1 && t[i0].f < t[i2].f ? i0++ : i2++];\n        t[i1++] = {\n            s: -1,\n            f: l.f + r.f,\n            l: l,\n            r: r\n        };\n    }\n    var maxSym = t2[0].s;\n    for(var i = 1; i < s; ++i)if (t2[i].s > maxSym) maxSym = t2[i].s;\n    // code lengths\n    var tr = new $176622c6c12b4bff$var$u16(maxSym + 1);\n    // max bits in tree\n    var mbt = $176622c6c12b4bff$var$ln(t[i1 - 1], tr, 0);\n    if (mbt > mb) {\n        // more algorithms from UZIP.js\n        // TODO: find out how this code works (debt)\n        //  ind    debt\n        var i = 0, dt = 0;\n        //    left            cost\n        var lft = mbt - mb, cst = 1 << lft;\n        t2.sort(function(a, b) {\n            return tr[b.s] - tr[a.s] || a.f - b.f;\n        });\n        for(; i < s; ++i){\n            var i2_1 = t2[i].s;\n            if (tr[i2_1] > mb) {\n                dt += cst - (1 << mbt - tr[i2_1]);\n                tr[i2_1] = mb;\n            } else break;\n        }\n        dt >>= lft;\n        while(dt > 0){\n            var i2_2 = t2[i].s;\n            if (tr[i2_2] < mb) dt -= 1 << mb - tr[i2_2]++ - 1;\n            else ++i;\n        }\n        for(; i >= 0 && dt; --i){\n            var i2_3 = t2[i].s;\n            if (tr[i2_3] == mb) {\n                --tr[i2_3];\n                ++dt;\n            }\n        }\n        mbt = mb;\n    }\n    return {\n        t: new $176622c6c12b4bff$var$u8(tr),\n        l: mbt\n    };\n};\n// get the max length and assign length codes\nvar $176622c6c12b4bff$var$ln = function(n, l, d) {\n    return n.s == -1 ? Math.max($176622c6c12b4bff$var$ln(n.l, l, d + 1), $176622c6c12b4bff$var$ln(n.r, l, d + 1)) : l[n.s] = d;\n};\n// length codes generation\nvar $176622c6c12b4bff$var$lc = function(c) {\n    var s = c.length;\n    // Note that the semicolon was intentional\n    while(s && !c[--s]);\n    var cl = new $176622c6c12b4bff$var$u16(++s);\n    //  ind      num         streak\n    var cli = 0, cln = c[0], cls = 1;\n    var w = function(v) {\n        cl[cli++] = v;\n    };\n    for(var i = 1; i <= s; ++i)if (c[i] == cln && i != s) ++cls;\n    else {\n        if (!cln && cls > 2) {\n            for(; cls > 138; cls -= 138)w(32754);\n            if (cls > 2) {\n                w(cls > 10 ? cls - 11 << 5 | 28690 : cls - 3 << 5 | 12305);\n                cls = 0;\n            }\n        } else if (cls > 3) {\n            w(cln), --cls;\n            for(; cls > 6; cls -= 6)w(8304);\n            if (cls > 2) w(cls - 3 << 5 | 8208), cls = 0;\n        }\n        while(cls--)w(cln);\n        cls = 1;\n        cln = c[i];\n    }\n    return {\n        c: cl.subarray(0, cli),\n        n: s\n    };\n};\n// calculate the length of output from tree, code lengths\nvar $176622c6c12b4bff$var$clen = function(cf, cl) {\n    var l = 0;\n    for(var i = 0; i < cl.length; ++i)l += cf[i] * cl[i];\n    return l;\n};\n// writes a fixed block\n// returns the new bit pos\nvar $176622c6c12b4bff$var$wfblk = function(out, pos, dat) {\n    // no need to write 00 as type: TypedArray defaults to 0\n    var s = dat.length;\n    var o = $176622c6c12b4bff$var$shft(pos + 2);\n    out[o] = s & 255;\n    out[o + 1] = s >> 8;\n    out[o + 2] = out[o] ^ 255;\n    out[o + 3] = out[o + 1] ^ 255;\n    for(var i = 0; i < s; ++i)out[o + i + 4] = dat[i];\n    return (o + 4 + s) * 8;\n};\n// writes a block\nvar $176622c6c12b4bff$var$wblk = function(dat, out, final, syms, lf, df, eb, li, bs, bl, p) {\n    $176622c6c12b4bff$var$wbits(out, p++, final);\n    ++lf[256];\n    var _a = $176622c6c12b4bff$var$hTree(lf, 15), dlt = _a.t, mlb = _a.l;\n    var _b = $176622c6c12b4bff$var$hTree(df, 15), ddt = _b.t, mdb = _b.l;\n    var _c = $176622c6c12b4bff$var$lc(dlt), lclt = _c.c, nlc = _c.n;\n    var _d = $176622c6c12b4bff$var$lc(ddt), lcdt = _d.c, ndc = _d.n;\n    var lcfreq = new $176622c6c12b4bff$var$u16(19);\n    for(var i = 0; i < lclt.length; ++i)++lcfreq[lclt[i] & 31];\n    for(var i = 0; i < lcdt.length; ++i)++lcfreq[lcdt[i] & 31];\n    var _e = $176622c6c12b4bff$var$hTree(lcfreq, 7), lct = _e.t, mlcb = _e.l;\n    var nlcc = 19;\n    for(; nlcc > 4 && !lct[$176622c6c12b4bff$var$clim[nlcc - 1]]; --nlcc);\n    var flen = bl + 5 << 3;\n    var ftlen = $176622c6c12b4bff$var$clen(lf, $176622c6c12b4bff$var$flt) + $176622c6c12b4bff$var$clen(df, $176622c6c12b4bff$var$fdt) + eb;\n    var dtlen = $176622c6c12b4bff$var$clen(lf, dlt) + $176622c6c12b4bff$var$clen(df, ddt) + eb + 14 + 3 * nlcc + $176622c6c12b4bff$var$clen(lcfreq, lct) + 2 * lcfreq[16] + 3 * lcfreq[17] + 7 * lcfreq[18];\n    if (bs >= 0 && flen <= ftlen && flen <= dtlen) return $176622c6c12b4bff$var$wfblk(out, p, dat.subarray(bs, bs + bl));\n    var lm, ll, dm, dl;\n    $176622c6c12b4bff$var$wbits(out, p, 1 + (dtlen < ftlen)), p += 2;\n    if (dtlen < ftlen) {\n        lm = $176622c6c12b4bff$var$hMap(dlt, mlb, 0), ll = dlt, dm = $176622c6c12b4bff$var$hMap(ddt, mdb, 0), dl = ddt;\n        var llm = $176622c6c12b4bff$var$hMap(lct, mlcb, 0);\n        $176622c6c12b4bff$var$wbits(out, p, nlc - 257);\n        $176622c6c12b4bff$var$wbits(out, p + 5, ndc - 1);\n        $176622c6c12b4bff$var$wbits(out, p + 10, nlcc - 4);\n        p += 14;\n        for(var i = 0; i < nlcc; ++i)$176622c6c12b4bff$var$wbits(out, p + 3 * i, lct[$176622c6c12b4bff$var$clim[i]]);\n        p += 3 * nlcc;\n        var lcts = [\n            lclt,\n            lcdt\n        ];\n        for(var it = 0; it < 2; ++it){\n            var clct = lcts[it];\n            for(var i = 0; i < clct.length; ++i){\n                var len = clct[i] & 31;\n                $176622c6c12b4bff$var$wbits(out, p, llm[len]), p += lct[len];\n                if (len > 15) $176622c6c12b4bff$var$wbits(out, p, clct[i] >> 5 & 127), p += clct[i] >> 12;\n            }\n        }\n    } else lm = $176622c6c12b4bff$var$flm, ll = $176622c6c12b4bff$var$flt, dm = $176622c6c12b4bff$var$fdm, dl = $176622c6c12b4bff$var$fdt;\n    for(var i = 0; i < li; ++i){\n        var sym = syms[i];\n        if (sym > 255) {\n            var len = sym >> 18 & 31;\n            $176622c6c12b4bff$var$wbits16(out, p, lm[len + 257]), p += ll[len + 257];\n            if (len > 7) $176622c6c12b4bff$var$wbits(out, p, sym >> 23 & 31), p += $176622c6c12b4bff$var$fleb[len];\n            var dst = sym & 31;\n            $176622c6c12b4bff$var$wbits16(out, p, dm[dst]), p += dl[dst];\n            if (dst > 3) $176622c6c12b4bff$var$wbits16(out, p, sym >> 5 & 8191), p += $176622c6c12b4bff$var$fdeb[dst];\n        } else $176622c6c12b4bff$var$wbits16(out, p, lm[sym]), p += ll[sym];\n    }\n    $176622c6c12b4bff$var$wbits16(out, p, lm[256]);\n    return p + ll[256];\n};\n// deflate options (nice << 13) | chain\nvar $176622c6c12b4bff$var$deo = /*#__PURE__*/ new $176622c6c12b4bff$var$i32([\n    65540,\n    131080,\n    131088,\n    131104,\n    262176,\n    1048704,\n    1048832,\n    2114560,\n    2117632\n]);\n// empty\nvar $176622c6c12b4bff$var$et = /*#__PURE__*/ new $176622c6c12b4bff$var$u8(0);\n// compresses data into a raw DEFLATE buffer\nvar $176622c6c12b4bff$var$dflt = function(dat, lvl, plvl, pre, post, st) {\n    var s = st.z || dat.length;\n    var o = new $176622c6c12b4bff$var$u8(pre + s + 5 * (1 + Math.ceil(s / 7000)) + post);\n    // writing to this writes to the output buffer\n    var w = o.subarray(pre, o.length - post);\n    var lst = st.l;\n    var pos = (st.r || 0) & 7;\n    if (lvl) {\n        if (pos) w[0] = st.r >> 3;\n        var opt = $176622c6c12b4bff$var$deo[lvl - 1];\n        var n = opt >> 13, c = opt & 8191;\n        var msk_1 = (1 << plvl) - 1;\n        //    prev 2-byte val map    curr 2-byte val map\n        var prev = st.p || new $176622c6c12b4bff$var$u16(32768), head = st.h || new $176622c6c12b4bff$var$u16(msk_1 + 1);\n        var bs1_1 = Math.ceil(plvl / 3), bs2_1 = 2 * bs1_1;\n        var hsh = function(i) {\n            return (dat[i] ^ dat[i + 1] << bs1_1 ^ dat[i + 2] << bs2_1) & msk_1;\n        };\n        // 24576 is an arbitrary number of maximum symbols per block\n        // 424 buffer for last block\n        var syms = new $176622c6c12b4bff$var$i32(25000);\n        // length/literal freq   distance freq\n        var lf = new $176622c6c12b4bff$var$u16(288), df = new $176622c6c12b4bff$var$u16(32);\n        //  l/lcnt  exbits  index          l/lind  waitdx          blkpos\n        var lc_1 = 0, eb = 0, i = st.i || 0, li = 0, wi = st.w || 0, bs = 0;\n        for(; i + 2 < s; ++i){\n            // hash value\n            var hv = hsh(i);\n            // index mod 32768    previous index mod\n            var imod = i & 32767, pimod = head[hv];\n            prev[imod] = pimod;\n            head[hv] = imod;\n            // We always should modify head and prev, but only add symbols if\n            // this data is not yet processed (\"wait\" for wait index)\n            if (wi <= i) {\n                // bytes remaining\n                var rem = s - i;\n                if ((lc_1 > 7000 || li > 24576) && (rem > 423 || !lst)) {\n                    pos = $176622c6c12b4bff$var$wblk(dat, w, 0, syms, lf, df, eb, li, bs, i - bs, pos);\n                    li = lc_1 = eb = 0, bs = i;\n                    for(var j = 0; j < 286; ++j)lf[j] = 0;\n                    for(var j = 0; j < 30; ++j)df[j] = 0;\n                }\n                //  len    dist   chain\n                var l = 2, d = 0, ch_1 = c, dif = imod - pimod & 32767;\n                if (rem > 2 && hv == hsh(i - dif)) {\n                    var maxn = Math.min(n, rem) - 1;\n                    var maxd = Math.min(32767, i);\n                    // max possible length\n                    // not capped at dif because decompressors implement \"rolling\" index population\n                    var ml = Math.min(258, rem);\n                    while(dif <= maxd && --ch_1 && imod != pimod){\n                        if (dat[i + l] == dat[i + l - dif]) {\n                            var nl = 0;\n                            for(; nl < ml && dat[i + nl] == dat[i + nl - dif]; ++nl);\n                            if (nl > l) {\n                                l = nl, d = dif;\n                                // break out early when we reach \"nice\" (we are satisfied enough)\n                                if (nl > maxn) break;\n                                // now, find the rarest 2-byte sequence within this\n                                // length of literals and search for that instead.\n                                // Much faster than just using the start\n                                var mmd = Math.min(dif, nl - 2);\n                                var md = 0;\n                                for(var j = 0; j < mmd; ++j){\n                                    var ti = i - dif + j & 32767;\n                                    var pti = prev[ti];\n                                    var cd = ti - pti & 32767;\n                                    if (cd > md) md = cd, pimod = ti;\n                                }\n                            }\n                        }\n                        // check the previous match\n                        imod = pimod, pimod = prev[imod];\n                        dif += imod - pimod & 32767;\n                    }\n                }\n                // d will be nonzero only when a match was found\n                if (d) {\n                    // store both dist and len data in one int32\n                    // Make sure this is recognized as a len/dist with 28th bit (2^28)\n                    syms[li++] = 268435456 | $176622c6c12b4bff$var$revfl[l] << 18 | $176622c6c12b4bff$var$revfd[d];\n                    var lin = $176622c6c12b4bff$var$revfl[l] & 31, din = $176622c6c12b4bff$var$revfd[d] & 31;\n                    eb += $176622c6c12b4bff$var$fleb[lin] + $176622c6c12b4bff$var$fdeb[din];\n                    ++lf[257 + lin];\n                    ++df[din];\n                    wi = i + l;\n                    ++lc_1;\n                } else {\n                    syms[li++] = dat[i];\n                    ++lf[dat[i]];\n                }\n            }\n        }\n        for(i = Math.max(i, wi); i < s; ++i){\n            syms[li++] = dat[i];\n            ++lf[dat[i]];\n        }\n        pos = $176622c6c12b4bff$var$wblk(dat, w, lst, syms, lf, df, eb, li, bs, i - bs, pos);\n        if (!lst) {\n            st.r = pos & 7 | w[pos / 8 | 0] << 3;\n            // shft(pos) now 1 less if pos & 7 != 0\n            pos -= 7;\n            st.h = head, st.p = prev, st.i = i, st.w = wi;\n        }\n    } else {\n        for(var i = st.w || 0; i < s + lst; i += 65535){\n            // end\n            var e = i + 65535;\n            if (e >= s) {\n                // write final block\n                w[pos / 8 | 0] = lst;\n                e = s;\n            }\n            pos = $176622c6c12b4bff$var$wfblk(w, pos + 1, dat.subarray(i, e));\n        }\n        st.i = s;\n    }\n    return $176622c6c12b4bff$var$slc(o, 0, pre + $176622c6c12b4bff$var$shft(pos) + post);\n};\n// CRC32 table\nvar $176622c6c12b4bff$var$crct = /*#__PURE__*/ function() {\n    var t = new Int32Array(256);\n    for(var i = 0; i < 256; ++i){\n        var c = i, k = 9;\n        while(--k)c = (c & 1 && -306674912) ^ c >>> 1;\n        t[i] = c;\n    }\n    return t;\n}();\n// CRC32\nvar $176622c6c12b4bff$var$crc = function() {\n    var c = -1;\n    return {\n        p: function(d) {\n            // closures have awful performance\n            var cr = c;\n            for(var i = 0; i < d.length; ++i)cr = $176622c6c12b4bff$var$crct[cr & 255 ^ d[i]] ^ cr >>> 8;\n            c = cr;\n        },\n        d: function() {\n            return ~c;\n        }\n    };\n};\n// Adler32\nvar $176622c6c12b4bff$var$adler = function() {\n    var a = 1, b = 0;\n    return {\n        p: function(d) {\n            // closures have awful performance\n            var n = a, m = b;\n            var l = d.length | 0;\n            for(var i = 0; i != l;){\n                var e = Math.min(i + 2655, l);\n                for(; i < e; ++i)m += n += d[i];\n                n = (n & 65535) + 15 * (n >> 16), m = (m & 65535) + 15 * (m >> 16);\n            }\n            a = n, b = m;\n        },\n        d: function() {\n            a %= 65521, b %= 65521;\n            return (a & 255) << 24 | (a & 0xFF00) << 8 | (b & 255) << 8 | b >> 8;\n        }\n    };\n};\n// deflate with opts\nvar $176622c6c12b4bff$var$dopt = function(dat, opt, pre, post, st) {\n    if (!st) {\n        st = {\n            l: 1\n        };\n        if (opt.dictionary) {\n            var dict = opt.dictionary.subarray(-32768);\n            var newDat = new $176622c6c12b4bff$var$u8(dict.length + dat.length);\n            newDat.set(dict);\n            newDat.set(dat, dict.length);\n            dat = newDat;\n            st.w = dict.length;\n        }\n    }\n    return $176622c6c12b4bff$var$dflt(dat, opt.level == null ? 6 : opt.level, opt.mem == null ? st.l ? Math.ceil(Math.max(8, Math.min(13, Math.log(dat.length))) * 1.5) : 20 : 12 + opt.mem, pre, post, st);\n};\n// Walmart object spread\nvar $176622c6c12b4bff$var$mrg = function(a, b) {\n    var o = {};\n    for(var k in a)o[k] = a[k];\n    for(var k in b)o[k] = b[k];\n    return o;\n};\n// worker clone\n// This is possibly the craziest part of the entire codebase, despite how simple it may seem.\n// The only parameter to this function is a closure that returns an array of variables outside of the function scope.\n// We're going to try to figure out the variable names used in the closure as strings because that is crucial for workerization.\n// We will return an object mapping of true variable name to value (basically, the current scope as a JS object).\n// The reason we can't just use the original variable names is minifiers mangling the toplevel scope.\n// This took me three weeks to figure out how to do.\nvar $176622c6c12b4bff$var$wcln = function(fn, fnStr, td) {\n    var dt = fn();\n    var st = fn.toString();\n    var ks = st.slice(st.indexOf('[') + 1, st.lastIndexOf(']')).replace(/\\s+/g, '').split(',');\n    for(var i = 0; i < dt.length; ++i){\n        var v = dt[i], k = ks[i];\n        if (typeof v == 'function') {\n            fnStr += ';' + k + '=';\n            var st_1 = v.toString();\n            if (v.prototype) {\n                // for global objects\n                if (st_1.indexOf('[native code]') != -1) {\n                    var spInd = st_1.indexOf(' ', 8) + 1;\n                    fnStr += st_1.slice(spInd, st_1.indexOf('(', spInd));\n                } else {\n                    fnStr += st_1;\n                    for(var t in v.prototype)fnStr += ';' + k + '.prototype.' + t + '=' + v.prototype[t].toString();\n                }\n            } else fnStr += st_1;\n        } else td[k] = v;\n    }\n    return fnStr;\n};\nvar $176622c6c12b4bff$var$ch = [];\n// clone bufs\nvar $176622c6c12b4bff$var$cbfs = function(v) {\n    var tl = [];\n    for(var k in v)if (v[k].buffer) tl.push((v[k] = new v[k].constructor(v[k])).buffer);\n    return tl;\n};\n// use a worker to execute code\nvar $176622c6c12b4bff$var$wrkr = function(fns, init, id, cb) {\n    if (!$176622c6c12b4bff$var$ch[id]) {\n        var fnStr = '', td_1 = {}, m = fns.length - 1;\n        for(var i = 0; i < m; ++i)fnStr = $176622c6c12b4bff$var$wcln(fns[i], fnStr, td_1);\n        $176622c6c12b4bff$var$ch[id] = {\n            c: $176622c6c12b4bff$var$wcln(fns[m], fnStr, td_1),\n            e: td_1\n        };\n    }\n    var td = $176622c6c12b4bff$var$mrg({}, $176622c6c12b4bff$var$ch[id].e);\n    return $176622c6c12b4bff$var$wk($176622c6c12b4bff$var$ch[id].c + ';onmessage=function(e){for(var k in e.data)self[k]=e.data[k];onmessage=' + init.toString() + '}', id, td, $176622c6c12b4bff$var$cbfs(td), cb);\n};\n// base async inflate fn\nvar $176622c6c12b4bff$var$bInflt = function() {\n    return [\n        $176622c6c12b4bff$var$u8,\n        $176622c6c12b4bff$var$u16,\n        $176622c6c12b4bff$var$i32,\n        $176622c6c12b4bff$var$fleb,\n        $176622c6c12b4bff$var$fdeb,\n        $176622c6c12b4bff$var$clim,\n        $176622c6c12b4bff$var$fl,\n        $176622c6c12b4bff$var$fd,\n        $176622c6c12b4bff$var$flrm,\n        $176622c6c12b4bff$var$fdrm,\n        $176622c6c12b4bff$var$rev,\n        $176622c6c12b4bff$var$ec,\n        $176622c6c12b4bff$var$hMap,\n        $176622c6c12b4bff$var$max,\n        $176622c6c12b4bff$var$bits,\n        $176622c6c12b4bff$var$bits16,\n        $176622c6c12b4bff$var$shft,\n        $176622c6c12b4bff$var$slc,\n        $176622c6c12b4bff$var$err,\n        $176622c6c12b4bff$var$inflt,\n        $176622c6c12b4bff$export$90366d8b308ba94a,\n        $176622c6c12b4bff$var$pbf,\n        $176622c6c12b4bff$var$gopt\n    ];\n};\nvar $176622c6c12b4bff$var$bDflt = function() {\n    return [\n        $176622c6c12b4bff$var$u8,\n        $176622c6c12b4bff$var$u16,\n        $176622c6c12b4bff$var$i32,\n        $176622c6c12b4bff$var$fleb,\n        $176622c6c12b4bff$var$fdeb,\n        $176622c6c12b4bff$var$clim,\n        $176622c6c12b4bff$var$revfl,\n        $176622c6c12b4bff$var$revfd,\n        $176622c6c12b4bff$var$flm,\n        $176622c6c12b4bff$var$flt,\n        $176622c6c12b4bff$var$fdm,\n        $176622c6c12b4bff$var$fdt,\n        $176622c6c12b4bff$var$rev,\n        $176622c6c12b4bff$var$deo,\n        $176622c6c12b4bff$var$et,\n        $176622c6c12b4bff$var$hMap,\n        $176622c6c12b4bff$var$wbits,\n        $176622c6c12b4bff$var$wbits16,\n        $176622c6c12b4bff$var$hTree,\n        $176622c6c12b4bff$var$ln,\n        $176622c6c12b4bff$var$lc,\n        $176622c6c12b4bff$var$clen,\n        $176622c6c12b4bff$var$wfblk,\n        $176622c6c12b4bff$var$wblk,\n        $176622c6c12b4bff$var$shft,\n        $176622c6c12b4bff$var$slc,\n        $176622c6c12b4bff$var$dflt,\n        $176622c6c12b4bff$var$dopt,\n        $176622c6c12b4bff$export$21533ff51b8a0b4a,\n        $176622c6c12b4bff$var$pbf\n    ];\n};\n// gzip extra\nvar $176622c6c12b4bff$var$gze = function() {\n    return [\n        $176622c6c12b4bff$var$gzh,\n        $176622c6c12b4bff$var$gzhl,\n        $176622c6c12b4bff$var$wbytes,\n        $176622c6c12b4bff$var$crc,\n        $176622c6c12b4bff$var$crct\n    ];\n};\n// gunzip extra\nvar $176622c6c12b4bff$var$guze = function() {\n    return [\n        $176622c6c12b4bff$var$gzs,\n        $176622c6c12b4bff$var$gzl\n    ];\n};\n// zlib extra\nvar $176622c6c12b4bff$var$zle = function() {\n    return [\n        $176622c6c12b4bff$var$zlh,\n        $176622c6c12b4bff$var$wbytes,\n        $176622c6c12b4bff$var$adler\n    ];\n};\n// unzlib extra\nvar $176622c6c12b4bff$var$zule = function() {\n    return [\n        $176622c6c12b4bff$var$zls\n    ];\n};\n// post buf\nvar $176622c6c12b4bff$var$pbf = function(msg) {\n    return postMessage(msg, [\n        msg.buffer\n    ]);\n};\n// get opts\nvar $176622c6c12b4bff$var$gopt = function(o) {\n    return o && {\n        out: o.size && new $176622c6c12b4bff$var$u8(o.size),\n        dictionary: o.dictionary\n    };\n};\n// async helper\nvar $176622c6c12b4bff$var$cbify = function(dat, opts, fns, init, id, cb) {\n    var w = $176622c6c12b4bff$var$wrkr(fns, init, id, function(err, dat) {\n        w.terminate();\n        cb(err, dat);\n    });\n    w.postMessage([\n        dat,\n        opts\n    ], opts.consume ? [\n        dat.buffer\n    ] : []);\n    return function() {\n        w.terminate();\n    };\n};\n// auto stream\nvar $176622c6c12b4bff$var$astrm = function(strm) {\n    strm.ondata = function(dat, final) {\n        return postMessage([\n            dat,\n            final\n        ], [\n            dat.buffer\n        ]);\n    };\n    return function(ev) {\n        if (ev.data.length) {\n            strm.push(ev.data[0], ev.data[1]);\n            postMessage([\n                ev.data[0].length\n            ]);\n        } else strm.flush();\n    };\n};\n// async stream attach\nvar $176622c6c12b4bff$var$astrmify = function(fns, strm, opts, init, id, flush, ext) {\n    var t;\n    var w = $176622c6c12b4bff$var$wrkr(fns, init, id, function(err, dat) {\n        if (err) w.terminate(), strm.ondata.call(strm, err);\n        else if (!Array.isArray(dat)) ext(dat);\n        else if (dat.length == 1) {\n            strm.queuedSize -= dat[0];\n            if (strm.ondrain) strm.ondrain(dat[0]);\n        } else {\n            if (dat[1]) w.terminate();\n            strm.ondata.call(strm, err, dat[0], dat[1]);\n        }\n    });\n    w.postMessage(opts);\n    strm.queuedSize = 0;\n    strm.push = function(d, f) {\n        if (!strm.ondata) $176622c6c12b4bff$var$err(5);\n        if (t) strm.ondata($176622c6c12b4bff$var$err(4, 0, 1), null, !!f);\n        strm.queuedSize += d.length;\n        w.postMessage([\n            d,\n            t = f\n        ], [\n            d.buffer\n        ]);\n    };\n    strm.terminate = function() {\n        w.terminate();\n    };\n    if (flush) strm.flush = function() {\n        w.postMessage([]);\n    };\n};\n// read 2 bytes\nvar $176622c6c12b4bff$var$b2 = function(d, b) {\n    return d[b] | d[b + 1] << 8;\n};\n// read 4 bytes\nvar $176622c6c12b4bff$var$b4 = function(d, b) {\n    return (d[b] | d[b + 1] << 8 | d[b + 2] << 16 | d[b + 3] << 24) >>> 0;\n};\nvar $176622c6c12b4bff$var$b8 = function(d, b) {\n    return $176622c6c12b4bff$var$b4(d, b) + $176622c6c12b4bff$var$b4(d, b + 4) * 4294967296;\n};\n// write bytes\nvar $176622c6c12b4bff$var$wbytes = function(d, b, v) {\n    for(; v; ++b)d[b] = v, v >>>= 8;\n};\n// gzip header\nvar $176622c6c12b4bff$var$gzh = function(c, o) {\n    var fn = o.filename;\n    c[0] = 31, c[1] = 139, c[2] = 8, c[8] = o.level < 2 ? 4 : o.level == 9 ? 2 : 0, c[9] = 3; // assume Unix\n    if (o.mtime != 0) $176622c6c12b4bff$var$wbytes(c, 4, Math.floor(new Date(o.mtime || Date.now()) / 1000));\n    if (fn) {\n        c[3] = 8;\n        for(var i = 0; i <= fn.length; ++i)c[i + 10] = fn.charCodeAt(i);\n    }\n};\n// gzip footer: -8 to -4 = CRC, -4 to -0 is length\n// gzip start\nvar $176622c6c12b4bff$var$gzs = function(d) {\n    if (d[0] != 31 || d[1] != 139 || d[2] != 8) $176622c6c12b4bff$var$err(6, 'invalid gzip data');\n    var flg = d[3];\n    var st = 10;\n    if (flg & 4) st += (d[10] | d[11] << 8) + 2;\n    for(var zs = (flg >> 3 & 1) + (flg >> 4 & 1); zs > 0; zs -= !d[st++]);\n    return st + (flg & 2);\n};\n// gzip length\nvar $176622c6c12b4bff$var$gzl = function(d) {\n    var l = d.length;\n    return (d[l - 4] | d[l - 3] << 8 | d[l - 2] << 16 | d[l - 1] << 24) >>> 0;\n};\n// gzip header length\nvar $176622c6c12b4bff$var$gzhl = function(o) {\n    return 10 + (o.filename ? o.filename.length + 1 : 0);\n};\n// zlib header\nvar $176622c6c12b4bff$var$zlh = function(c, o) {\n    var lv = o.level, fl = lv == 0 ? 0 : lv < 6 ? 1 : lv == 9 ? 3 : 2;\n    c[0] = 120, c[1] = fl << 6 | (o.dictionary && 32);\n    c[1] |= 31 - (c[0] << 8 | c[1]) % 31;\n    if (o.dictionary) {\n        var h = $176622c6c12b4bff$var$adler();\n        h.p(o.dictionary);\n        $176622c6c12b4bff$var$wbytes(c, 2, h.d());\n    }\n};\n// zlib start\nvar $176622c6c12b4bff$var$zls = function(d, dict) {\n    if ((d[0] & 15) != 8 || d[0] >> 4 > 7 || (d[0] << 8 | d[1]) % 31) $176622c6c12b4bff$var$err(6, 'invalid zlib data');\n    if ((d[1] >> 5 & 1) == +!dict) $176622c6c12b4bff$var$err(6, 'invalid zlib data: ' + (d[1] & 32 ? 'need' : 'unexpected') + ' dictionary');\n    return (d[1] >> 3 & 4) + 2;\n};\nfunction $176622c6c12b4bff$var$StrmOpt(opts, cb) {\n    if (typeof opts == 'function') cb = opts, opts = {};\n    this.ondata = cb;\n    return opts;\n}\n/**\n * Streaming DEFLATE compression\n */ var $176622c6c12b4bff$export$ae157b6234afe138 = /*#__PURE__*/ function() {\n    function Deflate(opts, cb) {\n        if (typeof opts == 'function') cb = opts, opts = {};\n        this.ondata = cb;\n        this.o = opts || {};\n        this.s = {\n            l: 0,\n            i: 32768,\n            w: 32768,\n            z: 32768\n        };\n        // Buffer length must always be 0 mod 32768 for index calculations to be correct when modifying head and prev\n        // 98304 = 32768 (lookback) + 65536 (common chunk size)\n        this.b = new $176622c6c12b4bff$var$u8(98304);\n        if (this.o.dictionary) {\n            var dict = this.o.dictionary.subarray(-32768);\n            this.b.set(dict, 32768 - dict.length);\n            this.s.i = 32768 - dict.length;\n        }\n    }\n    Deflate.prototype.p = function(c, f) {\n        this.ondata($176622c6c12b4bff$var$dopt(c, this.o, 0, 0, this.s), f);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */ Deflate.prototype.push = function(chunk, final) {\n        if (!this.ondata) $176622c6c12b4bff$var$err(5);\n        if (this.s.l) $176622c6c12b4bff$var$err(4);\n        var endLen = chunk.length + this.s.z;\n        if (endLen > this.b.length) {\n            if (endLen > 2 * this.b.length - 32768) {\n                var newBuf = new $176622c6c12b4bff$var$u8(endLen & -32768);\n                newBuf.set(this.b.subarray(0, this.s.z));\n                this.b = newBuf;\n            }\n            var split = this.b.length - this.s.z;\n            this.b.set(chunk.subarray(0, split), this.s.z);\n            this.s.z = this.b.length;\n            this.p(this.b, false);\n            this.b.set(this.b.subarray(-32768));\n            this.b.set(chunk.subarray(split), 32768);\n            this.s.z = chunk.length - split + 32768;\n            this.s.i = 32766, this.s.w = 32768;\n        } else {\n            this.b.set(chunk, this.s.z);\n            this.s.z += chunk.length;\n        }\n        this.s.l = final & 1;\n        if (this.s.z > this.s.w + 8191 || final) {\n            this.p(this.b, final || false);\n            this.s.w = this.s.i, this.s.i -= 2;\n        }\n    };\n    /**\n     * Flushes buffered uncompressed data. Useful to immediately retrieve the\n     * deflated output for small inputs.\n     */ Deflate.prototype.flush = function() {\n        if (!this.ondata) $176622c6c12b4bff$var$err(5);\n        if (this.s.l) $176622c6c12b4bff$var$err(4);\n        this.p(this.b, false);\n        this.s.w = this.s.i, this.s.i -= 2;\n    };\n    return Deflate;\n}();\n/**\n * Asynchronous streaming DEFLATE compression\n */ var $176622c6c12b4bff$export$84e526fabcba03e3 = /*#__PURE__*/ function() {\n    function AsyncDeflate(opts, cb) {\n        $176622c6c12b4bff$var$astrmify([\n            $176622c6c12b4bff$var$bDflt,\n            function() {\n                return [\n                    $176622c6c12b4bff$var$astrm,\n                    $176622c6c12b4bff$export$ae157b6234afe138\n                ];\n            }\n        ], this, $176622c6c12b4bff$var$StrmOpt.call(this, opts, cb), function(ev) {\n            var strm = new $176622c6c12b4bff$export$ae157b6234afe138(ev.data);\n            onmessage = $176622c6c12b4bff$var$astrm(strm);\n        }, 6, 1);\n    }\n    return AsyncDeflate;\n}();\nfunction $176622c6c12b4bff$export$2316623ecd1285ab(data, opts, cb) {\n    if (!cb) cb = opts, opts = {};\n    if (typeof cb != 'function') $176622c6c12b4bff$var$err(7);\n    return $176622c6c12b4bff$var$cbify(data, opts, [\n        $176622c6c12b4bff$var$bDflt\n    ], function(ev) {\n        return $176622c6c12b4bff$var$pbf($176622c6c12b4bff$export$21533ff51b8a0b4a(ev.data[0], ev.data[1]));\n    }, 0, cb);\n}\nfunction $176622c6c12b4bff$export$21533ff51b8a0b4a(data, opts) {\n    return $176622c6c12b4bff$var$dopt(data, opts || {}, 0, 0);\n}\n/**\n * Streaming DEFLATE decompression\n */ var $176622c6c12b4bff$export$d1de70a877d6e43c = /*#__PURE__*/ function() {\n    function Inflate(opts, cb) {\n        // no StrmOpt here to avoid adding to workerizer\n        if (typeof opts == 'function') cb = opts, opts = {};\n        this.ondata = cb;\n        var dict = opts && opts.dictionary && opts.dictionary.subarray(-32768);\n        this.s = {\n            i: 0,\n            b: dict ? dict.length : 0\n        };\n        this.o = new $176622c6c12b4bff$var$u8(32768);\n        this.p = new $176622c6c12b4bff$var$u8(0);\n        if (dict) this.o.set(dict);\n    }\n    Inflate.prototype.e = function(c) {\n        if (!this.ondata) $176622c6c12b4bff$var$err(5);\n        if (this.d) $176622c6c12b4bff$var$err(4);\n        if (!this.p.length) this.p = c;\n        else if (c.length) {\n            var n = new $176622c6c12b4bff$var$u8(this.p.length + c.length);\n            n.set(this.p), n.set(c, this.p.length), this.p = n;\n        }\n    };\n    Inflate.prototype.c = function(final) {\n        this.s.i = +(this.d = final || false);\n        var bts = this.s.b;\n        var dt = $176622c6c12b4bff$var$inflt(this.p, this.s, this.o);\n        this.ondata($176622c6c12b4bff$var$slc(dt, bts, this.s.b), this.d);\n        this.o = $176622c6c12b4bff$var$slc(dt, this.s.b - 32768), this.s.b = this.o.length;\n        this.p = $176622c6c12b4bff$var$slc(this.p, this.s.p / 8 | 0), this.s.p &= 7;\n    };\n    /**\n     * Pushes a chunk to be inflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the final chunk\n     */ Inflate.prototype.push = function(chunk, final) {\n        this.e(chunk), this.c(final);\n    };\n    return Inflate;\n}();\n/**\n * Asynchronous streaming DEFLATE decompression\n */ var $176622c6c12b4bff$export$fff8358d6dbaa9cc = /*#__PURE__*/ function() {\n    function AsyncInflate(opts, cb) {\n        $176622c6c12b4bff$var$astrmify([\n            $176622c6c12b4bff$var$bInflt,\n            function() {\n                return [\n                    $176622c6c12b4bff$var$astrm,\n                    $176622c6c12b4bff$export$d1de70a877d6e43c\n                ];\n            }\n        ], this, $176622c6c12b4bff$var$StrmOpt.call(this, opts, cb), function(ev) {\n            var strm = new $176622c6c12b4bff$export$d1de70a877d6e43c(ev.data);\n            onmessage = $176622c6c12b4bff$var$astrm(strm);\n        }, 7, 0);\n    }\n    return AsyncInflate;\n}();\nfunction $176622c6c12b4bff$export$cae1ce83fe4a1782(data, opts, cb) {\n    if (!cb) cb = opts, opts = {};\n    if (typeof cb != 'function') $176622c6c12b4bff$var$err(7);\n    return $176622c6c12b4bff$var$cbify(data, opts, [\n        $176622c6c12b4bff$var$bInflt\n    ], function(ev) {\n        return $176622c6c12b4bff$var$pbf($176622c6c12b4bff$export$90366d8b308ba94a(ev.data[0], $176622c6c12b4bff$var$gopt(ev.data[1])));\n    }, 1, cb);\n}\nfunction $176622c6c12b4bff$export$90366d8b308ba94a(data, opts) {\n    return $176622c6c12b4bff$var$inflt(data, {\n        i: 2\n    }, opts && opts.out, opts && opts.dictionary);\n}\n// before you yell at me for not just using extends, my reason is that TS inheritance is hard to workerize.\n/**\n * Streaming GZIP compression\n */ var $176622c6c12b4bff$export$8e4b66d280bf8342 = /*#__PURE__*/ function() {\n    function Gzip(opts, cb) {\n        this.c = $176622c6c12b4bff$var$crc();\n        this.l = 0;\n        this.v = 1;\n        $176622c6c12b4bff$export$ae157b6234afe138.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */ Gzip.prototype.push = function(chunk, final) {\n        this.c.p(chunk);\n        this.l += chunk.length;\n        $176622c6c12b4bff$export$ae157b6234afe138.prototype.push.call(this, chunk, final);\n    };\n    Gzip.prototype.p = function(c, f) {\n        var raw = $176622c6c12b4bff$var$dopt(c, this.o, this.v && $176622c6c12b4bff$var$gzhl(this.o), f && 8, this.s);\n        if (this.v) $176622c6c12b4bff$var$gzh(raw, this.o), this.v = 0;\n        if (f) $176622c6c12b4bff$var$wbytes(raw, raw.length - 8, this.c.d()), $176622c6c12b4bff$var$wbytes(raw, raw.length - 4, this.l);\n        this.ondata(raw, f);\n    };\n    /**\n     * Flushes buffered uncompressed data. Useful to immediately retrieve the\n     * GZIPped output for small inputs.\n     */ Gzip.prototype.flush = function() {\n        $176622c6c12b4bff$export$ae157b6234afe138.prototype.flush.call(this);\n    };\n    return Gzip;\n}();\n/**\n * Asynchronous streaming GZIP compression\n */ var $176622c6c12b4bff$export$b4c75ae96cdf708b = /*#__PURE__*/ function() {\n    function AsyncGzip(opts, cb) {\n        $176622c6c12b4bff$var$astrmify([\n            $176622c6c12b4bff$var$bDflt,\n            $176622c6c12b4bff$var$gze,\n            function() {\n                return [\n                    $176622c6c12b4bff$var$astrm,\n                    $176622c6c12b4bff$export$ae157b6234afe138,\n                    $176622c6c12b4bff$export$8e4b66d280bf8342\n                ];\n            }\n        ], this, $176622c6c12b4bff$var$StrmOpt.call(this, opts, cb), function(ev) {\n            var strm = new $176622c6c12b4bff$export$8e4b66d280bf8342(ev.data);\n            onmessage = $176622c6c12b4bff$var$astrm(strm);\n        }, 8, 1);\n    }\n    return AsyncGzip;\n}();\nfunction $176622c6c12b4bff$export$69f0ea7cf3a331a8(data, opts, cb) {\n    if (!cb) cb = opts, opts = {};\n    if (typeof cb != 'function') $176622c6c12b4bff$var$err(7);\n    return $176622c6c12b4bff$var$cbify(data, opts, [\n        $176622c6c12b4bff$var$bDflt,\n        $176622c6c12b4bff$var$gze,\n        function() {\n            return [\n                $176622c6c12b4bff$export$3d616c3fb3e15483\n            ];\n        }\n    ], function(ev) {\n        return $176622c6c12b4bff$var$pbf($176622c6c12b4bff$export$3d616c3fb3e15483(ev.data[0], ev.data[1]));\n    }, 2, cb);\n}\nfunction $176622c6c12b4bff$export$3d616c3fb3e15483(data, opts) {\n    if (!opts) opts = {};\n    var c = $176622c6c12b4bff$var$crc(), l = data.length;\n    c.p(data);\n    var d = $176622c6c12b4bff$var$dopt(data, opts, $176622c6c12b4bff$var$gzhl(opts), 8), s = d.length;\n    return $176622c6c12b4bff$var$gzh(d, opts), $176622c6c12b4bff$var$wbytes(d, s - 8, c.d()), $176622c6c12b4bff$var$wbytes(d, s - 4, l), d;\n}\n/**\n * Streaming single or multi-member GZIP decompression\n */ var $176622c6c12b4bff$export$4cb607de6db70415 = /*#__PURE__*/ function() {\n    function Gunzip(opts, cb) {\n        this.v = 1;\n        this.r = 0;\n        $176622c6c12b4bff$export$d1de70a877d6e43c.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GUNZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */ Gunzip.prototype.push = function(chunk, final) {\n        $176622c6c12b4bff$export$d1de70a877d6e43c.prototype.e.call(this, chunk);\n        this.r += chunk.length;\n        if (this.v) {\n            var p = this.p.subarray(this.v - 1);\n            var s = p.length > 3 ? $176622c6c12b4bff$var$gzs(p) : 4;\n            if (s > p.length) {\n                if (!final) return;\n            } else if (this.v > 1 && this.onmember) this.onmember(this.r - p.length);\n            this.p = p.subarray(s), this.v = 0;\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        $176622c6c12b4bff$export$d1de70a877d6e43c.prototype.c.call(this, final);\n        // process concatenated GZIP\n        if (this.s.f && !this.s.l && !final) {\n            this.v = $176622c6c12b4bff$var$shft(this.s.p) + 9;\n            this.s = {\n                i: 0\n            };\n            this.o = new $176622c6c12b4bff$var$u8(0);\n            this.push(new $176622c6c12b4bff$var$u8(0), final);\n        }\n    };\n    return Gunzip;\n}();\n/**\n * Asynchronous streaming single or multi-member GZIP decompression\n */ var $176622c6c12b4bff$export$d5adcdd968132151 = /*#__PURE__*/ function() {\n    function AsyncGunzip(opts, cb) {\n        var _this = this;\n        $176622c6c12b4bff$var$astrmify([\n            $176622c6c12b4bff$var$bInflt,\n            $176622c6c12b4bff$var$guze,\n            function() {\n                return [\n                    $176622c6c12b4bff$var$astrm,\n                    $176622c6c12b4bff$export$d1de70a877d6e43c,\n                    $176622c6c12b4bff$export$4cb607de6db70415\n                ];\n            }\n        ], this, $176622c6c12b4bff$var$StrmOpt.call(this, opts, cb), function(ev) {\n            var strm = new $176622c6c12b4bff$export$4cb607de6db70415(ev.data);\n            strm.onmember = function(offset) {\n                return postMessage(offset);\n            };\n            onmessage = $176622c6c12b4bff$var$astrm(strm);\n        }, 9, 0, function(offset) {\n            return _this.onmember && _this.onmember(offset);\n        });\n    }\n    return AsyncGunzip;\n}();\nfunction $176622c6c12b4bff$export$b6df3e950734d697(data, opts, cb) {\n    if (!cb) cb = opts, opts = {};\n    if (typeof cb != 'function') $176622c6c12b4bff$var$err(7);\n    return $176622c6c12b4bff$var$cbify(data, opts, [\n        $176622c6c12b4bff$var$bInflt,\n        $176622c6c12b4bff$var$guze,\n        function() {\n            return [\n                $176622c6c12b4bff$export$c80456f7aaba691c\n            ];\n        }\n    ], function(ev) {\n        return $176622c6c12b4bff$var$pbf($176622c6c12b4bff$export$c80456f7aaba691c(ev.data[0], ev.data[1]));\n    }, 3, cb);\n}\nfunction $176622c6c12b4bff$export$c80456f7aaba691c(data, opts) {\n    var st = $176622c6c12b4bff$var$gzs(data);\n    if (st + 8 > data.length) $176622c6c12b4bff$var$err(6, 'invalid gzip data');\n    return $176622c6c12b4bff$var$inflt(data.subarray(st, -8), {\n        i: 2\n    }, opts && opts.out || new $176622c6c12b4bff$var$u8($176622c6c12b4bff$var$gzl(data)), opts && opts.dictionary);\n}\n/**\n * Streaming Zlib compression\n */ var $176622c6c12b4bff$export$4187ccf2467013b9 = /*#__PURE__*/ function() {\n    function Zlib(opts, cb) {\n        this.c = $176622c6c12b4bff$var$adler();\n        this.v = 1;\n        $176622c6c12b4bff$export$ae157b6234afe138.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be zlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */ Zlib.prototype.push = function(chunk, final) {\n        this.c.p(chunk);\n        $176622c6c12b4bff$export$ae157b6234afe138.prototype.push.call(this, chunk, final);\n    };\n    Zlib.prototype.p = function(c, f) {\n        var raw = $176622c6c12b4bff$var$dopt(c, this.o, this.v && (this.o.dictionary ? 6 : 2), f && 4, this.s);\n        if (this.v) $176622c6c12b4bff$var$zlh(raw, this.o), this.v = 0;\n        if (f) $176622c6c12b4bff$var$wbytes(raw, raw.length - 4, this.c.d());\n        this.ondata(raw, f);\n    };\n    /**\n     * Flushes buffered uncompressed data. Useful to immediately retrieve the\n     * zlibbed output for small inputs.\n     */ Zlib.prototype.flush = function() {\n        $176622c6c12b4bff$export$ae157b6234afe138.prototype.flush.call(this);\n    };\n    return Zlib;\n}();\n/**\n * Asynchronous streaming Zlib compression\n */ var $176622c6c12b4bff$export$bedbe3a2c2136490 = /*#__PURE__*/ function() {\n    function AsyncZlib(opts, cb) {\n        $176622c6c12b4bff$var$astrmify([\n            $176622c6c12b4bff$var$bDflt,\n            $176622c6c12b4bff$var$zle,\n            function() {\n                return [\n                    $176622c6c12b4bff$var$astrm,\n                    $176622c6c12b4bff$export$ae157b6234afe138,\n                    $176622c6c12b4bff$export$4187ccf2467013b9\n                ];\n            }\n        ], this, $176622c6c12b4bff$var$StrmOpt.call(this, opts, cb), function(ev) {\n            var strm = new $176622c6c12b4bff$export$4187ccf2467013b9(ev.data);\n            onmessage = $176622c6c12b4bff$var$astrm(strm);\n        }, 10, 1);\n    }\n    return AsyncZlib;\n}();\nfunction $176622c6c12b4bff$export$925212de7058410b(data, opts, cb) {\n    if (!cb) cb = opts, opts = {};\n    if (typeof cb != 'function') $176622c6c12b4bff$var$err(7);\n    return $176622c6c12b4bff$var$cbify(data, opts, [\n        $176622c6c12b4bff$var$bDflt,\n        $176622c6c12b4bff$var$zle,\n        function() {\n            return [\n                $176622c6c12b4bff$export$f87121a6d50aff25\n            ];\n        }\n    ], function(ev) {\n        return $176622c6c12b4bff$var$pbf($176622c6c12b4bff$export$f87121a6d50aff25(ev.data[0], ev.data[1]));\n    }, 4, cb);\n}\nfunction $176622c6c12b4bff$export$f87121a6d50aff25(data, opts) {\n    if (!opts) opts = {};\n    var a = $176622c6c12b4bff$var$adler();\n    a.p(data);\n    var d = $176622c6c12b4bff$var$dopt(data, opts, opts.dictionary ? 6 : 2, 4);\n    return $176622c6c12b4bff$var$zlh(d, opts), $176622c6c12b4bff$var$wbytes(d, d.length - 4, a.d()), d;\n}\n/**\n * Streaming Zlib decompression\n */ var $176622c6c12b4bff$export$af2424f875ff1b17 = /*#__PURE__*/ function() {\n    function Unzlib(opts, cb) {\n        $176622c6c12b4bff$export$d1de70a877d6e43c.call(this, opts, cb);\n        this.v = opts && opts.dictionary ? 2 : 1;\n    }\n    /**\n     * Pushes a chunk to be unzlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */ Unzlib.prototype.push = function(chunk, final) {\n        $176622c6c12b4bff$export$d1de70a877d6e43c.prototype.e.call(this, chunk);\n        if (this.v) {\n            if (this.p.length < 6 && !final) return;\n            this.p = this.p.subarray($176622c6c12b4bff$var$zls(this.p, this.v - 1)), this.v = 0;\n        }\n        if (final) {\n            if (this.p.length < 4) $176622c6c12b4bff$var$err(6, 'invalid zlib data');\n            this.p = this.p.subarray(0, -4);\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        $176622c6c12b4bff$export$d1de70a877d6e43c.prototype.c.call(this, final);\n    };\n    return Unzlib;\n}();\n/**\n * Asynchronous streaming Zlib decompression\n */ var $176622c6c12b4bff$export$cf6668790220dcad = /*#__PURE__*/ function() {\n    function AsyncUnzlib(opts, cb) {\n        $176622c6c12b4bff$var$astrmify([\n            $176622c6c12b4bff$var$bInflt,\n            $176622c6c12b4bff$var$zule,\n            function() {\n                return [\n                    $176622c6c12b4bff$var$astrm,\n                    $176622c6c12b4bff$export$d1de70a877d6e43c,\n                    $176622c6c12b4bff$export$af2424f875ff1b17\n                ];\n            }\n        ], this, $176622c6c12b4bff$var$StrmOpt.call(this, opts, cb), function(ev) {\n            var strm = new $176622c6c12b4bff$export$af2424f875ff1b17(ev.data);\n            onmessage = $176622c6c12b4bff$var$astrm(strm);\n        }, 11, 0);\n    }\n    return AsyncUnzlib;\n}();\nfunction $176622c6c12b4bff$export$ca7cbb494e731274(data, opts, cb) {\n    if (!cb) cb = opts, opts = {};\n    if (typeof cb != 'function') $176622c6c12b4bff$var$err(7);\n    return $176622c6c12b4bff$var$cbify(data, opts, [\n        $176622c6c12b4bff$var$bInflt,\n        $176622c6c12b4bff$var$zule,\n        function() {\n            return [\n                $176622c6c12b4bff$export$9ec8134f0f1b9fc6\n            ];\n        }\n    ], function(ev) {\n        return $176622c6c12b4bff$var$pbf($176622c6c12b4bff$export$9ec8134f0f1b9fc6(ev.data[0], $176622c6c12b4bff$var$gopt(ev.data[1])));\n    }, 5, cb);\n}\nfunction $176622c6c12b4bff$export$9ec8134f0f1b9fc6(data, opts) {\n    return $176622c6c12b4bff$var$inflt(data.subarray($176622c6c12b4bff$var$zls(data, opts && opts.dictionary), -4), {\n        i: 2\n    }, opts && opts.out, opts && opts.dictionary);\n}\n/**\n * Streaming GZIP, Zlib, or raw DEFLATE decompression\n */ var $176622c6c12b4bff$export$578fe199ef655b76 = /*#__PURE__*/ function() {\n    function Decompress(opts, cb) {\n        this.o = $176622c6c12b4bff$var$StrmOpt.call(this, opts, cb) || {};\n        this.G = $176622c6c12b4bff$export$4cb607de6db70415;\n        this.I = $176622c6c12b4bff$export$d1de70a877d6e43c;\n        this.Z = $176622c6c12b4bff$export$af2424f875ff1b17;\n    }\n    // init substream\n    // overriden by AsyncDecompress\n    Decompress.prototype.i = function() {\n        var _this = this;\n        this.s.ondata = function(dat, final) {\n            _this.ondata(dat, final);\n        };\n    };\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */ Decompress.prototype.push = function(chunk, final) {\n        if (!this.ondata) $176622c6c12b4bff$var$err(5);\n        if (!this.s) {\n            if (this.p && this.p.length) {\n                var n = new $176622c6c12b4bff$var$u8(this.p.length + chunk.length);\n                n.set(this.p), n.set(chunk, this.p.length);\n            } else this.p = chunk;\n            if (this.p.length > 2) {\n                this.s = this.p[0] == 31 && this.p[1] == 139 && this.p[2] == 8 ? new this.G(this.o) : (this.p[0] & 15) != 8 || this.p[0] >> 4 > 7 || (this.p[0] << 8 | this.p[1]) % 31 ? new this.I(this.o) : new this.Z(this.o);\n                this.i();\n                this.s.push(this.p, final);\n                this.p = null;\n            }\n        } else this.s.push(chunk, final);\n    };\n    return Decompress;\n}();\n/**\n * Asynchronous streaming GZIP, Zlib, or raw DEFLATE decompression\n */ var $176622c6c12b4bff$export$ae2c1d81988d4b43 = /*#__PURE__*/ function() {\n    function AsyncDecompress(opts, cb) {\n        $176622c6c12b4bff$export$578fe199ef655b76.call(this, opts, cb);\n        this.queuedSize = 0;\n        this.G = $176622c6c12b4bff$export$d5adcdd968132151;\n        this.I = $176622c6c12b4bff$export$fff8358d6dbaa9cc;\n        this.Z = $176622c6c12b4bff$export$cf6668790220dcad;\n    }\n    AsyncDecompress.prototype.i = function() {\n        var _this = this;\n        this.s.ondata = function(err, dat, final) {\n            _this.ondata(err, dat, final);\n        };\n        this.s.ondrain = function(size) {\n            _this.queuedSize -= size;\n            if (_this.ondrain) _this.ondrain(size);\n        };\n    };\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */ AsyncDecompress.prototype.push = function(chunk, final) {\n        this.queuedSize += chunk.length;\n        $176622c6c12b4bff$export$578fe199ef655b76.prototype.push.call(this, chunk, final);\n    };\n    return AsyncDecompress;\n}();\nfunction $176622c6c12b4bff$export$678d868aab8fb3c7(data, opts, cb) {\n    if (!cb) cb = opts, opts = {};\n    if (typeof cb != 'function') $176622c6c12b4bff$var$err(7);\n    return data[0] == 31 && data[1] == 139 && data[2] == 8 ? $176622c6c12b4bff$export$b6df3e950734d697(data, opts, cb) : (data[0] & 15) != 8 || data[0] >> 4 > 7 || (data[0] << 8 | data[1]) % 31 ? $176622c6c12b4bff$export$cae1ce83fe4a1782(data, opts, cb) : $176622c6c12b4bff$export$ca7cbb494e731274(data, opts, cb);\n}\nfunction $176622c6c12b4bff$export$c4bdbbbc9a4faabe(data, opts) {\n    return data[0] == 31 && data[1] == 139 && data[2] == 8 ? $176622c6c12b4bff$export$c80456f7aaba691c(data, opts) : (data[0] & 15) != 8 || data[0] >> 4 > 7 || (data[0] << 8 | data[1]) % 31 ? $176622c6c12b4bff$export$90366d8b308ba94a(data, opts) : $176622c6c12b4bff$export$9ec8134f0f1b9fc6(data, opts);\n}\n// flatten a directory structure\nvar $176622c6c12b4bff$var$fltn = function(d, p, t, o) {\n    for(var k in d){\n        var val = d[k], n = p + k, op = o;\n        if (Array.isArray(val)) op = $176622c6c12b4bff$var$mrg(o, val[1]), val = val[0];\n        if (val instanceof $176622c6c12b4bff$var$u8) t[n] = [\n            val,\n            op\n        ];\n        else {\n            t[n += '/'] = [\n                new $176622c6c12b4bff$var$u8(0),\n                op\n            ];\n            $176622c6c12b4bff$var$fltn(val, n, t, o);\n        }\n    }\n};\n// text encoder\nvar $176622c6c12b4bff$var$te = typeof TextEncoder != 'undefined' && /*#__PURE__*/ new TextEncoder();\n// text decoder\nvar $176622c6c12b4bff$var$td = typeof TextDecoder != 'undefined' && /*#__PURE__*/ new TextDecoder();\n// text decoder stream\nvar $176622c6c12b4bff$var$tds = 0;\ntry {\n    $176622c6c12b4bff$var$td.decode($176622c6c12b4bff$var$et, {\n        stream: true\n    });\n    $176622c6c12b4bff$var$tds = 1;\n} catch (e) {}\n// decode UTF8\nvar $176622c6c12b4bff$var$dutf8 = function(d) {\n    for(var r = '', i = 0;;){\n        var c = d[i++];\n        var eb = (c > 127) + (c > 223) + (c > 239);\n        if (i + eb > d.length) return {\n            s: r,\n            r: $176622c6c12b4bff$var$slc(d, i - 1)\n        };\n        if (!eb) r += String.fromCharCode(c);\n        else if (eb == 3) c = ((c & 15) << 18 | (d[i++] & 63) << 12 | (d[i++] & 63) << 6 | d[i++] & 63) - 65536, r += String.fromCharCode(55296 | c >> 10, 56320 | c & 1023);\n        else if (eb & 1) r += String.fromCharCode((c & 31) << 6 | d[i++] & 63);\n        else r += String.fromCharCode((c & 15) << 12 | (d[i++] & 63) << 6 | d[i++] & 63);\n    }\n};\n/**\n * Streaming UTF-8 decoding\n */ var $176622c6c12b4bff$export$ba46860a31c72e94 = /*#__PURE__*/ function() {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is decoded\n     */ function DecodeUTF8(cb) {\n        this.ondata = cb;\n        if ($176622c6c12b4bff$var$tds) this.t = new TextDecoder();\n        else this.p = $176622c6c12b4bff$var$et;\n    }\n    /**\n     * Pushes a chunk to be decoded from UTF-8 binary\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */ DecodeUTF8.prototype.push = function(chunk, final) {\n        if (!this.ondata) $176622c6c12b4bff$var$err(5);\n        final = !!final;\n        if (this.t) {\n            this.ondata(this.t.decode(chunk, {\n                stream: true\n            }), final);\n            if (final) {\n                if (this.t.decode().length) $176622c6c12b4bff$var$err(8);\n                this.t = null;\n            }\n            return;\n        }\n        if (!this.p) $176622c6c12b4bff$var$err(4);\n        var dat = new $176622c6c12b4bff$var$u8(this.p.length + chunk.length);\n        dat.set(this.p);\n        dat.set(chunk, this.p.length);\n        var _a = $176622c6c12b4bff$var$dutf8(dat), s = _a.s, r = _a.r;\n        if (final) {\n            if (r.length) $176622c6c12b4bff$var$err(8);\n            this.p = null;\n        } else this.p = r;\n        this.ondata(s, final);\n    };\n    return DecodeUTF8;\n}();\n/**\n * Streaming UTF-8 encoding\n */ var $176622c6c12b4bff$export$283f13d12b1b210e = /*#__PURE__*/ function() {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is encoded\n     */ function EncodeUTF8(cb) {\n        this.ondata = cb;\n    }\n    /**\n     * Pushes a chunk to be encoded to UTF-8\n     * @param chunk The string data to push\n     * @param final Whether this is the last chunk\n     */ EncodeUTF8.prototype.push = function(chunk, final) {\n        if (!this.ondata) $176622c6c12b4bff$var$err(5);\n        if (this.d) $176622c6c12b4bff$var$err(4);\n        this.ondata($176622c6c12b4bff$export$366b39a6daa8ed7a(chunk), this.d = final || false);\n    };\n    return EncodeUTF8;\n}();\nfunction $176622c6c12b4bff$export$366b39a6daa8ed7a(str, latin1) {\n    if (latin1) {\n        var ar_1 = new $176622c6c12b4bff$var$u8(str.length);\n        for(var i = 0; i < str.length; ++i)ar_1[i] = str.charCodeAt(i);\n        return ar_1;\n    }\n    if ($176622c6c12b4bff$var$te) return $176622c6c12b4bff$var$te.encode(str);\n    var l = str.length;\n    var ar = new $176622c6c12b4bff$var$u8(str.length + (str.length >> 1));\n    var ai = 0;\n    var w = function(v) {\n        ar[ai++] = v;\n    };\n    for(var i = 0; i < l; ++i){\n        if (ai + 5 > ar.length) {\n            var n = new $176622c6c12b4bff$var$u8(ai + 8 + (l - i << 1));\n            n.set(ar);\n            ar = n;\n        }\n        var c = str.charCodeAt(i);\n        if (c < 128 || latin1) w(c);\n        else if (c < 2048) w(192 | c >> 6), w(128 | c & 63);\n        else if (c > 55295 && c < 57344) c = 65536 + (c & 1047552) | str.charCodeAt(++i) & 1023, w(240 | c >> 18), w(128 | c >> 12 & 63), w(128 | c >> 6 & 63), w(128 | c & 63);\n        else w(224 | c >> 12), w(128 | c >> 6 & 63), w(128 | c & 63);\n    }\n    return $176622c6c12b4bff$var$slc(ar, 0, ai);\n}\nfunction $176622c6c12b4bff$export$adb211f8cb999894(dat, latin1) {\n    if (latin1) {\n        var r = '';\n        for(var i = 0; i < dat.length; i += 16384)r += String.fromCharCode.apply(null, dat.subarray(i, i + 16384));\n        return r;\n    } else if ($176622c6c12b4bff$var$td) return $176622c6c12b4bff$var$td.decode(dat);\n    else {\n        var _a = $176622c6c12b4bff$var$dutf8(dat), s = _a.s, r = _a.r;\n        if (r.length) $176622c6c12b4bff$var$err(8);\n        return s;\n    }\n}\n// deflate bit flag\nvar $176622c6c12b4bff$var$dbf = function(l) {\n    return l == 1 ? 3 : l < 6 ? 2 : l == 9 ? 1 : 0;\n};\n// skip local zip header\nvar $176622c6c12b4bff$var$slzh = function(d, b) {\n    return b + 30 + $176622c6c12b4bff$var$b2(d, b + 26) + $176622c6c12b4bff$var$b2(d, b + 28);\n};\n// read zip header\nvar $176622c6c12b4bff$var$zh = function(d, b, z) {\n    var fnl = $176622c6c12b4bff$var$b2(d, b + 28), fn = $176622c6c12b4bff$export$adb211f8cb999894(d.subarray(b + 46, b + 46 + fnl), !($176622c6c12b4bff$var$b2(d, b + 8) & 2048)), es = b + 46 + fnl, bs = $176622c6c12b4bff$var$b4(d, b + 20);\n    var _a = z && bs == 4294967295 ? $176622c6c12b4bff$var$z64e(d, es) : [\n        bs,\n        $176622c6c12b4bff$var$b4(d, b + 24),\n        $176622c6c12b4bff$var$b4(d, b + 42)\n    ], sc = _a[0], su = _a[1], off = _a[2];\n    return [\n        $176622c6c12b4bff$var$b2(d, b + 10),\n        sc,\n        su,\n        fn,\n        es + $176622c6c12b4bff$var$b2(d, b + 30) + $176622c6c12b4bff$var$b2(d, b + 32),\n        off\n    ];\n};\n// read zip64 extra field\nvar $176622c6c12b4bff$var$z64e = function(d, b) {\n    for(; $176622c6c12b4bff$var$b2(d, b) != 1; b += 4 + $176622c6c12b4bff$var$b2(d, b + 2));\n    return [\n        $176622c6c12b4bff$var$b8(d, b + 12),\n        $176622c6c12b4bff$var$b8(d, b + 4),\n        $176622c6c12b4bff$var$b8(d, b + 20)\n    ];\n};\n// extra field length\nvar $176622c6c12b4bff$var$exfl = function(ex) {\n    var le = 0;\n    if (ex) for(var k in ex){\n        var l = ex[k].length;\n        if (l > 65535) $176622c6c12b4bff$var$err(9);\n        le += l + 4;\n    }\n    return le;\n};\n// write zip header\nvar $176622c6c12b4bff$var$wzh = function(d, b, f, fn, u, c, ce, co) {\n    var fl = fn.length, ex = f.extra, col = co && co.length;\n    var exl = $176622c6c12b4bff$var$exfl(ex);\n    $176622c6c12b4bff$var$wbytes(d, b, ce != null ? 0x2014B50 : 0x4034B50), b += 4;\n    if (ce != null) d[b++] = 20, d[b++] = f.os;\n    d[b] = 20, b += 2; // spec compliance? what's that?\n    d[b++] = f.flag << 1 | (c < 0 && 8), d[b++] = u && 8;\n    d[b++] = f.compression & 255, d[b++] = f.compression >> 8;\n    var dt = new Date(f.mtime == null ? Date.now() : f.mtime), y = dt.getFullYear() - 1980;\n    if (y < 0 || y > 119) $176622c6c12b4bff$var$err(10);\n    $176622c6c12b4bff$var$wbytes(d, b, y << 25 | dt.getMonth() + 1 << 21 | dt.getDate() << 16 | dt.getHours() << 11 | dt.getMinutes() << 5 | dt.getSeconds() >> 1), b += 4;\n    if (c != -1) {\n        $176622c6c12b4bff$var$wbytes(d, b, f.crc);\n        $176622c6c12b4bff$var$wbytes(d, b + 4, c < 0 ? -c - 2 : c);\n        $176622c6c12b4bff$var$wbytes(d, b + 8, f.size);\n    }\n    $176622c6c12b4bff$var$wbytes(d, b + 12, fl);\n    $176622c6c12b4bff$var$wbytes(d, b + 14, exl), b += 16;\n    if (ce != null) {\n        $176622c6c12b4bff$var$wbytes(d, b, col);\n        $176622c6c12b4bff$var$wbytes(d, b + 6, f.attrs);\n        $176622c6c12b4bff$var$wbytes(d, b + 10, ce), b += 14;\n    }\n    d.set(fn, b);\n    b += fl;\n    if (exl) for(var k in ex){\n        var exf = ex[k], l = exf.length;\n        $176622c6c12b4bff$var$wbytes(d, b, +k);\n        $176622c6c12b4bff$var$wbytes(d, b + 2, l);\n        d.set(exf, b + 4), b += 4 + l;\n    }\n    if (col) d.set(co, b), b += col;\n    return b;\n};\n// write zip footer (end of central directory)\nvar $176622c6c12b4bff$var$wzf = function(o, b, c, d, e) {\n    $176622c6c12b4bff$var$wbytes(o, b, 0x6054B50); // skip disk\n    $176622c6c12b4bff$var$wbytes(o, b + 8, c);\n    $176622c6c12b4bff$var$wbytes(o, b + 10, c);\n    $176622c6c12b4bff$var$wbytes(o, b + 12, d);\n    $176622c6c12b4bff$var$wbytes(o, b + 16, e);\n};\n/**\n * A pass-through stream to keep data uncompressed in a ZIP archive.\n */ var $176622c6c12b4bff$export$2b25194e1767ea06 = /*#__PURE__*/ function() {\n    /**\n     * Creates a pass-through stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     */ function ZipPassThrough(filename) {\n        this.filename = filename;\n        this.c = $176622c6c12b4bff$var$crc();\n        this.size = 0;\n        this.compression = 0;\n    }\n    /**\n     * Processes a chunk and pushes to the output stream. You can override this\n     * method in a subclass for custom behavior, but by default this passes\n     * the data through. You must call this.ondata(err, chunk, final) at some\n     * point in this method.\n     * @param chunk The chunk to process\n     * @param final Whether this is the last chunk\n     */ ZipPassThrough.prototype.process = function(chunk, final) {\n        this.ondata(null, chunk, final);\n    };\n    /**\n     * Pushes a chunk to be added. If you are subclassing this with a custom\n     * compression algorithm, note that you must push data from the source\n     * file only, pre-compression.\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */ ZipPassThrough.prototype.push = function(chunk, final) {\n        if (!this.ondata) $176622c6c12b4bff$var$err(5);\n        this.c.p(chunk);\n        this.size += chunk.length;\n        if (final) this.crc = this.c.d();\n        this.process(chunk, final || false);\n    };\n    return ZipPassThrough;\n}();\n// I don't extend because TypeScript extension adds 1kB of runtime bloat\n/**\n * Streaming DEFLATE compression for ZIP archives. Prefer using AsyncZipDeflate\n * for better performance\n */ var $176622c6c12b4bff$export$f7e481ca646388b6 = /*#__PURE__*/ function() {\n    /**\n     * Creates a DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */ function ZipDeflate(filename, opts) {\n        var _this = this;\n        if (!opts) opts = {};\n        $176622c6c12b4bff$export$2b25194e1767ea06.call(this, filename);\n        this.d = new $176622c6c12b4bff$export$ae157b6234afe138(opts, function(dat, final) {\n            _this.ondata(null, dat, final);\n        });\n        this.compression = 8;\n        this.flag = $176622c6c12b4bff$var$dbf(opts.level);\n    }\n    ZipDeflate.prototype.process = function(chunk, final) {\n        try {\n            this.d.push(chunk, final);\n        } catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */ ZipDeflate.prototype.push = function(chunk, final) {\n        $176622c6c12b4bff$export$2b25194e1767ea06.prototype.push.call(this, chunk, final);\n    };\n    return ZipDeflate;\n}();\n/**\n * Asynchronous streaming DEFLATE compression for ZIP archives\n */ var $176622c6c12b4bff$export$ffb5e59e179924b2 = /*#__PURE__*/ function() {\n    /**\n     * Creates an asynchronous DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */ function AsyncZipDeflate(filename, opts) {\n        var _this = this;\n        if (!opts) opts = {};\n        $176622c6c12b4bff$export$2b25194e1767ea06.call(this, filename);\n        this.d = new $176622c6c12b4bff$export$84e526fabcba03e3(opts, function(err, dat, final) {\n            _this.ondata(err, dat, final);\n        });\n        this.compression = 8;\n        this.flag = $176622c6c12b4bff$var$dbf(opts.level);\n        this.terminate = this.d.terminate;\n    }\n    AsyncZipDeflate.prototype.process = function(chunk, final) {\n        this.d.push(chunk, final);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */ AsyncZipDeflate.prototype.push = function(chunk, final) {\n        $176622c6c12b4bff$export$2b25194e1767ea06.prototype.push.call(this, chunk, final);\n    };\n    return AsyncZipDeflate;\n}();\n// TODO: Better tree shaking\n/**\n * A zippable archive to which files can incrementally be added\n */ var $176622c6c12b4bff$export$9a4d4a7c32a75d2f = /*#__PURE__*/ function() {\n    /**\n     * Creates an empty ZIP archive to which files can be added\n     * @param cb The callback to call whenever data for the generated ZIP archive\n     *           is available\n     */ function Zip(cb) {\n        this.ondata = cb;\n        this.u = [];\n        this.d = 1;\n    }\n    /**\n     * Adds a file to the ZIP archive\n     * @param file The file stream to add\n     */ Zip.prototype.add = function(file) {\n        var _this = this;\n        if (!this.ondata) $176622c6c12b4bff$var$err(5);\n        // finishing or finished\n        if (this.d & 2) this.ondata($176622c6c12b4bff$var$err(4 + (this.d & 1) * 8, 0, 1), null, false);\n        else {\n            var f = $176622c6c12b4bff$export$366b39a6daa8ed7a(file.filename), fl_1 = f.length;\n            var com = file.comment, o = com && $176622c6c12b4bff$export$366b39a6daa8ed7a(com);\n            var u = fl_1 != file.filename.length || o && com.length != o.length;\n            var hl_1 = fl_1 + $176622c6c12b4bff$var$exfl(file.extra) + 30;\n            if (fl_1 > 65535) this.ondata($176622c6c12b4bff$var$err(11, 0, 1), null, false);\n            var header = new $176622c6c12b4bff$var$u8(hl_1);\n            $176622c6c12b4bff$var$wzh(header, 0, file, f, u, -1);\n            var chks_1 = [\n                header\n            ];\n            var pAll_1 = function() {\n                for(var _i = 0, chks_2 = chks_1; _i < chks_2.length; _i++){\n                    var chk = chks_2[_i];\n                    _this.ondata(null, chk, false);\n                }\n                chks_1 = [];\n            };\n            var tr_1 = this.d;\n            this.d = 0;\n            var ind_1 = this.u.length;\n            var uf_1 = $176622c6c12b4bff$var$mrg(file, {\n                f: f,\n                u: u,\n                o: o,\n                t: function() {\n                    if (file.terminate) file.terminate();\n                },\n                r: function() {\n                    pAll_1();\n                    if (tr_1) {\n                        var nxt = _this.u[ind_1 + 1];\n                        if (nxt) nxt.r();\n                        else _this.d = 1;\n                    }\n                    tr_1 = 1;\n                }\n            });\n            var cl_1 = 0;\n            file.ondata = function(err, dat, final) {\n                if (err) {\n                    _this.ondata(err, dat, final);\n                    _this.terminate();\n                } else {\n                    cl_1 += dat.length;\n                    chks_1.push(dat);\n                    if (final) {\n                        var dd = new $176622c6c12b4bff$var$u8(16);\n                        $176622c6c12b4bff$var$wbytes(dd, 0, 0x8074B50);\n                        $176622c6c12b4bff$var$wbytes(dd, 4, file.crc);\n                        $176622c6c12b4bff$var$wbytes(dd, 8, cl_1);\n                        $176622c6c12b4bff$var$wbytes(dd, 12, file.size);\n                        chks_1.push(dd);\n                        uf_1.c = cl_1, uf_1.b = hl_1 + cl_1 + 16, uf_1.crc = file.crc, uf_1.size = file.size;\n                        if (tr_1) uf_1.r();\n                        tr_1 = 1;\n                    } else if (tr_1) pAll_1();\n                }\n            };\n            this.u.push(uf_1);\n        }\n    };\n    /**\n     * Ends the process of adding files and prepares to emit the final chunks.\n     * This *must* be called after adding all desired files for the resulting\n     * ZIP file to work properly.\n     */ Zip.prototype.end = function() {\n        var _this = this;\n        if (this.d & 2) {\n            this.ondata($176622c6c12b4bff$var$err(4 + (this.d & 1) * 8, 0, 1), null, true);\n            return;\n        }\n        if (this.d) this.e();\n        else this.u.push({\n            r: function() {\n                if (!(_this.d & 1)) return;\n                _this.u.splice(-1, 1);\n                _this.e();\n            },\n            t: function() {}\n        });\n        this.d = 3;\n    };\n    Zip.prototype.e = function() {\n        var bt = 0, l = 0, tl = 0;\n        for(var _i = 0, _a = this.u; _i < _a.length; _i++){\n            var f = _a[_i];\n            tl += 46 + f.f.length + $176622c6c12b4bff$var$exfl(f.extra) + (f.o ? f.o.length : 0);\n        }\n        var out = new $176622c6c12b4bff$var$u8(tl + 22);\n        for(var _b = 0, _c = this.u; _b < _c.length; _b++){\n            var f = _c[_b];\n            $176622c6c12b4bff$var$wzh(out, bt, f, f.f, f.u, -f.c - 2, l, f.o);\n            bt += 46 + f.f.length + $176622c6c12b4bff$var$exfl(f.extra) + (f.o ? f.o.length : 0), l += f.b;\n        }\n        $176622c6c12b4bff$var$wzf(out, bt, this.u.length, tl, l);\n        this.ondata(null, out, true);\n        this.d = 2;\n    };\n    /**\n     * A method to terminate any internal workers used by the stream. Subsequent\n     * calls to add() will fail.\n     */ Zip.prototype.terminate = function() {\n        for(var _i = 0, _a = this.u; _i < _a.length; _i++){\n            var f = _a[_i];\n            f.t();\n        }\n        this.d = 2;\n    };\n    return Zip;\n}();\nfunction $176622c6c12b4bff$export$8901015135f2fb22(data, opts, cb) {\n    if (!cb) cb = opts, opts = {};\n    if (typeof cb != 'function') $176622c6c12b4bff$var$err(7);\n    var r = {};\n    $176622c6c12b4bff$var$fltn(data, '', r, opts);\n    var k = Object.keys(r);\n    var lft = k.length, o = 0, tot = 0;\n    var slft = lft, files = new Array(lft);\n    var term = [];\n    var tAll = function() {\n        for(var i = 0; i < term.length; ++i)term[i]();\n    };\n    var cbd = function(a, b) {\n        $176622c6c12b4bff$var$mt(function() {\n            cb(a, b);\n        });\n    };\n    $176622c6c12b4bff$var$mt(function() {\n        cbd = cb;\n    });\n    var cbf = function() {\n        var out = new $176622c6c12b4bff$var$u8(tot + 22), oe = o, cdl = tot - o;\n        tot = 0;\n        for(var i = 0; i < slft; ++i){\n            var f = files[i];\n            try {\n                var l = f.c.length;\n                $176622c6c12b4bff$var$wzh(out, tot, f, f.f, f.u, l);\n                var badd = 30 + f.f.length + $176622c6c12b4bff$var$exfl(f.extra);\n                var loc = tot + badd;\n                out.set(f.c, loc);\n                $176622c6c12b4bff$var$wzh(out, o, f, f.f, f.u, l, tot, f.m), o += 16 + badd + (f.m ? f.m.length : 0), tot = loc + l;\n            } catch (e) {\n                return cbd(e, null);\n            }\n        }\n        $176622c6c12b4bff$var$wzf(out, o, files.length, cdl, oe);\n        cbd(null, out);\n    };\n    if (!lft) cbf();\n    var _loop_1 = function(i) {\n        var fn = k[i];\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var c = $176622c6c12b4bff$var$crc(), size = file.length;\n        c.p(file);\n        var f = $176622c6c12b4bff$export$366b39a6daa8ed7a(fn), s = f.length;\n        var com = p.comment, m = com && $176622c6c12b4bff$export$366b39a6daa8ed7a(com), ms = m && m.length;\n        var exl = $176622c6c12b4bff$var$exfl(p.extra);\n        var compression = p.level == 0 ? 0 : 8;\n        var cbl = function(e, d) {\n            if (e) {\n                tAll();\n                cbd(e, null);\n            } else {\n                var l = d.length;\n                files[i] = $176622c6c12b4bff$var$mrg(p, {\n                    size: size,\n                    crc: c.d(),\n                    c: d,\n                    f: f,\n                    m: m,\n                    u: s != fn.length || m && com.length != ms,\n                    compression: compression\n                });\n                o += 30 + s + exl + l;\n                tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n                if (!--lft) cbf();\n            }\n        };\n        if (s > 65535) cbl($176622c6c12b4bff$var$err(11, 0, 1), null);\n        if (!compression) cbl(null, file);\n        else if (size < 160000) try {\n            cbl(null, $176622c6c12b4bff$export$21533ff51b8a0b4a(file, p));\n        } catch (e) {\n            cbl(e, null);\n        }\n        else term.push($176622c6c12b4bff$export$2316623ecd1285ab(file, p, cbl));\n    };\n    // Cannot use lft because it can decrease\n    for(var i = 0; i < slft; ++i)_loop_1(i);\n    return tAll;\n}\nfunction $176622c6c12b4bff$export$eb1654f146d54eb3(data, opts) {\n    if (!opts) opts = {};\n    var r = {};\n    var files = [];\n    $176622c6c12b4bff$var$fltn(data, '', r, opts);\n    var o = 0;\n    var tot = 0;\n    for(var fn in r){\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var compression = p.level == 0 ? 0 : 8;\n        var f = $176622c6c12b4bff$export$366b39a6daa8ed7a(fn), s = f.length;\n        var com = p.comment, m = com && $176622c6c12b4bff$export$366b39a6daa8ed7a(com), ms = m && m.length;\n        var exl = $176622c6c12b4bff$var$exfl(p.extra);\n        if (s > 65535) $176622c6c12b4bff$var$err(11);\n        var d = compression ? $176622c6c12b4bff$export$21533ff51b8a0b4a(file, p) : file, l = d.length;\n        var c = $176622c6c12b4bff$var$crc();\n        c.p(file);\n        files.push($176622c6c12b4bff$var$mrg(p, {\n            size: file.length,\n            crc: c.d(),\n            c: d,\n            f: f,\n            m: m,\n            u: s != fn.length || m && com.length != ms,\n            o: o,\n            compression: compression\n        }));\n        o += 30 + s + exl + l;\n        tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n    }\n    var out = new $176622c6c12b4bff$var$u8(tot + 22), oe = o, cdl = tot - o;\n    for(var i = 0; i < files.length; ++i){\n        var f = files[i];\n        $176622c6c12b4bff$var$wzh(out, f.o, f, f.f, f.u, f.c.length);\n        var badd = 30 + f.f.length + $176622c6c12b4bff$var$exfl(f.extra);\n        out.set(f.c, f.o + badd);\n        $176622c6c12b4bff$var$wzh(out, o, f, f.f, f.u, f.c.length, f.o, f.m), o += 16 + badd + (f.m ? f.m.length : 0);\n    }\n    $176622c6c12b4bff$var$wzf(out, o, files.length, cdl, oe);\n    return out;\n}\n/**\n * Streaming pass-through decompression for ZIP archives\n */ var $176622c6c12b4bff$export$93f81d5bbbb7c6bf = /*#__PURE__*/ function() {\n    function UnzipPassThrough() {}\n    UnzipPassThrough.prototype.push = function(data, final) {\n        this.ondata(null, data, final);\n    };\n    UnzipPassThrough.compression = 0;\n    return UnzipPassThrough;\n}();\n/**\n * Streaming DEFLATE decompression for ZIP archives. Prefer AsyncZipInflate for\n * better performance.\n */ var $176622c6c12b4bff$export$eb188945cc39e642 = /*#__PURE__*/ function() {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */ function UnzipInflate() {\n        var _this = this;\n        this.i = new $176622c6c12b4bff$export$d1de70a877d6e43c(function(dat, final) {\n            _this.ondata(null, dat, final);\n        });\n    }\n    UnzipInflate.prototype.push = function(data, final) {\n        try {\n            this.i.push(data, final);\n        } catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    UnzipInflate.compression = 8;\n    return UnzipInflate;\n}();\n/**\n * Asynchronous streaming DEFLATE decompression for ZIP archives\n */ var $176622c6c12b4bff$export$6235d84645dad4f9 = /*#__PURE__*/ function() {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */ function AsyncUnzipInflate(_, sz) {\n        var _this = this;\n        if (sz < 320000) this.i = new $176622c6c12b4bff$export$d1de70a877d6e43c(function(dat, final) {\n            _this.ondata(null, dat, final);\n        });\n        else {\n            this.i = new $176622c6c12b4bff$export$fff8358d6dbaa9cc(function(err, dat, final) {\n                _this.ondata(err, dat, final);\n            });\n            this.terminate = this.i.terminate;\n        }\n    }\n    AsyncUnzipInflate.prototype.push = function(data, final) {\n        if (this.i.terminate) data = $176622c6c12b4bff$var$slc(data, 0);\n        this.i.push(data, final);\n    };\n    AsyncUnzipInflate.compression = 8;\n    return AsyncUnzipInflate;\n}();\n/**\n * A ZIP archive decompression stream that emits files as they are discovered\n */ var $176622c6c12b4bff$export$9b7485f84cbaaa56 = /*#__PURE__*/ function() {\n    /**\n     * Creates a ZIP decompression stream\n     * @param cb The callback to call whenever a file in the ZIP archive is found\n     */ function Unzip(cb) {\n        this.onfile = cb;\n        this.k = [];\n        this.o = {\n            0: $176622c6c12b4bff$export$93f81d5bbbb7c6bf\n        };\n        this.p = $176622c6c12b4bff$var$et;\n    }\n    /**\n     * Pushes a chunk to be unzipped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */ Unzip.prototype.push = function(chunk, final) {\n        var _this = this;\n        if (!this.onfile) $176622c6c12b4bff$var$err(5);\n        if (!this.p) $176622c6c12b4bff$var$err(4);\n        if (this.c > 0) {\n            var len = Math.min(this.c, chunk.length);\n            var toAdd = chunk.subarray(0, len);\n            this.c -= len;\n            if (this.d) this.d.push(toAdd, !this.c);\n            else this.k[0].push(toAdd);\n            chunk = chunk.subarray(len);\n            if (chunk.length) return this.push(chunk, final);\n        } else {\n            var f = 0, i = 0, is = void 0, buf = void 0;\n            if (!this.p.length) buf = chunk;\n            else if (!chunk.length) buf = this.p;\n            else {\n                buf = new $176622c6c12b4bff$var$u8(this.p.length + chunk.length);\n                buf.set(this.p), buf.set(chunk, this.p.length);\n            }\n            var l = buf.length, oc = this.c, add = oc && this.d;\n            var _loop_2 = function() {\n                var _a;\n                var sig = $176622c6c12b4bff$var$b4(buf, i);\n                if (sig == 0x4034B50) {\n                    f = 1, is = i;\n                    this_1.d = null;\n                    this_1.c = 0;\n                    var bf = $176622c6c12b4bff$var$b2(buf, i + 6), cmp_1 = $176622c6c12b4bff$var$b2(buf, i + 8), u = bf & 2048, dd = bf & 8, fnl = $176622c6c12b4bff$var$b2(buf, i + 26), es = $176622c6c12b4bff$var$b2(buf, i + 28);\n                    if (l > i + 30 + fnl + es) {\n                        var chks_3 = [];\n                        this_1.k.unshift(chks_3);\n                        f = 2;\n                        var sc_1 = $176622c6c12b4bff$var$b4(buf, i + 18), su_1 = $176622c6c12b4bff$var$b4(buf, i + 22);\n                        var fn_1 = $176622c6c12b4bff$export$adb211f8cb999894(buf.subarray(i + 30, i += 30 + fnl), !u);\n                        if (sc_1 == 4294967295) _a = dd ? [\n                            -2\n                        ] : $176622c6c12b4bff$var$z64e(buf, i), sc_1 = _a[0], su_1 = _a[1];\n                        else if (dd) sc_1 = -1;\n                        i += es;\n                        this_1.c = sc_1;\n                        var d_1;\n                        var file_1 = {\n                            name: fn_1,\n                            compression: cmp_1,\n                            start: function() {\n                                if (!file_1.ondata) $176622c6c12b4bff$var$err(5);\n                                if (!sc_1) file_1.ondata(null, $176622c6c12b4bff$var$et, true);\n                                else {\n                                    var ctr = _this.o[cmp_1];\n                                    if (!ctr) file_1.ondata($176622c6c12b4bff$var$err(14, 'unknown compression type ' + cmp_1, 1), null, false);\n                                    d_1 = sc_1 < 0 ? new ctr(fn_1) : new ctr(fn_1, sc_1, su_1);\n                                    d_1.ondata = function(err, dat, final) {\n                                        file_1.ondata(err, dat, final);\n                                    };\n                                    for(var _i = 0, chks_4 = chks_3; _i < chks_4.length; _i++){\n                                        var dat = chks_4[_i];\n                                        d_1.push(dat, false);\n                                    }\n                                    if (_this.k[0] == chks_3 && _this.c) _this.d = d_1;\n                                    else d_1.push($176622c6c12b4bff$var$et, true);\n                                }\n                            },\n                            terminate: function() {\n                                if (d_1 && d_1.terminate) d_1.terminate();\n                            }\n                        };\n                        if (sc_1 >= 0) file_1.size = sc_1, file_1.originalSize = su_1;\n                        this_1.onfile(file_1);\n                    }\n                    return \"break\";\n                } else if (oc) {\n                    if (sig == 0x8074B50) {\n                        is = i += 12 + (oc == -2 && 8), f = 3, this_1.c = 0;\n                        return \"break\";\n                    } else if (sig == 0x2014B50) {\n                        is = i -= 4, f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                }\n            };\n            var this_1 = this;\n            for(; i < l - 4; ++i){\n                var state_1 = _loop_2();\n                if (state_1 === \"break\") break;\n            }\n            this.p = $176622c6c12b4bff$var$et;\n            if (oc < 0) {\n                var dat = f ? buf.subarray(0, is - 12 - (oc == -2 && 8) - ($176622c6c12b4bff$var$b4(buf, is - 16) == 0x8074B50 && 4)) : buf.subarray(0, i);\n                if (add) add.push(dat, !!f);\n                else this.k[+(f == 2)].push(dat);\n            }\n            if (f & 2) return this.push(buf.subarray(i), final);\n            this.p = buf.subarray(i);\n        }\n        if (final) {\n            if (this.c) $176622c6c12b4bff$var$err(13);\n            this.p = null;\n        }\n    };\n    /**\n     * Registers a decoder with the stream, allowing for files compressed with\n     * the compression type provided to be expanded correctly\n     * @param decoder The decoder constructor\n     */ Unzip.prototype.register = function(decoder) {\n        this.o[decoder.compression] = decoder;\n    };\n    return Unzip;\n}();\nvar $176622c6c12b4bff$var$mt = typeof queueMicrotask == 'function' ? queueMicrotask : typeof setTimeout == 'function' ? setTimeout : function(fn) {\n    fn();\n};\nfunction $176622c6c12b4bff$export$23c8d3f8757cab88(data, opts, cb) {\n    if (!cb) cb = opts, opts = {};\n    if (typeof cb != 'function') $176622c6c12b4bff$var$err(7);\n    var term = [];\n    var tAll = function() {\n        for(var i = 0; i < term.length; ++i)term[i]();\n    };\n    var files = {};\n    var cbd = function(a, b) {\n        $176622c6c12b4bff$var$mt(function() {\n            cb(a, b);\n        });\n    };\n    $176622c6c12b4bff$var$mt(function() {\n        cbd = cb;\n    });\n    var e = data.length - 22;\n    for(; $176622c6c12b4bff$var$b4(data, e) != 0x6054B50; --e)if (!e || data.length - e > 65558) {\n        cbd($176622c6c12b4bff$var$err(13, 0, 1), null);\n        return tAll;\n    }\n    var lft = $176622c6c12b4bff$var$b2(data, e + 8);\n    if (lft) {\n        var c = lft;\n        var o = $176622c6c12b4bff$var$b4(data, e + 16);\n        var z = o == 4294967295 || c == 65535;\n        if (z) {\n            var ze = $176622c6c12b4bff$var$b4(data, e - 12);\n            z = $176622c6c12b4bff$var$b4(data, ze) == 0x6064B50;\n            if (z) {\n                c = lft = $176622c6c12b4bff$var$b4(data, ze + 32);\n                o = $176622c6c12b4bff$var$b4(data, ze + 48);\n            }\n        }\n        var fltr = opts && opts.filter;\n        var _loop_3 = function(i) {\n            var _a = $176622c6c12b4bff$var$zh(data, o, z), c_1 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = $176622c6c12b4bff$var$slzh(data, off);\n            o = no;\n            var cbl = function(e, d) {\n                if (e) {\n                    tAll();\n                    cbd(e, null);\n                } else {\n                    if (d) files[fn] = d;\n                    if (!--lft) cbd(null, files);\n                }\n            };\n            if (!fltr || fltr({\n                name: fn,\n                size: sc,\n                originalSize: su,\n                compression: c_1\n            })) {\n                if (!c_1) cbl(null, $176622c6c12b4bff$var$slc(data, b, b + sc));\n                else if (c_1 == 8) {\n                    var infl = data.subarray(b, b + sc);\n                    // Synchronously decompress under 512KB, or barely-compressed data\n                    if (su < 524288 || sc > 0.8 * su) try {\n                        cbl(null, $176622c6c12b4bff$export$90366d8b308ba94a(infl, {\n                            out: new $176622c6c12b4bff$var$u8(su)\n                        }));\n                    } catch (e) {\n                        cbl(e, null);\n                    }\n                    else term.push($176622c6c12b4bff$export$cae1ce83fe4a1782(infl, {\n                        size: su\n                    }, cbl));\n                } else cbl($176622c6c12b4bff$var$err(14, 'unknown compression type ' + c_1, 1), null);\n            } else cbl(null, null);\n        };\n        for(var i = 0; i < c; ++i)_loop_3(i);\n    } else cbd(null, {});\n    return tAll;\n}\nfunction $176622c6c12b4bff$export$c757709326bb5901(data, opts) {\n    var files = {};\n    var e = data.length - 22;\n    for(; $176622c6c12b4bff$var$b4(data, e) != 0x6054B50; --e)if (!e || data.length - e > 65558) $176622c6c12b4bff$var$err(13);\n    var c = $176622c6c12b4bff$var$b2(data, e + 8);\n    if (!c) return {};\n    var o = $176622c6c12b4bff$var$b4(data, e + 16);\n    var z = o == 4294967295 || c == 65535;\n    if (z) {\n        var ze = $176622c6c12b4bff$var$b4(data, e - 12);\n        z = $176622c6c12b4bff$var$b4(data, ze) == 0x6064B50;\n        if (z) {\n            c = $176622c6c12b4bff$var$b4(data, ze + 32);\n            o = $176622c6c12b4bff$var$b4(data, ze + 48);\n        }\n    }\n    var fltr = opts && opts.filter;\n    for(var i = 0; i < c; ++i){\n        var _a = $176622c6c12b4bff$var$zh(data, o, z), c_2 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = $176622c6c12b4bff$var$slzh(data, off);\n        o = no;\n        if (!fltr || fltr({\n            name: fn,\n            size: sc,\n            originalSize: su,\n            compression: c_2\n        })) {\n            if (!c_2) files[fn] = $176622c6c12b4bff$var$slc(data, b, b + sc);\n            else if (c_2 == 8) files[fn] = $176622c6c12b4bff$export$90366d8b308ba94a(data.subarray(b, b + sc), {\n                out: new $176622c6c12b4bff$var$u8(su)\n            });\n            else $176622c6c12b4bff$var$err(14, 'unknown compression type ' + c_2);\n        }\n    }\n    return files;\n}\n\n});\n\n})();\n//# sourceMappingURL=browser.c81f129f.js.map\n","// DEFLATE is a complex format; to read this code, you should probably check the RFC first:\n// https://tools.ietf.org/html/rfc1951\n// You may also wish to take a look at the guide I made about this program:\n// https://gist.github.com/101arrowz/253f31eb5abc3d9275ab943003ffecad\n// Some of the following code is similar to that of UZIP.js:\n// https://github.com/photopea/UZIP.js\n// However, the vast majority of the codebase has diverged from UZIP.js to increase performance and reduce bundle size.\n// Sometimes 0 will appear where -1 would be more appropriate. This is because using a uint\n// is better for memory in most engines (I *think*).\nvar ch2 = {};\nvar wk = (function (c, id, msg, transfer, cb) {\n    var w = new Worker(ch2[id] || (ch2[id] = URL.createObjectURL(new Blob([\n        c + ';addEventListener(\"error\",function(e){e=e.error;postMessage({$e$:[e.message,e.code,e.stack]})})'\n    ], { type: 'text/javascript' }))));\n    w.onmessage = function (e) {\n        var d = e.data, ed = d.$e$;\n        if (ed) {\n            var err = new Error(ed[0]);\n            err['code'] = ed[1];\n            err.stack = ed[2];\n            cb(err, null);\n        }\n        else\n            cb(null, d);\n    };\n    w.postMessage(msg, transfer);\n    return w;\n});\n\n// aliases for shorter compressed code (most minifers don't do this)\nvar u8 = Uint8Array, u16 = Uint16Array, i32 = Int32Array;\n// fixed length extra bits\nvar fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, /* unused */ 0, 0, /* impossible */ 0]);\n// fixed distance extra bits\nvar fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, /* unused */ 0, 0]);\n// code length index map\nvar clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\n// get base, reverse index map from extra bits\nvar freb = function (eb, start) {\n    var b = new u16(31);\n    for (var i = 0; i < 31; ++i) {\n        b[i] = start += 1 << eb[i - 1];\n    }\n    // numbers here are at max 18 bits\n    var r = new i32(b[30]);\n    for (var i = 1; i < 30; ++i) {\n        for (var j = b[i]; j < b[i + 1]; ++j) {\n            r[j] = ((j - b[i]) << 5) | i;\n        }\n    }\n    return { b: b, r: r };\n};\nvar _a = freb(fleb, 2), fl = _a.b, revfl = _a.r;\n// we can ignore the fact that the other numbers are wrong; they never happen anyway\nfl[28] = 258, revfl[258] = 28;\nvar _b = freb(fdeb, 0), fd = _b.b, revfd = _b.r;\n// map of value to reverse (assuming 16 bits)\nvar rev = new u16(32768);\nfor (var i = 0; i < 32768; ++i) {\n    // reverse table algorithm from SO\n    var x = ((i & 0xAAAA) >> 1) | ((i & 0x5555) << 1);\n    x = ((x & 0xCCCC) >> 2) | ((x & 0x3333) << 2);\n    x = ((x & 0xF0F0) >> 4) | ((x & 0x0F0F) << 4);\n    rev[i] = (((x & 0xFF00) >> 8) | ((x & 0x00FF) << 8)) >> 1;\n}\n// create huffman tree from u8 \"map\": index -> code length for code index\n// mb (max bits) must be at most 15\n// TODO: optimize/split up?\nvar hMap = (function (cd, mb, r) {\n    var s = cd.length;\n    // index\n    var i = 0;\n    // u16 \"map\": index -> # of codes with bit length = index\n    var l = new u16(mb);\n    // length of cd must be 288 (total # of codes)\n    for (; i < s; ++i) {\n        if (cd[i])\n            ++l[cd[i] - 1];\n    }\n    // u16 \"map\": index -> minimum code for bit length = index\n    var le = new u16(mb);\n    for (i = 1; i < mb; ++i) {\n        le[i] = (le[i - 1] + l[i - 1]) << 1;\n    }\n    var co;\n    if (r) {\n        // u16 \"map\": index -> number of actual bits, symbol for code\n        co = new u16(1 << mb);\n        // bits to remove for reverser\n        var rvb = 15 - mb;\n        for (i = 0; i < s; ++i) {\n            // ignore 0 lengths\n            if (cd[i]) {\n                // num encoding both symbol and bits read\n                var sv = (i << 4) | cd[i];\n                // free bits\n                var r_1 = mb - cd[i];\n                // start value\n                var v = le[cd[i] - 1]++ << r_1;\n                // m is end value\n                for (var m = v | ((1 << r_1) - 1); v <= m; ++v) {\n                    // every 16 bit value starting with the code yields the same result\n                    co[rev[v] >> rvb] = sv;\n                }\n            }\n        }\n    }\n    else {\n        co = new u16(s);\n        for (i = 0; i < s; ++i) {\n            if (cd[i]) {\n                co[i] = rev[le[cd[i] - 1]++] >> (15 - cd[i]);\n            }\n        }\n    }\n    return co;\n});\n// fixed length tree\nvar flt = new u8(288);\nfor (var i = 0; i < 144; ++i)\n    flt[i] = 8;\nfor (var i = 144; i < 256; ++i)\n    flt[i] = 9;\nfor (var i = 256; i < 280; ++i)\n    flt[i] = 7;\nfor (var i = 280; i < 288; ++i)\n    flt[i] = 8;\n// fixed distance tree\nvar fdt = new u8(32);\nfor (var i = 0; i < 32; ++i)\n    fdt[i] = 5;\n// fixed length map\nvar flm = /*#__PURE__*/ hMap(flt, 9, 0), flrm = /*#__PURE__*/ hMap(flt, 9, 1);\n// fixed distance map\nvar fdm = /*#__PURE__*/ hMap(fdt, 5, 0), fdrm = /*#__PURE__*/ hMap(fdt, 5, 1);\n// find max of array\nvar max = function (a) {\n    var m = a[0];\n    for (var i = 1; i < a.length; ++i) {\n        if (a[i] > m)\n            m = a[i];\n    }\n    return m;\n};\n// read d, starting at bit p and mask with m\nvar bits = function (d, p, m) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8)) >> (p & 7)) & m;\n};\n// read d, starting at bit p continuing for at least 16 bits\nvar bits16 = function (d, p) {\n    var o = (p / 8) | 0;\n    return ((d[o] | (d[o + 1] << 8) | (d[o + 2] << 16)) >> (p & 7));\n};\n// get end of byte\nvar shft = function (p) { return ((p + 7) / 8) | 0; };\n// typed array slice - allows garbage collector to free original reference,\n// while being more compatible than .slice\nvar slc = function (v, s, e) {\n    if (s == null || s < 0)\n        s = 0;\n    if (e == null || e > v.length)\n        e = v.length;\n    // can't use .constructor in case user-supplied\n    return new u8(v.subarray(s, e));\n};\n/**\n * Codes for errors generated within this library\n */\nexport var FlateErrorCode = {\n    UnexpectedEOF: 0,\n    InvalidBlockType: 1,\n    InvalidLengthLiteral: 2,\n    InvalidDistance: 3,\n    StreamFinished: 4,\n    NoStreamHandler: 5,\n    InvalidHeader: 6,\n    NoCallback: 7,\n    InvalidUTF8: 8,\n    ExtraFieldTooLong: 9,\n    InvalidDate: 10,\n    FilenameTooLong: 11,\n    StreamFinishing: 12,\n    InvalidZipData: 13,\n    UnknownCompressionMethod: 14\n};\n// error codes\nvar ec = [\n    'unexpected EOF',\n    'invalid block type',\n    'invalid length/literal',\n    'invalid distance',\n    'stream finished',\n    'no stream handler',\n    ,\n    'no callback',\n    'invalid UTF-8 data',\n    'extra field too long',\n    'date not in range 1980-2099',\n    'filename too long',\n    'stream finishing',\n    'invalid zip data'\n    // determined by unknown compression method\n];\n;\nvar err = function (ind, msg, nt) {\n    var e = new Error(msg || ec[ind]);\n    e.code = ind;\n    if (Error.captureStackTrace)\n        Error.captureStackTrace(e, err);\n    if (!nt)\n        throw e;\n    return e;\n};\n// expands raw DEFLATE data\nvar inflt = function (dat, st, buf, dict) {\n    // source length       dict length\n    var sl = dat.length, dl = dict ? dict.length : 0;\n    if (!sl || st.f && !st.l)\n        return buf || new u8(0);\n    var noBuf = !buf;\n    // have to estimate size\n    var resize = noBuf || st.i != 2;\n    // no state\n    var noSt = st.i;\n    // Assumes roughly 33% compression ratio average\n    if (noBuf)\n        buf = new u8(sl * 3);\n    // ensure buffer can fit at least l elements\n    var cbuf = function (l) {\n        var bl = buf.length;\n        // need to increase size to fit\n        if (l > bl) {\n            // Double or set to necessary, whichever is greater\n            var nbuf = new u8(Math.max(bl * 2, l));\n            nbuf.set(buf);\n            buf = nbuf;\n        }\n    };\n    //  last chunk         bitpos           bytes\n    var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;\n    // total bits\n    var tbts = sl * 8;\n    do {\n        if (!lm) {\n            // BFINAL - this is only 1 when last chunk is next\n            final = bits(dat, pos, 1);\n            // type: 0 = no compression, 1 = fixed huffman, 2 = dynamic huffman\n            var type = bits(dat, pos + 1, 3);\n            pos += 3;\n            if (!type) {\n                // go to end of byte boundary\n                var s = shft(pos) + 4, l = dat[s - 4] | (dat[s - 3] << 8), t = s + l;\n                if (t > sl) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                // ensure size\n                if (resize)\n                    cbuf(bt + l);\n                // Copy over uncompressed data\n                buf.set(dat.subarray(s, t), bt);\n                // Get new bitpos, update byte count\n                st.b = bt += l, st.p = pos = t * 8, st.f = final;\n                continue;\n            }\n            else if (type == 1)\n                lm = flrm, dm = fdrm, lbt = 9, dbt = 5;\n            else if (type == 2) {\n                //  literal                            lengths\n                var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;\n                var tl = hLit + bits(dat, pos + 5, 31) + 1;\n                pos += 14;\n                // length+distance tree\n                var ldt = new u8(tl);\n                // code length tree\n                var clt = new u8(19);\n                for (var i = 0; i < hcLen; ++i) {\n                    // use index map to get real code\n                    clt[clim[i]] = bits(dat, pos + i * 3, 7);\n                }\n                pos += hcLen * 3;\n                // code lengths bits\n                var clb = max(clt), clbmsk = (1 << clb) - 1;\n                // code lengths map\n                var clm = hMap(clt, clb, 1);\n                for (var i = 0; i < tl;) {\n                    var r = clm[bits(dat, pos, clbmsk)];\n                    // bits read\n                    pos += r & 15;\n                    // symbol\n                    var s = r >> 4;\n                    // code length to copy\n                    if (s < 16) {\n                        ldt[i++] = s;\n                    }\n                    else {\n                        //  copy   count\n                        var c = 0, n = 0;\n                        if (s == 16)\n                            n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];\n                        else if (s == 17)\n                            n = 3 + bits(dat, pos, 7), pos += 3;\n                        else if (s == 18)\n                            n = 11 + bits(dat, pos, 127), pos += 7;\n                        while (n--)\n                            ldt[i++] = c;\n                    }\n                }\n                //    length tree                 distance tree\n                var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);\n                // max length bits\n                lbt = max(lt);\n                // max dist bits\n                dbt = max(dt);\n                lm = hMap(lt, lbt, 1);\n                dm = hMap(dt, dbt, 1);\n            }\n            else\n                err(1);\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n        }\n        // Make sure the buffer can hold this + the largest possible addition\n        // Maximum chunk size (practically, theoretically infinite) is 2^17\n        if (resize)\n            cbuf(bt + 131072);\n        var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;\n        var lpos = pos;\n        for (;; lpos = pos) {\n            // bits read, code\n            var c = lm[bits16(dat, pos) & lms], sym = c >> 4;\n            pos += c & 15;\n            if (pos > tbts) {\n                if (noSt)\n                    err(0);\n                break;\n            }\n            if (!c)\n                err(2);\n            if (sym < 256)\n                buf[bt++] = sym;\n            else if (sym == 256) {\n                lpos = pos, lm = null;\n                break;\n            }\n            else {\n                var add = sym - 254;\n                // no extra bits needed if less\n                if (sym > 264) {\n                    // index\n                    var i = sym - 257, b = fleb[i];\n                    add = bits(dat, pos, (1 << b) - 1) + fl[i];\n                    pos += b;\n                }\n                // dist\n                var d = dm[bits16(dat, pos) & dms], dsym = d >> 4;\n                if (!d)\n                    err(3);\n                pos += d & 15;\n                var dt = fd[dsym];\n                if (dsym > 3) {\n                    var b = fdeb[dsym];\n                    dt += bits16(dat, pos) & (1 << b) - 1, pos += b;\n                }\n                if (pos > tbts) {\n                    if (noSt)\n                        err(0);\n                    break;\n                }\n                if (resize)\n                    cbuf(bt + 131072);\n                var end = bt + add;\n                if (bt < dt) {\n                    var shift = dl - dt, dend = Math.min(dt, end);\n                    if (shift + bt < 0)\n                        err(3);\n                    for (; bt < dend; ++bt)\n                        buf[bt] = dict[shift + bt];\n                }\n                for (; bt < end; ++bt)\n                    buf[bt] = buf[bt - dt];\n            }\n        }\n        st.l = lm, st.p = lpos, st.b = bt, st.f = final;\n        if (lm)\n            final = 1, st.m = lbt, st.d = dm, st.n = dbt;\n    } while (!final);\n    // don't reallocate for streams or user buffers\n    return bt != buf.length && noBuf ? slc(buf, 0, bt) : buf.subarray(0, bt);\n};\n// starting at p, write the minimum number of bits that can hold v to d\nvar wbits = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >> 8;\n};\n// starting at p, write the minimum number of bits (>8) that can hold v to d\nvar wbits16 = function (d, p, v) {\n    v <<= p & 7;\n    var o = (p / 8) | 0;\n    d[o] |= v;\n    d[o + 1] |= v >> 8;\n    d[o + 2] |= v >> 16;\n};\n// creates code lengths from a frequency table\nvar hTree = function (d, mb) {\n    // Need extra info to make a tree\n    var t = [];\n    for (var i = 0; i < d.length; ++i) {\n        if (d[i])\n            t.push({ s: i, f: d[i] });\n    }\n    var s = t.length;\n    var t2 = t.slice();\n    if (!s)\n        return { t: et, l: 0 };\n    if (s == 1) {\n        var v = new u8(t[0].s + 1);\n        v[t[0].s] = 1;\n        return { t: v, l: 1 };\n    }\n    t.sort(function (a, b) { return a.f - b.f; });\n    // after i2 reaches last ind, will be stopped\n    // freq must be greater than largest possible number of symbols\n    t.push({ s: -1, f: 25001 });\n    var l = t[0], r = t[1], i0 = 0, i1 = 1, i2 = 2;\n    t[0] = { s: -1, f: l.f + r.f, l: l, r: r };\n    // efficient algorithm from UZIP.js\n    // i0 is lookbehind, i2 is lookahead - after processing two low-freq\n    // symbols that combined have high freq, will start processing i2 (high-freq,\n    // non-composite) symbols instead\n    // see https://reddit.com/r/photopea/comments/ikekht/uzipjs_questions/\n    while (i1 != s - 1) {\n        l = t[t[i0].f < t[i2].f ? i0++ : i2++];\n        r = t[i0 != i1 && t[i0].f < t[i2].f ? i0++ : i2++];\n        t[i1++] = { s: -1, f: l.f + r.f, l: l, r: r };\n    }\n    var maxSym = t2[0].s;\n    for (var i = 1; i < s; ++i) {\n        if (t2[i].s > maxSym)\n            maxSym = t2[i].s;\n    }\n    // code lengths\n    var tr = new u16(maxSym + 1);\n    // max bits in tree\n    var mbt = ln(t[i1 - 1], tr, 0);\n    if (mbt > mb) {\n        // more algorithms from UZIP.js\n        // TODO: find out how this code works (debt)\n        //  ind    debt\n        var i = 0, dt = 0;\n        //    left            cost\n        var lft = mbt - mb, cst = 1 << lft;\n        t2.sort(function (a, b) { return tr[b.s] - tr[a.s] || a.f - b.f; });\n        for (; i < s; ++i) {\n            var i2_1 = t2[i].s;\n            if (tr[i2_1] > mb) {\n                dt += cst - (1 << (mbt - tr[i2_1]));\n                tr[i2_1] = mb;\n            }\n            else\n                break;\n        }\n        dt >>= lft;\n        while (dt > 0) {\n            var i2_2 = t2[i].s;\n            if (tr[i2_2] < mb)\n                dt -= 1 << (mb - tr[i2_2]++ - 1);\n            else\n                ++i;\n        }\n        for (; i >= 0 && dt; --i) {\n            var i2_3 = t2[i].s;\n            if (tr[i2_3] == mb) {\n                --tr[i2_3];\n                ++dt;\n            }\n        }\n        mbt = mb;\n    }\n    return { t: new u8(tr), l: mbt };\n};\n// get the max length and assign length codes\nvar ln = function (n, l, d) {\n    return n.s == -1\n        ? Math.max(ln(n.l, l, d + 1), ln(n.r, l, d + 1))\n        : (l[n.s] = d);\n};\n// length codes generation\nvar lc = function (c) {\n    var s = c.length;\n    // Note that the semicolon was intentional\n    while (s && !c[--s])\n        ;\n    var cl = new u16(++s);\n    //  ind      num         streak\n    var cli = 0, cln = c[0], cls = 1;\n    var w = function (v) { cl[cli++] = v; };\n    for (var i = 1; i <= s; ++i) {\n        if (c[i] == cln && i != s)\n            ++cls;\n        else {\n            if (!cln && cls > 2) {\n                for (; cls > 138; cls -= 138)\n                    w(32754);\n                if (cls > 2) {\n                    w(cls > 10 ? ((cls - 11) << 5) | 28690 : ((cls - 3) << 5) | 12305);\n                    cls = 0;\n                }\n            }\n            else if (cls > 3) {\n                w(cln), --cls;\n                for (; cls > 6; cls -= 6)\n                    w(8304);\n                if (cls > 2)\n                    w(((cls - 3) << 5) | 8208), cls = 0;\n            }\n            while (cls--)\n                w(cln);\n            cls = 1;\n            cln = c[i];\n        }\n    }\n    return { c: cl.subarray(0, cli), n: s };\n};\n// calculate the length of output from tree, code lengths\nvar clen = function (cf, cl) {\n    var l = 0;\n    for (var i = 0; i < cl.length; ++i)\n        l += cf[i] * cl[i];\n    return l;\n};\n// writes a fixed block\n// returns the new bit pos\nvar wfblk = function (out, pos, dat) {\n    // no need to write 00 as type: TypedArray defaults to 0\n    var s = dat.length;\n    var o = shft(pos + 2);\n    out[o] = s & 255;\n    out[o + 1] = s >> 8;\n    out[o + 2] = out[o] ^ 255;\n    out[o + 3] = out[o + 1] ^ 255;\n    for (var i = 0; i < s; ++i)\n        out[o + i + 4] = dat[i];\n    return (o + 4 + s) * 8;\n};\n// writes a block\nvar wblk = function (dat, out, final, syms, lf, df, eb, li, bs, bl, p) {\n    wbits(out, p++, final);\n    ++lf[256];\n    var _a = hTree(lf, 15), dlt = _a.t, mlb = _a.l;\n    var _b = hTree(df, 15), ddt = _b.t, mdb = _b.l;\n    var _c = lc(dlt), lclt = _c.c, nlc = _c.n;\n    var _d = lc(ddt), lcdt = _d.c, ndc = _d.n;\n    var lcfreq = new u16(19);\n    for (var i = 0; i < lclt.length; ++i)\n        ++lcfreq[lclt[i] & 31];\n    for (var i = 0; i < lcdt.length; ++i)\n        ++lcfreq[lcdt[i] & 31];\n    var _e = hTree(lcfreq, 7), lct = _e.t, mlcb = _e.l;\n    var nlcc = 19;\n    for (; nlcc > 4 && !lct[clim[nlcc - 1]]; --nlcc)\n        ;\n    var flen = (bl + 5) << 3;\n    var ftlen = clen(lf, flt) + clen(df, fdt) + eb;\n    var dtlen = clen(lf, dlt) + clen(df, ddt) + eb + 14 + 3 * nlcc + clen(lcfreq, lct) + 2 * lcfreq[16] + 3 * lcfreq[17] + 7 * lcfreq[18];\n    if (bs >= 0 && flen <= ftlen && flen <= dtlen)\n        return wfblk(out, p, dat.subarray(bs, bs + bl));\n    var lm, ll, dm, dl;\n    wbits(out, p, 1 + (dtlen < ftlen)), p += 2;\n    if (dtlen < ftlen) {\n        lm = hMap(dlt, mlb, 0), ll = dlt, dm = hMap(ddt, mdb, 0), dl = ddt;\n        var llm = hMap(lct, mlcb, 0);\n        wbits(out, p, nlc - 257);\n        wbits(out, p + 5, ndc - 1);\n        wbits(out, p + 10, nlcc - 4);\n        p += 14;\n        for (var i = 0; i < nlcc; ++i)\n            wbits(out, p + 3 * i, lct[clim[i]]);\n        p += 3 * nlcc;\n        var lcts = [lclt, lcdt];\n        for (var it = 0; it < 2; ++it) {\n            var clct = lcts[it];\n            for (var i = 0; i < clct.length; ++i) {\n                var len = clct[i] & 31;\n                wbits(out, p, llm[len]), p += lct[len];\n                if (len > 15)\n                    wbits(out, p, (clct[i] >> 5) & 127), p += clct[i] >> 12;\n            }\n        }\n    }\n    else {\n        lm = flm, ll = flt, dm = fdm, dl = fdt;\n    }\n    for (var i = 0; i < li; ++i) {\n        var sym = syms[i];\n        if (sym > 255) {\n            var len = (sym >> 18) & 31;\n            wbits16(out, p, lm[len + 257]), p += ll[len + 257];\n            if (len > 7)\n                wbits(out, p, (sym >> 23) & 31), p += fleb[len];\n            var dst = sym & 31;\n            wbits16(out, p, dm[dst]), p += dl[dst];\n            if (dst > 3)\n                wbits16(out, p, (sym >> 5) & 8191), p += fdeb[dst];\n        }\n        else {\n            wbits16(out, p, lm[sym]), p += ll[sym];\n        }\n    }\n    wbits16(out, p, lm[256]);\n    return p + ll[256];\n};\n// deflate options (nice << 13) | chain\nvar deo = /*#__PURE__*/ new i32([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]);\n// empty\nvar et = /*#__PURE__*/ new u8(0);\n// compresses data into a raw DEFLATE buffer\nvar dflt = function (dat, lvl, plvl, pre, post, st) {\n    var s = st.z || dat.length;\n    var o = new u8(pre + s + 5 * (1 + Math.ceil(s / 7000)) + post);\n    // writing to this writes to the output buffer\n    var w = o.subarray(pre, o.length - post);\n    var lst = st.l;\n    var pos = (st.r || 0) & 7;\n    if (lvl) {\n        if (pos)\n            w[0] = st.r >> 3;\n        var opt = deo[lvl - 1];\n        var n = opt >> 13, c = opt & 8191;\n        var msk_1 = (1 << plvl) - 1;\n        //    prev 2-byte val map    curr 2-byte val map\n        var prev = st.p || new u16(32768), head = st.h || new u16(msk_1 + 1);\n        var bs1_1 = Math.ceil(plvl / 3), bs2_1 = 2 * bs1_1;\n        var hsh = function (i) { return (dat[i] ^ (dat[i + 1] << bs1_1) ^ (dat[i + 2] << bs2_1)) & msk_1; };\n        // 24576 is an arbitrary number of maximum symbols per block\n        // 424 buffer for last block\n        var syms = new i32(25000);\n        // length/literal freq   distance freq\n        var lf = new u16(288), df = new u16(32);\n        //  l/lcnt  exbits  index          l/lind  waitdx          blkpos\n        var lc_1 = 0, eb = 0, i = st.i || 0, li = 0, wi = st.w || 0, bs = 0;\n        for (; i + 2 < s; ++i) {\n            // hash value\n            var hv = hsh(i);\n            // index mod 32768    previous index mod\n            var imod = i & 32767, pimod = head[hv];\n            prev[imod] = pimod;\n            head[hv] = imod;\n            // We always should modify head and prev, but only add symbols if\n            // this data is not yet processed (\"wait\" for wait index)\n            if (wi <= i) {\n                // bytes remaining\n                var rem = s - i;\n                if ((lc_1 > 7000 || li > 24576) && (rem > 423 || !lst)) {\n                    pos = wblk(dat, w, 0, syms, lf, df, eb, li, bs, i - bs, pos);\n                    li = lc_1 = eb = 0, bs = i;\n                    for (var j = 0; j < 286; ++j)\n                        lf[j] = 0;\n                    for (var j = 0; j < 30; ++j)\n                        df[j] = 0;\n                }\n                //  len    dist   chain\n                var l = 2, d = 0, ch_1 = c, dif = imod - pimod & 32767;\n                if (rem > 2 && hv == hsh(i - dif)) {\n                    var maxn = Math.min(n, rem) - 1;\n                    var maxd = Math.min(32767, i);\n                    // max possible length\n                    // not capped at dif because decompressors implement \"rolling\" index population\n                    var ml = Math.min(258, rem);\n                    while (dif <= maxd && --ch_1 && imod != pimod) {\n                        if (dat[i + l] == dat[i + l - dif]) {\n                            var nl = 0;\n                            for (; nl < ml && dat[i + nl] == dat[i + nl - dif]; ++nl)\n                                ;\n                            if (nl > l) {\n                                l = nl, d = dif;\n                                // break out early when we reach \"nice\" (we are satisfied enough)\n                                if (nl > maxn)\n                                    break;\n                                // now, find the rarest 2-byte sequence within this\n                                // length of literals and search for that instead.\n                                // Much faster than just using the start\n                                var mmd = Math.min(dif, nl - 2);\n                                var md = 0;\n                                for (var j = 0; j < mmd; ++j) {\n                                    var ti = i - dif + j & 32767;\n                                    var pti = prev[ti];\n                                    var cd = ti - pti & 32767;\n                                    if (cd > md)\n                                        md = cd, pimod = ti;\n                                }\n                            }\n                        }\n                        // check the previous match\n                        imod = pimod, pimod = prev[imod];\n                        dif += imod - pimod & 32767;\n                    }\n                }\n                // d will be nonzero only when a match was found\n                if (d) {\n                    // store both dist and len data in one int32\n                    // Make sure this is recognized as a len/dist with 28th bit (2^28)\n                    syms[li++] = 268435456 | (revfl[l] << 18) | revfd[d];\n                    var lin = revfl[l] & 31, din = revfd[d] & 31;\n                    eb += fleb[lin] + fdeb[din];\n                    ++lf[257 + lin];\n                    ++df[din];\n                    wi = i + l;\n                    ++lc_1;\n                }\n                else {\n                    syms[li++] = dat[i];\n                    ++lf[dat[i]];\n                }\n            }\n        }\n        for (i = Math.max(i, wi); i < s; ++i) {\n            syms[li++] = dat[i];\n            ++lf[dat[i]];\n        }\n        pos = wblk(dat, w, lst, syms, lf, df, eb, li, bs, i - bs, pos);\n        if (!lst) {\n            st.r = (pos & 7) | w[(pos / 8) | 0] << 3;\n            // shft(pos) now 1 less if pos & 7 != 0\n            pos -= 7;\n            st.h = head, st.p = prev, st.i = i, st.w = wi;\n        }\n    }\n    else {\n        for (var i = st.w || 0; i < s + lst; i += 65535) {\n            // end\n            var e = i + 65535;\n            if (e >= s) {\n                // write final block\n                w[(pos / 8) | 0] = lst;\n                e = s;\n            }\n            pos = wfblk(w, pos + 1, dat.subarray(i, e));\n        }\n        st.i = s;\n    }\n    return slc(o, 0, pre + shft(pos) + post);\n};\n// CRC32 table\nvar crct = /*#__PURE__*/ (function () {\n    var t = new Int32Array(256);\n    for (var i = 0; i < 256; ++i) {\n        var c = i, k = 9;\n        while (--k)\n            c = ((c & 1) && -306674912) ^ (c >>> 1);\n        t[i] = c;\n    }\n    return t;\n})();\n// CRC32\nvar crc = function () {\n    var c = -1;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var cr = c;\n            for (var i = 0; i < d.length; ++i)\n                cr = crct[(cr & 255) ^ d[i]] ^ (cr >>> 8);\n            c = cr;\n        },\n        d: function () { return ~c; }\n    };\n};\n// Adler32\nvar adler = function () {\n    var a = 1, b = 0;\n    return {\n        p: function (d) {\n            // closures have awful performance\n            var n = a, m = b;\n            var l = d.length | 0;\n            for (var i = 0; i != l;) {\n                var e = Math.min(i + 2655, l);\n                for (; i < e; ++i)\n                    m += n += d[i];\n                n = (n & 65535) + 15 * (n >> 16), m = (m & 65535) + 15 * (m >> 16);\n            }\n            a = n, b = m;\n        },\n        d: function () {\n            a %= 65521, b %= 65521;\n            return (a & 255) << 24 | (a & 0xFF00) << 8 | (b & 255) << 8 | (b >> 8);\n        }\n    };\n};\n;\n// deflate with opts\nvar dopt = function (dat, opt, pre, post, st) {\n    if (!st) {\n        st = { l: 1 };\n        if (opt.dictionary) {\n            var dict = opt.dictionary.subarray(-32768);\n            var newDat = new u8(dict.length + dat.length);\n            newDat.set(dict);\n            newDat.set(dat, dict.length);\n            dat = newDat;\n            st.w = dict.length;\n        }\n    }\n    return dflt(dat, opt.level == null ? 6 : opt.level, opt.mem == null ? (st.l ? Math.ceil(Math.max(8, Math.min(13, Math.log(dat.length))) * 1.5) : 20) : (12 + opt.mem), pre, post, st);\n};\n// Walmart object spread\nvar mrg = function (a, b) {\n    var o = {};\n    for (var k in a)\n        o[k] = a[k];\n    for (var k in b)\n        o[k] = b[k];\n    return o;\n};\n// worker clone\n// This is possibly the craziest part of the entire codebase, despite how simple it may seem.\n// The only parameter to this function is a closure that returns an array of variables outside of the function scope.\n// We're going to try to figure out the variable names used in the closure as strings because that is crucial for workerization.\n// We will return an object mapping of true variable name to value (basically, the current scope as a JS object).\n// The reason we can't just use the original variable names is minifiers mangling the toplevel scope.\n// This took me three weeks to figure out how to do.\nvar wcln = function (fn, fnStr, td) {\n    var dt = fn();\n    var st = fn.toString();\n    var ks = st.slice(st.indexOf('[') + 1, st.lastIndexOf(']')).replace(/\\s+/g, '').split(',');\n    for (var i = 0; i < dt.length; ++i) {\n        var v = dt[i], k = ks[i];\n        if (typeof v == 'function') {\n            fnStr += ';' + k + '=';\n            var st_1 = v.toString();\n            if (v.prototype) {\n                // for global objects\n                if (st_1.indexOf('[native code]') != -1) {\n                    var spInd = st_1.indexOf(' ', 8) + 1;\n                    fnStr += st_1.slice(spInd, st_1.indexOf('(', spInd));\n                }\n                else {\n                    fnStr += st_1;\n                    for (var t in v.prototype)\n                        fnStr += ';' + k + '.prototype.' + t + '=' + v.prototype[t].toString();\n                }\n            }\n            else\n                fnStr += st_1;\n        }\n        else\n            td[k] = v;\n    }\n    return fnStr;\n};\nvar ch = [];\n// clone bufs\nvar cbfs = function (v) {\n    var tl = [];\n    for (var k in v) {\n        if (v[k].buffer) {\n            tl.push((v[k] = new v[k].constructor(v[k])).buffer);\n        }\n    }\n    return tl;\n};\n// use a worker to execute code\nvar wrkr = function (fns, init, id, cb) {\n    if (!ch[id]) {\n        var fnStr = '', td_1 = {}, m = fns.length - 1;\n        for (var i = 0; i < m; ++i)\n            fnStr = wcln(fns[i], fnStr, td_1);\n        ch[id] = { c: wcln(fns[m], fnStr, td_1), e: td_1 };\n    }\n    var td = mrg({}, ch[id].e);\n    return wk(ch[id].c + ';onmessage=function(e){for(var k in e.data)self[k]=e.data[k];onmessage=' + init.toString() + '}', id, td, cbfs(td), cb);\n};\n// base async inflate fn\nvar bInflt = function () { return [u8, u16, i32, fleb, fdeb, clim, fl, fd, flrm, fdrm, rev, ec, hMap, max, bits, bits16, shft, slc, err, inflt, inflateSync, pbf, gopt]; };\nvar bDflt = function () { return [u8, u16, i32, fleb, fdeb, clim, revfl, revfd, flm, flt, fdm, fdt, rev, deo, et, hMap, wbits, wbits16, hTree, ln, lc, clen, wfblk, wblk, shft, slc, dflt, dopt, deflateSync, pbf]; };\n// gzip extra\nvar gze = function () { return [gzh, gzhl, wbytes, crc, crct]; };\n// gunzip extra\nvar guze = function () { return [gzs, gzl]; };\n// zlib extra\nvar zle = function () { return [zlh, wbytes, adler]; };\n// unzlib extra\nvar zule = function () { return [zls]; };\n// post buf\nvar pbf = function (msg) { return postMessage(msg, [msg.buffer]); };\n// get opts\nvar gopt = function (o) { return o && {\n    out: o.size && new u8(o.size),\n    dictionary: o.dictionary\n}; };\n// async helper\nvar cbify = function (dat, opts, fns, init, id, cb) {\n    var w = wrkr(fns, init, id, function (err, dat) {\n        w.terminate();\n        cb(err, dat);\n    });\n    w.postMessage([dat, opts], opts.consume ? [dat.buffer] : []);\n    return function () { w.terminate(); };\n};\n// auto stream\nvar astrm = function (strm) {\n    strm.ondata = function (dat, final) { return postMessage([dat, final], [dat.buffer]); };\n    return function (ev) {\n        if (ev.data.length) {\n            strm.push(ev.data[0], ev.data[1]);\n            postMessage([ev.data[0].length]);\n        }\n        else\n            strm.flush();\n    };\n};\n// async stream attach\nvar astrmify = function (fns, strm, opts, init, id, flush, ext) {\n    var t;\n    var w = wrkr(fns, init, id, function (err, dat) {\n        if (err)\n            w.terminate(), strm.ondata.call(strm, err);\n        else if (!Array.isArray(dat))\n            ext(dat);\n        else if (dat.length == 1) {\n            strm.queuedSize -= dat[0];\n            if (strm.ondrain)\n                strm.ondrain(dat[0]);\n        }\n        else {\n            if (dat[1])\n                w.terminate();\n            strm.ondata.call(strm, err, dat[0], dat[1]);\n        }\n    });\n    w.postMessage(opts);\n    strm.queuedSize = 0;\n    strm.push = function (d, f) {\n        if (!strm.ondata)\n            err(5);\n        if (t)\n            strm.ondata(err(4, 0, 1), null, !!f);\n        strm.queuedSize += d.length;\n        w.postMessage([d, t = f], [d.buffer]);\n    };\n    strm.terminate = function () { w.terminate(); };\n    if (flush) {\n        strm.flush = function () { w.postMessage([]); };\n    }\n};\n// read 2 bytes\nvar b2 = function (d, b) { return d[b] | (d[b + 1] << 8); };\n// read 4 bytes\nvar b4 = function (d, b) { return (d[b] | (d[b + 1] << 8) | (d[b + 2] << 16) | (d[b + 3] << 24)) >>> 0; };\nvar b8 = function (d, b) { return b4(d, b) + (b4(d, b + 4) * 4294967296); };\n// write bytes\nvar wbytes = function (d, b, v) {\n    for (; v; ++b)\n        d[b] = v, v >>>= 8;\n};\n// gzip header\nvar gzh = function (c, o) {\n    var fn = o.filename;\n    c[0] = 31, c[1] = 139, c[2] = 8, c[8] = o.level < 2 ? 4 : o.level == 9 ? 2 : 0, c[9] = 3; // assume Unix\n    if (o.mtime != 0)\n        wbytes(c, 4, Math.floor(new Date(o.mtime || Date.now()) / 1000));\n    if (fn) {\n        c[3] = 8;\n        for (var i = 0; i <= fn.length; ++i)\n            c[i + 10] = fn.charCodeAt(i);\n    }\n};\n// gzip footer: -8 to -4 = CRC, -4 to -0 is length\n// gzip start\nvar gzs = function (d) {\n    if (d[0] != 31 || d[1] != 139 || d[2] != 8)\n        err(6, 'invalid gzip data');\n    var flg = d[3];\n    var st = 10;\n    if (flg & 4)\n        st += (d[10] | d[11] << 8) + 2;\n    for (var zs = (flg >> 3 & 1) + (flg >> 4 & 1); zs > 0; zs -= !d[st++])\n        ;\n    return st + (flg & 2);\n};\n// gzip length\nvar gzl = function (d) {\n    var l = d.length;\n    return (d[l - 4] | d[l - 3] << 8 | d[l - 2] << 16 | d[l - 1] << 24) >>> 0;\n};\n// gzip header length\nvar gzhl = function (o) { return 10 + (o.filename ? o.filename.length + 1 : 0); };\n// zlib header\nvar zlh = function (c, o) {\n    var lv = o.level, fl = lv == 0 ? 0 : lv < 6 ? 1 : lv == 9 ? 3 : 2;\n    c[0] = 120, c[1] = (fl << 6) | (o.dictionary && 32);\n    c[1] |= 31 - ((c[0] << 8) | c[1]) % 31;\n    if (o.dictionary) {\n        var h = adler();\n        h.p(o.dictionary);\n        wbytes(c, 2, h.d());\n    }\n};\n// zlib start\nvar zls = function (d, dict) {\n    if ((d[0] & 15) != 8 || (d[0] >> 4) > 7 || ((d[0] << 8 | d[1]) % 31))\n        err(6, 'invalid zlib data');\n    if ((d[1] >> 5 & 1) == +!dict)\n        err(6, 'invalid zlib data: ' + (d[1] & 32 ? 'need' : 'unexpected') + ' dictionary');\n    return (d[1] >> 3 & 4) + 2;\n};\nfunction StrmOpt(opts, cb) {\n    if (typeof opts == 'function')\n        cb = opts, opts = {};\n    this.ondata = cb;\n    return opts;\n}\n/**\n * Streaming DEFLATE compression\n */\nvar Deflate = /*#__PURE__*/ (function () {\n    function Deflate(opts, cb) {\n        if (typeof opts == 'function')\n            cb = opts, opts = {};\n        this.ondata = cb;\n        this.o = opts || {};\n        this.s = { l: 0, i: 32768, w: 32768, z: 32768 };\n        // Buffer length must always be 0 mod 32768 for index calculations to be correct when modifying head and prev\n        // 98304 = 32768 (lookback) + 65536 (common chunk size)\n        this.b = new u8(98304);\n        if (this.o.dictionary) {\n            var dict = this.o.dictionary.subarray(-32768);\n            this.b.set(dict, 32768 - dict.length);\n            this.s.i = 32768 - dict.length;\n        }\n    }\n    Deflate.prototype.p = function (c, f) {\n        this.ondata(dopt(c, this.o, 0, 0, this.s), f);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Deflate.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.s.l)\n            err(4);\n        var endLen = chunk.length + this.s.z;\n        if (endLen > this.b.length) {\n            if (endLen > 2 * this.b.length - 32768) {\n                var newBuf = new u8(endLen & -32768);\n                newBuf.set(this.b.subarray(0, this.s.z));\n                this.b = newBuf;\n            }\n            var split = this.b.length - this.s.z;\n            this.b.set(chunk.subarray(0, split), this.s.z);\n            this.s.z = this.b.length;\n            this.p(this.b, false);\n            this.b.set(this.b.subarray(-32768));\n            this.b.set(chunk.subarray(split), 32768);\n            this.s.z = chunk.length - split + 32768;\n            this.s.i = 32766, this.s.w = 32768;\n        }\n        else {\n            this.b.set(chunk, this.s.z);\n            this.s.z += chunk.length;\n        }\n        this.s.l = final & 1;\n        if (this.s.z > this.s.w + 8191 || final) {\n            this.p(this.b, final || false);\n            this.s.w = this.s.i, this.s.i -= 2;\n        }\n    };\n    /**\n     * Flushes buffered uncompressed data. Useful to immediately retrieve the\n     * deflated output for small inputs.\n     */\n    Deflate.prototype.flush = function () {\n        if (!this.ondata)\n            err(5);\n        if (this.s.l)\n            err(4);\n        this.p(this.b, false);\n        this.s.w = this.s.i, this.s.i -= 2;\n    };\n    return Deflate;\n}());\nexport { Deflate };\n/**\n * Asynchronous streaming DEFLATE compression\n */\nvar AsyncDeflate = /*#__PURE__*/ (function () {\n    function AsyncDeflate(opts, cb) {\n        astrmify([\n            bDflt,\n            function () { return [astrm, Deflate]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Deflate(ev.data);\n            onmessage = astrm(strm);\n        }, 6, 1);\n    }\n    return AsyncDeflate;\n}());\nexport { AsyncDeflate };\nexport function deflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n    ], function (ev) { return pbf(deflateSync(ev.data[0], ev.data[1])); }, 0, cb);\n}\n/**\n * Compresses data with DEFLATE without any wrapper\n * @param data The data to compress\n * @param opts The compression options\n * @returns The deflated version of the data\n */\nexport function deflateSync(data, opts) {\n    return dopt(data, opts || {}, 0, 0);\n}\n/**\n * Streaming DEFLATE decompression\n */\nvar Inflate = /*#__PURE__*/ (function () {\n    function Inflate(opts, cb) {\n        // no StrmOpt here to avoid adding to workerizer\n        if (typeof opts == 'function')\n            cb = opts, opts = {};\n        this.ondata = cb;\n        var dict = opts && opts.dictionary && opts.dictionary.subarray(-32768);\n        this.s = { i: 0, b: dict ? dict.length : 0 };\n        this.o = new u8(32768);\n        this.p = new u8(0);\n        if (dict)\n            this.o.set(dict);\n    }\n    Inflate.prototype.e = function (c) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        if (!this.p.length)\n            this.p = c;\n        else if (c.length) {\n            var n = new u8(this.p.length + c.length);\n            n.set(this.p), n.set(c, this.p.length), this.p = n;\n        }\n    };\n    Inflate.prototype.c = function (final) {\n        this.s.i = +(this.d = final || false);\n        var bts = this.s.b;\n        var dt = inflt(this.p, this.s, this.o);\n        this.ondata(slc(dt, bts, this.s.b), this.d);\n        this.o = slc(dt, this.s.b - 32768), this.s.b = this.o.length;\n        this.p = slc(this.p, (this.s.p / 8) | 0), this.s.p &= 7;\n    };\n    /**\n     * Pushes a chunk to be inflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the final chunk\n     */\n    Inflate.prototype.push = function (chunk, final) {\n        this.e(chunk), this.c(final);\n    };\n    return Inflate;\n}());\nexport { Inflate };\n/**\n * Asynchronous streaming DEFLATE decompression\n */\nvar AsyncInflate = /*#__PURE__*/ (function () {\n    function AsyncInflate(opts, cb) {\n        astrmify([\n            bInflt,\n            function () { return [astrm, Inflate]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Inflate(ev.data);\n            onmessage = astrm(strm);\n        }, 7, 0);\n    }\n    return AsyncInflate;\n}());\nexport { AsyncInflate };\nexport function inflate(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt\n    ], function (ev) { return pbf(inflateSync(ev.data[0], gopt(ev.data[1]))); }, 1, cb);\n}\n/**\n * Expands DEFLATE data with no wrapper\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nexport function inflateSync(data, opts) {\n    return inflt(data, { i: 2 }, opts && opts.out, opts && opts.dictionary);\n}\n// before you yell at me for not just using extends, my reason is that TS inheritance is hard to workerize.\n/**\n * Streaming GZIP compression\n */\nvar Gzip = /*#__PURE__*/ (function () {\n    function Gzip(opts, cb) {\n        this.c = crc();\n        this.l = 0;\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gzip.prototype.push = function (chunk, final) {\n        this.c.p(chunk);\n        this.l += chunk.length;\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Gzip.prototype.p = function (c, f) {\n        var raw = dopt(c, this.o, this.v && gzhl(this.o), f && 8, this.s);\n        if (this.v)\n            gzh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 8, this.c.d()), wbytes(raw, raw.length - 4, this.l);\n        this.ondata(raw, f);\n    };\n    /**\n     * Flushes buffered uncompressed data. Useful to immediately retrieve the\n     * GZIPped output for small inputs.\n     */\n    Gzip.prototype.flush = function () {\n        Deflate.prototype.flush.call(this);\n    };\n    return Gzip;\n}());\nexport { Gzip };\n/**\n * Asynchronous streaming GZIP compression\n */\nvar AsyncGzip = /*#__PURE__*/ (function () {\n    function AsyncGzip(opts, cb) {\n        astrmify([\n            bDflt,\n            gze,\n            function () { return [astrm, Deflate, Gzip]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Gzip(ev.data);\n            onmessage = astrm(strm);\n        }, 8, 1);\n    }\n    return AsyncGzip;\n}());\nexport { AsyncGzip };\nexport function gzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        gze,\n        function () { return [gzipSync]; }\n    ], function (ev) { return pbf(gzipSync(ev.data[0], ev.data[1])); }, 2, cb);\n}\n/**\n * Compresses data with GZIP\n * @param data The data to compress\n * @param opts The compression options\n * @returns The gzipped version of the data\n */\nexport function gzipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var c = crc(), l = data.length;\n    c.p(data);\n    var d = dopt(data, opts, gzhl(opts), 8), s = d.length;\n    return gzh(d, opts), wbytes(d, s - 8, c.d()), wbytes(d, s - 4, l), d;\n}\n/**\n * Streaming single or multi-member GZIP decompression\n */\nvar Gunzip = /*#__PURE__*/ (function () {\n    function Gunzip(opts, cb) {\n        this.v = 1;\n        this.r = 0;\n        Inflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be GUNZIPped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Gunzip.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        this.r += chunk.length;\n        if (this.v) {\n            var p = this.p.subarray(this.v - 1);\n            var s = p.length > 3 ? gzs(p) : 4;\n            if (s > p.length) {\n                if (!final)\n                    return;\n            }\n            else if (this.v > 1 && this.onmember) {\n                this.onmember(this.r - p.length);\n            }\n            this.p = p.subarray(s), this.v = 0;\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n        // process concatenated GZIP\n        if (this.s.f && !this.s.l && !final) {\n            this.v = shft(this.s.p) + 9;\n            this.s = { i: 0 };\n            this.o = new u8(0);\n            this.push(new u8(0), final);\n        }\n    };\n    return Gunzip;\n}());\nexport { Gunzip };\n/**\n * Asynchronous streaming single or multi-member GZIP decompression\n */\nvar AsyncGunzip = /*#__PURE__*/ (function () {\n    function AsyncGunzip(opts, cb) {\n        var _this = this;\n        astrmify([\n            bInflt,\n            guze,\n            function () { return [astrm, Inflate, Gunzip]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Gunzip(ev.data);\n            strm.onmember = function (offset) { return postMessage(offset); };\n            onmessage = astrm(strm);\n        }, 9, 0, function (offset) { return _this.onmember && _this.onmember(offset); });\n    }\n    return AsyncGunzip;\n}());\nexport { AsyncGunzip };\nexport function gunzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        guze,\n        function () { return [gunzipSync]; }\n    ], function (ev) { return pbf(gunzipSync(ev.data[0], ev.data[1])); }, 3, cb);\n}\n/**\n * Expands GZIP data\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nexport function gunzipSync(data, opts) {\n    var st = gzs(data);\n    if (st + 8 > data.length)\n        err(6, 'invalid gzip data');\n    return inflt(data.subarray(st, -8), { i: 2 }, opts && opts.out || new u8(gzl(data)), opts && opts.dictionary);\n}\n/**\n * Streaming Zlib compression\n */\nvar Zlib = /*#__PURE__*/ (function () {\n    function Zlib(opts, cb) {\n        this.c = adler();\n        this.v = 1;\n        Deflate.call(this, opts, cb);\n    }\n    /**\n     * Pushes a chunk to be zlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Zlib.prototype.push = function (chunk, final) {\n        this.c.p(chunk);\n        Deflate.prototype.push.call(this, chunk, final);\n    };\n    Zlib.prototype.p = function (c, f) {\n        var raw = dopt(c, this.o, this.v && (this.o.dictionary ? 6 : 2), f && 4, this.s);\n        if (this.v)\n            zlh(raw, this.o), this.v = 0;\n        if (f)\n            wbytes(raw, raw.length - 4, this.c.d());\n        this.ondata(raw, f);\n    };\n    /**\n     * Flushes buffered uncompressed data. Useful to immediately retrieve the\n     * zlibbed output for small inputs.\n     */\n    Zlib.prototype.flush = function () {\n        Deflate.prototype.flush.call(this);\n    };\n    return Zlib;\n}());\nexport { Zlib };\n/**\n * Asynchronous streaming Zlib compression\n */\nvar AsyncZlib = /*#__PURE__*/ (function () {\n    function AsyncZlib(opts, cb) {\n        astrmify([\n            bDflt,\n            zle,\n            function () { return [astrm, Deflate, Zlib]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Zlib(ev.data);\n            onmessage = astrm(strm);\n        }, 10, 1);\n    }\n    return AsyncZlib;\n}());\nexport { AsyncZlib };\nexport function zlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bDflt,\n        zle,\n        function () { return [zlibSync]; }\n    ], function (ev) { return pbf(zlibSync(ev.data[0], ev.data[1])); }, 4, cb);\n}\n/**\n * Compress data with Zlib\n * @param data The data to compress\n * @param opts The compression options\n * @returns The zlib-compressed version of the data\n */\nexport function zlibSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var a = adler();\n    a.p(data);\n    var d = dopt(data, opts, opts.dictionary ? 6 : 2, 4);\n    return zlh(d, opts), wbytes(d, d.length - 4, a.d()), d;\n}\n/**\n * Streaming Zlib decompression\n */\nvar Unzlib = /*#__PURE__*/ (function () {\n    function Unzlib(opts, cb) {\n        Inflate.call(this, opts, cb);\n        this.v = opts && opts.dictionary ? 2 : 1;\n    }\n    /**\n     * Pushes a chunk to be unzlibbed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzlib.prototype.push = function (chunk, final) {\n        Inflate.prototype.e.call(this, chunk);\n        if (this.v) {\n            if (this.p.length < 6 && !final)\n                return;\n            this.p = this.p.subarray(zls(this.p, this.v - 1)), this.v = 0;\n        }\n        if (final) {\n            if (this.p.length < 4)\n                err(6, 'invalid zlib data');\n            this.p = this.p.subarray(0, -4);\n        }\n        // necessary to prevent TS from using the closure value\n        // This allows for workerization to function correctly\n        Inflate.prototype.c.call(this, final);\n    };\n    return Unzlib;\n}());\nexport { Unzlib };\n/**\n * Asynchronous streaming Zlib decompression\n */\nvar AsyncUnzlib = /*#__PURE__*/ (function () {\n    function AsyncUnzlib(opts, cb) {\n        astrmify([\n            bInflt,\n            zule,\n            function () { return [astrm, Inflate, Unzlib]; }\n        ], this, StrmOpt.call(this, opts, cb), function (ev) {\n            var strm = new Unzlib(ev.data);\n            onmessage = astrm(strm);\n        }, 11, 0);\n    }\n    return AsyncUnzlib;\n}());\nexport { AsyncUnzlib };\nexport function unzlib(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return cbify(data, opts, [\n        bInflt,\n        zule,\n        function () { return [unzlibSync]; }\n    ], function (ev) { return pbf(unzlibSync(ev.data[0], gopt(ev.data[1]))); }, 5, cb);\n}\n/**\n * Expands Zlib data\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nexport function unzlibSync(data, opts) {\n    return inflt(data.subarray(zls(data, opts && opts.dictionary), -4), { i: 2 }, opts && opts.out, opts && opts.dictionary);\n}\n// Default algorithm for compression (used because having a known output size allows faster decompression)\nexport { gzip as compress, AsyncGzip as AsyncCompress };\nexport { gzipSync as compressSync, Gzip as Compress };\n/**\n * Streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar Decompress = /*#__PURE__*/ (function () {\n    function Decompress(opts, cb) {\n        this.o = StrmOpt.call(this, opts, cb) || {};\n        this.G = Gunzip;\n        this.I = Inflate;\n        this.Z = Unzlib;\n    }\n    // init substream\n    // overriden by AsyncDecompress\n    Decompress.prototype.i = function () {\n        var _this = this;\n        this.s.ondata = function (dat, final) {\n            _this.ondata(dat, final);\n        };\n    };\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Decompress.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (!this.s) {\n            if (this.p && this.p.length) {\n                var n = new u8(this.p.length + chunk.length);\n                n.set(this.p), n.set(chunk, this.p.length);\n            }\n            else\n                this.p = chunk;\n            if (this.p.length > 2) {\n                this.s = (this.p[0] == 31 && this.p[1] == 139 && this.p[2] == 8)\n                    ? new this.G(this.o)\n                    : ((this.p[0] & 15) != 8 || (this.p[0] >> 4) > 7 || ((this.p[0] << 8 | this.p[1]) % 31))\n                        ? new this.I(this.o)\n                        : new this.Z(this.o);\n                this.i();\n                this.s.push(this.p, final);\n                this.p = null;\n            }\n        }\n        else\n            this.s.push(chunk, final);\n    };\n    return Decompress;\n}());\nexport { Decompress };\n/**\n * Asynchronous streaming GZIP, Zlib, or raw DEFLATE decompression\n */\nvar AsyncDecompress = /*#__PURE__*/ (function () {\n    function AsyncDecompress(opts, cb) {\n        Decompress.call(this, opts, cb);\n        this.queuedSize = 0;\n        this.G = AsyncGunzip;\n        this.I = AsyncInflate;\n        this.Z = AsyncUnzlib;\n    }\n    AsyncDecompress.prototype.i = function () {\n        var _this = this;\n        this.s.ondata = function (err, dat, final) {\n            _this.ondata(err, dat, final);\n        };\n        this.s.ondrain = function (size) {\n            _this.queuedSize -= size;\n            if (_this.ondrain)\n                _this.ondrain(size);\n        };\n    };\n    /**\n     * Pushes a chunk to be decompressed\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncDecompress.prototype.push = function (chunk, final) {\n        this.queuedSize += chunk.length;\n        Decompress.prototype.push.call(this, chunk, final);\n    };\n    return AsyncDecompress;\n}());\nexport { AsyncDecompress };\nexport function decompress(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzip(data, opts, cb)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflate(data, opts, cb)\n            : unzlib(data, opts, cb);\n}\n/**\n * Expands compressed GZIP, Zlib, or raw DEFLATE data, automatically detecting the format\n * @param data The data to decompress\n * @param opts The decompression options\n * @returns The decompressed version of the data\n */\nexport function decompressSync(data, opts) {\n    return (data[0] == 31 && data[1] == 139 && data[2] == 8)\n        ? gunzipSync(data, opts)\n        : ((data[0] & 15) != 8 || (data[0] >> 4) > 7 || ((data[0] << 8 | data[1]) % 31))\n            ? inflateSync(data, opts)\n            : unzlibSync(data, opts);\n}\n// flatten a directory structure\nvar fltn = function (d, p, t, o) {\n    for (var k in d) {\n        var val = d[k], n = p + k, op = o;\n        if (Array.isArray(val))\n            op = mrg(o, val[1]), val = val[0];\n        if (val instanceof u8)\n            t[n] = [val, op];\n        else {\n            t[n += '/'] = [new u8(0), op];\n            fltn(val, n, t, o);\n        }\n    }\n};\n// text encoder\nvar te = typeof TextEncoder != 'undefined' && /*#__PURE__*/ new TextEncoder();\n// text decoder\nvar td = typeof TextDecoder != 'undefined' && /*#__PURE__*/ new TextDecoder();\n// text decoder stream\nvar tds = 0;\ntry {\n    td.decode(et, { stream: true });\n    tds = 1;\n}\ncatch (e) { }\n// decode UTF8\nvar dutf8 = function (d) {\n    for (var r = '', i = 0;;) {\n        var c = d[i++];\n        var eb = (c > 127) + (c > 223) + (c > 239);\n        if (i + eb > d.length)\n            return { s: r, r: slc(d, i - 1) };\n        if (!eb)\n            r += String.fromCharCode(c);\n        else if (eb == 3) {\n            c = ((c & 15) << 18 | (d[i++] & 63) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63)) - 65536,\n                r += String.fromCharCode(55296 | (c >> 10), 56320 | (c & 1023));\n        }\n        else if (eb & 1)\n            r += String.fromCharCode((c & 31) << 6 | (d[i++] & 63));\n        else\n            r += String.fromCharCode((c & 15) << 12 | (d[i++] & 63) << 6 | (d[i++] & 63));\n    }\n};\n/**\n * Streaming UTF-8 decoding\n */\nvar DecodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is decoded\n     */\n    function DecodeUTF8(cb) {\n        this.ondata = cb;\n        if (tds)\n            this.t = new TextDecoder();\n        else\n            this.p = et;\n    }\n    /**\n     * Pushes a chunk to be decoded from UTF-8 binary\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    DecodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        final = !!final;\n        if (this.t) {\n            this.ondata(this.t.decode(chunk, { stream: true }), final);\n            if (final) {\n                if (this.t.decode().length)\n                    err(8);\n                this.t = null;\n            }\n            return;\n        }\n        if (!this.p)\n            err(4);\n        var dat = new u8(this.p.length + chunk.length);\n        dat.set(this.p);\n        dat.set(chunk, this.p.length);\n        var _a = dutf8(dat), s = _a.s, r = _a.r;\n        if (final) {\n            if (r.length)\n                err(8);\n            this.p = null;\n        }\n        else\n            this.p = r;\n        this.ondata(s, final);\n    };\n    return DecodeUTF8;\n}());\nexport { DecodeUTF8 };\n/**\n * Streaming UTF-8 encoding\n */\nvar EncodeUTF8 = /*#__PURE__*/ (function () {\n    /**\n     * Creates a UTF-8 decoding stream\n     * @param cb The callback to call whenever data is encoded\n     */\n    function EncodeUTF8(cb) {\n        this.ondata = cb;\n    }\n    /**\n     * Pushes a chunk to be encoded to UTF-8\n     * @param chunk The string data to push\n     * @param final Whether this is the last chunk\n     */\n    EncodeUTF8.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        if (this.d)\n            err(4);\n        this.ondata(strToU8(chunk), this.d = final || false);\n    };\n    return EncodeUTF8;\n}());\nexport { EncodeUTF8 };\n/**\n * Converts a string into a Uint8Array for use with compression/decompression methods\n * @param str The string to encode\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless decoding a binary string.\n * @returns The string encoded in UTF-8/Latin-1 binary\n */\nexport function strToU8(str, latin1) {\n    if (latin1) {\n        var ar_1 = new u8(str.length);\n        for (var i = 0; i < str.length; ++i)\n            ar_1[i] = str.charCodeAt(i);\n        return ar_1;\n    }\n    if (te)\n        return te.encode(str);\n    var l = str.length;\n    var ar = new u8(str.length + (str.length >> 1));\n    var ai = 0;\n    var w = function (v) { ar[ai++] = v; };\n    for (var i = 0; i < l; ++i) {\n        if (ai + 5 > ar.length) {\n            var n = new u8(ai + 8 + ((l - i) << 1));\n            n.set(ar);\n            ar = n;\n        }\n        var c = str.charCodeAt(i);\n        if (c < 128 || latin1)\n            w(c);\n        else if (c < 2048)\n            w(192 | (c >> 6)), w(128 | (c & 63));\n        else if (c > 55295 && c < 57344)\n            c = 65536 + (c & 1023 << 10) | (str.charCodeAt(++i) & 1023),\n                w(240 | (c >> 18)), w(128 | ((c >> 12) & 63)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n        else\n            w(224 | (c >> 12)), w(128 | ((c >> 6) & 63)), w(128 | (c & 63));\n    }\n    return slc(ar, 0, ai);\n}\n/**\n * Converts a Uint8Array to a string\n * @param dat The data to decode to string\n * @param latin1 Whether or not to interpret the data as Latin-1. This should\n *               not need to be true unless encoding to binary string.\n * @returns The original UTF-8/Latin-1 string\n */\nexport function strFromU8(dat, latin1) {\n    if (latin1) {\n        var r = '';\n        for (var i = 0; i < dat.length; i += 16384)\n            r += String.fromCharCode.apply(null, dat.subarray(i, i + 16384));\n        return r;\n    }\n    else if (td) {\n        return td.decode(dat);\n    }\n    else {\n        var _a = dutf8(dat), s = _a.s, r = _a.r;\n        if (r.length)\n            err(8);\n        return s;\n    }\n}\n;\n// deflate bit flag\nvar dbf = function (l) { return l == 1 ? 3 : l < 6 ? 2 : l == 9 ? 1 : 0; };\n// skip local zip header\nvar slzh = function (d, b) { return b + 30 + b2(d, b + 26) + b2(d, b + 28); };\n// read zip header\nvar zh = function (d, b, z) {\n    var fnl = b2(d, b + 28), fn = strFromU8(d.subarray(b + 46, b + 46 + fnl), !(b2(d, b + 8) & 2048)), es = b + 46 + fnl, bs = b4(d, b + 20);\n    var _a = z && bs == 4294967295 ? z64e(d, es) : [bs, b4(d, b + 24), b4(d, b + 42)], sc = _a[0], su = _a[1], off = _a[2];\n    return [b2(d, b + 10), sc, su, fn, es + b2(d, b + 30) + b2(d, b + 32), off];\n};\n// read zip64 extra field\nvar z64e = function (d, b) {\n    for (; b2(d, b) != 1; b += 4 + b2(d, b + 2))\n        ;\n    return [b8(d, b + 12), b8(d, b + 4), b8(d, b + 20)];\n};\n// extra field length\nvar exfl = function (ex) {\n    var le = 0;\n    if (ex) {\n        for (var k in ex) {\n            var l = ex[k].length;\n            if (l > 65535)\n                err(9);\n            le += l + 4;\n        }\n    }\n    return le;\n};\n// write zip header\nvar wzh = function (d, b, f, fn, u, c, ce, co) {\n    var fl = fn.length, ex = f.extra, col = co && co.length;\n    var exl = exfl(ex);\n    wbytes(d, b, ce != null ? 0x2014B50 : 0x4034B50), b += 4;\n    if (ce != null)\n        d[b++] = 20, d[b++] = f.os;\n    d[b] = 20, b += 2; // spec compliance? what's that?\n    d[b++] = (f.flag << 1) | (c < 0 && 8), d[b++] = u && 8;\n    d[b++] = f.compression & 255, d[b++] = f.compression >> 8;\n    var dt = new Date(f.mtime == null ? Date.now() : f.mtime), y = dt.getFullYear() - 1980;\n    if (y < 0 || y > 119)\n        err(10);\n    wbytes(d, b, (y << 25) | ((dt.getMonth() + 1) << 21) | (dt.getDate() << 16) | (dt.getHours() << 11) | (dt.getMinutes() << 5) | (dt.getSeconds() >> 1)), b += 4;\n    if (c != -1) {\n        wbytes(d, b, f.crc);\n        wbytes(d, b + 4, c < 0 ? -c - 2 : c);\n        wbytes(d, b + 8, f.size);\n    }\n    wbytes(d, b + 12, fl);\n    wbytes(d, b + 14, exl), b += 16;\n    if (ce != null) {\n        wbytes(d, b, col);\n        wbytes(d, b + 6, f.attrs);\n        wbytes(d, b + 10, ce), b += 14;\n    }\n    d.set(fn, b);\n    b += fl;\n    if (exl) {\n        for (var k in ex) {\n            var exf = ex[k], l = exf.length;\n            wbytes(d, b, +k);\n            wbytes(d, b + 2, l);\n            d.set(exf, b + 4), b += 4 + l;\n        }\n    }\n    if (col)\n        d.set(co, b), b += col;\n    return b;\n};\n// write zip footer (end of central directory)\nvar wzf = function (o, b, c, d, e) {\n    wbytes(o, b, 0x6054B50); // skip disk\n    wbytes(o, b + 8, c);\n    wbytes(o, b + 10, c);\n    wbytes(o, b + 12, d);\n    wbytes(o, b + 16, e);\n};\n/**\n * A pass-through stream to keep data uncompressed in a ZIP archive.\n */\nvar ZipPassThrough = /*#__PURE__*/ (function () {\n    /**\n     * Creates a pass-through stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     */\n    function ZipPassThrough(filename) {\n        this.filename = filename;\n        this.c = crc();\n        this.size = 0;\n        this.compression = 0;\n    }\n    /**\n     * Processes a chunk and pushes to the output stream. You can override this\n     * method in a subclass for custom behavior, but by default this passes\n     * the data through. You must call this.ondata(err, chunk, final) at some\n     * point in this method.\n     * @param chunk The chunk to process\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.process = function (chunk, final) {\n        this.ondata(null, chunk, final);\n    };\n    /**\n     * Pushes a chunk to be added. If you are subclassing this with a custom\n     * compression algorithm, note that you must push data from the source\n     * file only, pre-compression.\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipPassThrough.prototype.push = function (chunk, final) {\n        if (!this.ondata)\n            err(5);\n        this.c.p(chunk);\n        this.size += chunk.length;\n        if (final)\n            this.crc = this.c.d();\n        this.process(chunk, final || false);\n    };\n    return ZipPassThrough;\n}());\nexport { ZipPassThrough };\n// I don't extend because TypeScript extension adds 1kB of runtime bloat\n/**\n * Streaming DEFLATE compression for ZIP archives. Prefer using AsyncZipDeflate\n * for better performance\n */\nvar ZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function ZipDeflate(filename, opts) {\n        var _this = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new Deflate(opts, function (dat, final) {\n            _this.ondata(null, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n    }\n    ZipDeflate.prototype.process = function (chunk, final) {\n        try {\n            this.d.push(chunk, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    ZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return ZipDeflate;\n}());\nexport { ZipDeflate };\n/**\n * Asynchronous streaming DEFLATE compression for ZIP archives\n */\nvar AsyncZipDeflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates an asynchronous DEFLATE stream that can be added to ZIP archives\n     * @param filename The filename to associate with this data stream\n     * @param opts The compression options\n     */\n    function AsyncZipDeflate(filename, opts) {\n        var _this = this;\n        if (!opts)\n            opts = {};\n        ZipPassThrough.call(this, filename);\n        this.d = new AsyncDeflate(opts, function (err, dat, final) {\n            _this.ondata(err, dat, final);\n        });\n        this.compression = 8;\n        this.flag = dbf(opts.level);\n        this.terminate = this.d.terminate;\n    }\n    AsyncZipDeflate.prototype.process = function (chunk, final) {\n        this.d.push(chunk, final);\n    };\n    /**\n     * Pushes a chunk to be deflated\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    AsyncZipDeflate.prototype.push = function (chunk, final) {\n        ZipPassThrough.prototype.push.call(this, chunk, final);\n    };\n    return AsyncZipDeflate;\n}());\nexport { AsyncZipDeflate };\n// TODO: Better tree shaking\n/**\n * A zippable archive to which files can incrementally be added\n */\nvar Zip = /*#__PURE__*/ (function () {\n    /**\n     * Creates an empty ZIP archive to which files can be added\n     * @param cb The callback to call whenever data for the generated ZIP archive\n     *           is available\n     */\n    function Zip(cb) {\n        this.ondata = cb;\n        this.u = [];\n        this.d = 1;\n    }\n    /**\n     * Adds a file to the ZIP archive\n     * @param file The file stream to add\n     */\n    Zip.prototype.add = function (file) {\n        var _this = this;\n        if (!this.ondata)\n            err(5);\n        // finishing or finished\n        if (this.d & 2)\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, false);\n        else {\n            var f = strToU8(file.filename), fl_1 = f.length;\n            var com = file.comment, o = com && strToU8(com);\n            var u = fl_1 != file.filename.length || (o && (com.length != o.length));\n            var hl_1 = fl_1 + exfl(file.extra) + 30;\n            if (fl_1 > 65535)\n                this.ondata(err(11, 0, 1), null, false);\n            var header = new u8(hl_1);\n            wzh(header, 0, file, f, u, -1);\n            var chks_1 = [header];\n            var pAll_1 = function () {\n                for (var _i = 0, chks_2 = chks_1; _i < chks_2.length; _i++) {\n                    var chk = chks_2[_i];\n                    _this.ondata(null, chk, false);\n                }\n                chks_1 = [];\n            };\n            var tr_1 = this.d;\n            this.d = 0;\n            var ind_1 = this.u.length;\n            var uf_1 = mrg(file, {\n                f: f,\n                u: u,\n                o: o,\n                t: function () {\n                    if (file.terminate)\n                        file.terminate();\n                },\n                r: function () {\n                    pAll_1();\n                    if (tr_1) {\n                        var nxt = _this.u[ind_1 + 1];\n                        if (nxt)\n                            nxt.r();\n                        else\n                            _this.d = 1;\n                    }\n                    tr_1 = 1;\n                }\n            });\n            var cl_1 = 0;\n            file.ondata = function (err, dat, final) {\n                if (err) {\n                    _this.ondata(err, dat, final);\n                    _this.terminate();\n                }\n                else {\n                    cl_1 += dat.length;\n                    chks_1.push(dat);\n                    if (final) {\n                        var dd = new u8(16);\n                        wbytes(dd, 0, 0x8074B50);\n                        wbytes(dd, 4, file.crc);\n                        wbytes(dd, 8, cl_1);\n                        wbytes(dd, 12, file.size);\n                        chks_1.push(dd);\n                        uf_1.c = cl_1, uf_1.b = hl_1 + cl_1 + 16, uf_1.crc = file.crc, uf_1.size = file.size;\n                        if (tr_1)\n                            uf_1.r();\n                        tr_1 = 1;\n                    }\n                    else if (tr_1)\n                        pAll_1();\n                }\n            };\n            this.u.push(uf_1);\n        }\n    };\n    /**\n     * Ends the process of adding files and prepares to emit the final chunks.\n     * This *must* be called after adding all desired files for the resulting\n     * ZIP file to work properly.\n     */\n    Zip.prototype.end = function () {\n        var _this = this;\n        if (this.d & 2) {\n            this.ondata(err(4 + (this.d & 1) * 8, 0, 1), null, true);\n            return;\n        }\n        if (this.d)\n            this.e();\n        else\n            this.u.push({\n                r: function () {\n                    if (!(_this.d & 1))\n                        return;\n                    _this.u.splice(-1, 1);\n                    _this.e();\n                },\n                t: function () { }\n            });\n        this.d = 3;\n    };\n    Zip.prototype.e = function () {\n        var bt = 0, l = 0, tl = 0;\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            tl += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0);\n        }\n        var out = new u8(tl + 22);\n        for (var _b = 0, _c = this.u; _b < _c.length; _b++) {\n            var f = _c[_b];\n            wzh(out, bt, f, f.f, f.u, -f.c - 2, l, f.o);\n            bt += 46 + f.f.length + exfl(f.extra) + (f.o ? f.o.length : 0), l += f.b;\n        }\n        wzf(out, bt, this.u.length, tl, l);\n        this.ondata(null, out, true);\n        this.d = 2;\n    };\n    /**\n     * A method to terminate any internal workers used by the stream. Subsequent\n     * calls to add() will fail.\n     */\n    Zip.prototype.terminate = function () {\n        for (var _i = 0, _a = this.u; _i < _a.length; _i++) {\n            var f = _a[_i];\n            f.t();\n        }\n        this.d = 2;\n    };\n    return Zip;\n}());\nexport { Zip };\nexport function zip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var r = {};\n    fltn(data, '', r, opts);\n    var k = Object.keys(r);\n    var lft = k.length, o = 0, tot = 0;\n    var slft = lft, files = new Array(lft);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var cbf = function () {\n        var out = new u8(tot + 22), oe = o, cdl = tot - o;\n        tot = 0;\n        for (var i = 0; i < slft; ++i) {\n            var f = files[i];\n            try {\n                var l = f.c.length;\n                wzh(out, tot, f, f.f, f.u, l);\n                var badd = 30 + f.f.length + exfl(f.extra);\n                var loc = tot + badd;\n                out.set(f.c, loc);\n                wzh(out, o, f, f.f, f.u, l, tot, f.m), o += 16 + badd + (f.m ? f.m.length : 0), tot = loc + l;\n            }\n            catch (e) {\n                return cbd(e, null);\n            }\n        }\n        wzf(out, o, files.length, cdl, oe);\n        cbd(null, out);\n    };\n    if (!lft)\n        cbf();\n    var _loop_1 = function (i) {\n        var fn = k[i];\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var c = crc(), size = file.length;\n        c.p(file);\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        var compression = p.level == 0 ? 0 : 8;\n        var cbl = function (e, d) {\n            if (e) {\n                tAll();\n                cbd(e, null);\n            }\n            else {\n                var l = d.length;\n                files[i] = mrg(p, {\n                    size: size,\n                    crc: c.d(),\n                    c: d,\n                    f: f,\n                    m: m,\n                    u: s != fn.length || (m && (com.length != ms)),\n                    compression: compression\n                });\n                o += 30 + s + exl + l;\n                tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n                if (!--lft)\n                    cbf();\n            }\n        };\n        if (s > 65535)\n            cbl(err(11, 0, 1), null);\n        if (!compression)\n            cbl(null, file);\n        else if (size < 160000) {\n            try {\n                cbl(null, deflateSync(file, p));\n            }\n            catch (e) {\n                cbl(e, null);\n            }\n        }\n        else\n            term.push(deflate(file, p, cbl));\n    };\n    // Cannot use lft because it can decrease\n    for (var i = 0; i < slft; ++i) {\n        _loop_1(i);\n    }\n    return tAll;\n}\n/**\n * Synchronously creates a ZIP file. Prefer using `zip` for better performance\n * with more than one file.\n * @param data The directory structure for the ZIP archive\n * @param opts The main options, merged with per-file options\n * @returns The generated ZIP archive\n */\nexport function zipSync(data, opts) {\n    if (!opts)\n        opts = {};\n    var r = {};\n    var files = [];\n    fltn(data, '', r, opts);\n    var o = 0;\n    var tot = 0;\n    for (var fn in r) {\n        var _a = r[fn], file = _a[0], p = _a[1];\n        var compression = p.level == 0 ? 0 : 8;\n        var f = strToU8(fn), s = f.length;\n        var com = p.comment, m = com && strToU8(com), ms = m && m.length;\n        var exl = exfl(p.extra);\n        if (s > 65535)\n            err(11);\n        var d = compression ? deflateSync(file, p) : file, l = d.length;\n        var c = crc();\n        c.p(file);\n        files.push(mrg(p, {\n            size: file.length,\n            crc: c.d(),\n            c: d,\n            f: f,\n            m: m,\n            u: s != fn.length || (m && (com.length != ms)),\n            o: o,\n            compression: compression\n        }));\n        o += 30 + s + exl + l;\n        tot += 76 + 2 * (s + exl) + (ms || 0) + l;\n    }\n    var out = new u8(tot + 22), oe = o, cdl = tot - o;\n    for (var i = 0; i < files.length; ++i) {\n        var f = files[i];\n        wzh(out, f.o, f, f.f, f.u, f.c.length);\n        var badd = 30 + f.f.length + exfl(f.extra);\n        out.set(f.c, f.o + badd);\n        wzh(out, o, f, f.f, f.u, f.c.length, f.o, f.m), o += 16 + badd + (f.m ? f.m.length : 0);\n    }\n    wzf(out, o, files.length, cdl, oe);\n    return out;\n}\n/**\n * Streaming pass-through decompression for ZIP archives\n */\nvar UnzipPassThrough = /*#__PURE__*/ (function () {\n    function UnzipPassThrough() {\n    }\n    UnzipPassThrough.prototype.push = function (data, final) {\n        this.ondata(null, data, final);\n    };\n    UnzipPassThrough.compression = 0;\n    return UnzipPassThrough;\n}());\nexport { UnzipPassThrough };\n/**\n * Streaming DEFLATE decompression for ZIP archives. Prefer AsyncZipInflate for\n * better performance.\n */\nvar UnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function UnzipInflate() {\n        var _this = this;\n        this.i = new Inflate(function (dat, final) {\n            _this.ondata(null, dat, final);\n        });\n    }\n    UnzipInflate.prototype.push = function (data, final) {\n        try {\n            this.i.push(data, final);\n        }\n        catch (e) {\n            this.ondata(e, null, final);\n        }\n    };\n    UnzipInflate.compression = 8;\n    return UnzipInflate;\n}());\nexport { UnzipInflate };\n/**\n * Asynchronous streaming DEFLATE decompression for ZIP archives\n */\nvar AsyncUnzipInflate = /*#__PURE__*/ (function () {\n    /**\n     * Creates a DEFLATE decompression that can be used in ZIP archives\n     */\n    function AsyncUnzipInflate(_, sz) {\n        var _this = this;\n        if (sz < 320000) {\n            this.i = new Inflate(function (dat, final) {\n                _this.ondata(null, dat, final);\n            });\n        }\n        else {\n            this.i = new AsyncInflate(function (err, dat, final) {\n                _this.ondata(err, dat, final);\n            });\n            this.terminate = this.i.terminate;\n        }\n    }\n    AsyncUnzipInflate.prototype.push = function (data, final) {\n        if (this.i.terminate)\n            data = slc(data, 0);\n        this.i.push(data, final);\n    };\n    AsyncUnzipInflate.compression = 8;\n    return AsyncUnzipInflate;\n}());\nexport { AsyncUnzipInflate };\n/**\n * A ZIP archive decompression stream that emits files as they are discovered\n */\nvar Unzip = /*#__PURE__*/ (function () {\n    /**\n     * Creates a ZIP decompression stream\n     * @param cb The callback to call whenever a file in the ZIP archive is found\n     */\n    function Unzip(cb) {\n        this.onfile = cb;\n        this.k = [];\n        this.o = {\n            0: UnzipPassThrough\n        };\n        this.p = et;\n    }\n    /**\n     * Pushes a chunk to be unzipped\n     * @param chunk The chunk to push\n     * @param final Whether this is the last chunk\n     */\n    Unzip.prototype.push = function (chunk, final) {\n        var _this = this;\n        if (!this.onfile)\n            err(5);\n        if (!this.p)\n            err(4);\n        if (this.c > 0) {\n            var len = Math.min(this.c, chunk.length);\n            var toAdd = chunk.subarray(0, len);\n            this.c -= len;\n            if (this.d)\n                this.d.push(toAdd, !this.c);\n            else\n                this.k[0].push(toAdd);\n            chunk = chunk.subarray(len);\n            if (chunk.length)\n                return this.push(chunk, final);\n        }\n        else {\n            var f = 0, i = 0, is = void 0, buf = void 0;\n            if (!this.p.length)\n                buf = chunk;\n            else if (!chunk.length)\n                buf = this.p;\n            else {\n                buf = new u8(this.p.length + chunk.length);\n                buf.set(this.p), buf.set(chunk, this.p.length);\n            }\n            var l = buf.length, oc = this.c, add = oc && this.d;\n            var _loop_2 = function () {\n                var _a;\n                var sig = b4(buf, i);\n                if (sig == 0x4034B50) {\n                    f = 1, is = i;\n                    this_1.d = null;\n                    this_1.c = 0;\n                    var bf = b2(buf, i + 6), cmp_1 = b2(buf, i + 8), u = bf & 2048, dd = bf & 8, fnl = b2(buf, i + 26), es = b2(buf, i + 28);\n                    if (l > i + 30 + fnl + es) {\n                        var chks_3 = [];\n                        this_1.k.unshift(chks_3);\n                        f = 2;\n                        var sc_1 = b4(buf, i + 18), su_1 = b4(buf, i + 22);\n                        var fn_1 = strFromU8(buf.subarray(i + 30, i += 30 + fnl), !u);\n                        if (sc_1 == 4294967295) {\n                            _a = dd ? [-2] : z64e(buf, i), sc_1 = _a[0], su_1 = _a[1];\n                        }\n                        else if (dd)\n                            sc_1 = -1;\n                        i += es;\n                        this_1.c = sc_1;\n                        var d_1;\n                        var file_1 = {\n                            name: fn_1,\n                            compression: cmp_1,\n                            start: function () {\n                                if (!file_1.ondata)\n                                    err(5);\n                                if (!sc_1)\n                                    file_1.ondata(null, et, true);\n                                else {\n                                    var ctr = _this.o[cmp_1];\n                                    if (!ctr)\n                                        file_1.ondata(err(14, 'unknown compression type ' + cmp_1, 1), null, false);\n                                    d_1 = sc_1 < 0 ? new ctr(fn_1) : new ctr(fn_1, sc_1, su_1);\n                                    d_1.ondata = function (err, dat, final) { file_1.ondata(err, dat, final); };\n                                    for (var _i = 0, chks_4 = chks_3; _i < chks_4.length; _i++) {\n                                        var dat = chks_4[_i];\n                                        d_1.push(dat, false);\n                                    }\n                                    if (_this.k[0] == chks_3 && _this.c)\n                                        _this.d = d_1;\n                                    else\n                                        d_1.push(et, true);\n                                }\n                            },\n                            terminate: function () {\n                                if (d_1 && d_1.terminate)\n                                    d_1.terminate();\n                            }\n                        };\n                        if (sc_1 >= 0)\n                            file_1.size = sc_1, file_1.originalSize = su_1;\n                        this_1.onfile(file_1);\n                    }\n                    return \"break\";\n                }\n                else if (oc) {\n                    if (sig == 0x8074B50) {\n                        is = i += 12 + (oc == -2 && 8), f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                    else if (sig == 0x2014B50) {\n                        is = i -= 4, f = 3, this_1.c = 0;\n                        return \"break\";\n                    }\n                }\n            };\n            var this_1 = this;\n            for (; i < l - 4; ++i) {\n                var state_1 = _loop_2();\n                if (state_1 === \"break\")\n                    break;\n            }\n            this.p = et;\n            if (oc < 0) {\n                var dat = f ? buf.subarray(0, is - 12 - (oc == -2 && 8) - (b4(buf, is - 16) == 0x8074B50 && 4)) : buf.subarray(0, i);\n                if (add)\n                    add.push(dat, !!f);\n                else\n                    this.k[+(f == 2)].push(dat);\n            }\n            if (f & 2)\n                return this.push(buf.subarray(i), final);\n            this.p = buf.subarray(i);\n        }\n        if (final) {\n            if (this.c)\n                err(13);\n            this.p = null;\n        }\n    };\n    /**\n     * Registers a decoder with the stream, allowing for files compressed with\n     * the compression type provided to be expanded correctly\n     * @param decoder The decoder constructor\n     */\n    Unzip.prototype.register = function (decoder) {\n        this.o[decoder.compression] = decoder;\n    };\n    return Unzip;\n}());\nexport { Unzip };\nvar mt = typeof queueMicrotask == 'function' ? queueMicrotask : typeof setTimeout == 'function' ? setTimeout : function (fn) { fn(); };\nexport function unzip(data, opts, cb) {\n    if (!cb)\n        cb = opts, opts = {};\n    if (typeof cb != 'function')\n        err(7);\n    var term = [];\n    var tAll = function () {\n        for (var i = 0; i < term.length; ++i)\n            term[i]();\n    };\n    var files = {};\n    var cbd = function (a, b) {\n        mt(function () { cb(a, b); });\n    };\n    mt(function () { cbd = cb; });\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558) {\n            cbd(err(13, 0, 1), null);\n            return tAll;\n        }\n    }\n    ;\n    var lft = b2(data, e + 8);\n    if (lft) {\n        var c = lft;\n        var o = b4(data, e + 16);\n        var z = o == 4294967295 || c == 65535;\n        if (z) {\n            var ze = b4(data, e - 12);\n            z = b4(data, ze) == 0x6064B50;\n            if (z) {\n                c = lft = b4(data, ze + 32);\n                o = b4(data, ze + 48);\n            }\n        }\n        var fltr = opts && opts.filter;\n        var _loop_3 = function (i) {\n            var _a = zh(data, o, z), c_1 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n            o = no;\n            var cbl = function (e, d) {\n                if (e) {\n                    tAll();\n                    cbd(e, null);\n                }\n                else {\n                    if (d)\n                        files[fn] = d;\n                    if (!--lft)\n                        cbd(null, files);\n                }\n            };\n            if (!fltr || fltr({\n                name: fn,\n                size: sc,\n                originalSize: su,\n                compression: c_1\n            })) {\n                if (!c_1)\n                    cbl(null, slc(data, b, b + sc));\n                else if (c_1 == 8) {\n                    var infl = data.subarray(b, b + sc);\n                    // Synchronously decompress under 512KB, or barely-compressed data\n                    if (su < 524288 || sc > 0.8 * su) {\n                        try {\n                            cbl(null, inflateSync(infl, { out: new u8(su) }));\n                        }\n                        catch (e) {\n                            cbl(e, null);\n                        }\n                    }\n                    else\n                        term.push(inflate(infl, { size: su }, cbl));\n                }\n                else\n                    cbl(err(14, 'unknown compression type ' + c_1, 1), null);\n            }\n            else\n                cbl(null, null);\n        };\n        for (var i = 0; i < c; ++i) {\n            _loop_3(i);\n        }\n    }\n    else\n        cbd(null, {});\n    return tAll;\n}\n/**\n * Synchronously decompresses a ZIP archive. Prefer using `unzip` for better\n * performance with more than one file.\n * @param data The raw compressed ZIP file\n * @param opts The ZIP extraction options\n * @returns The decompressed files\n */\nexport function unzipSync(data, opts) {\n    var files = {};\n    var e = data.length - 22;\n    for (; b4(data, e) != 0x6054B50; --e) {\n        if (!e || data.length - e > 65558)\n            err(13);\n    }\n    ;\n    var c = b2(data, e + 8);\n    if (!c)\n        return {};\n    var o = b4(data, e + 16);\n    var z = o == 4294967295 || c == 65535;\n    if (z) {\n        var ze = b4(data, e - 12);\n        z = b4(data, ze) == 0x6064B50;\n        if (z) {\n            c = b4(data, ze + 32);\n            o = b4(data, ze + 48);\n        }\n    }\n    var fltr = opts && opts.filter;\n    for (var i = 0; i < c; ++i) {\n        var _a = zh(data, o, z), c_2 = _a[0], sc = _a[1], su = _a[2], fn = _a[3], no = _a[4], off = _a[5], b = slzh(data, off);\n        o = no;\n        if (!fltr || fltr({\n            name: fn,\n            size: sc,\n            originalSize: su,\n            compression: c_2\n        })) {\n            if (!c_2)\n                files[fn] = slc(data, b, b + sc);\n            else if (c_2 == 8)\n                files[fn] = inflateSync(data.subarray(b, b + sc), { out: new u8(su) });\n            else\n                err(14, 'unknown compression type ' + c_2);\n        }\n    }\n    return files;\n}\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRegister","parcelRequire","$parcel$global","globalThis","self","window","global","register","module","exports","$176622c6c12b4bff$export$3d616c3fb3e15483","$176622c6c12b4bff$export$366b39a6daa8ed7a","$176622c6c12b4bff$var$ch2","$176622c6c12b4bff$var$wk","c","id","msg","transfer","cb","w","Worker","URL","createObjectURL","Blob","type","onmessage","d","data","ed","$e$","err","Error","stack","postMessage","$176622c6c12b4bff$var$u8","Uint8Array","$176622c6c12b4bff$var$u16","Uint16Array","$176622c6c12b4bff$var$i32","Int32Array","$176622c6c12b4bff$var$fleb","$176622c6c12b4bff$var$fdeb","$176622c6c12b4bff$var$clim","$176622c6c12b4bff$var$freb","eb","start","b","i","r","j","$176622c6c12b4bff$var$_a","$176622c6c12b4bff$var$fl","$176622c6c12b4bff$var$revfl","$176622c6c12b4bff$var$_b","$176622c6c12b4bff$var$fd","$176622c6c12b4bff$var$revfd","$176622c6c12b4bff$var$rev","$176622c6c12b4bff$var$i","$176622c6c12b4bff$var$x","$176622c6c12b4bff$var$hMap","cd","mb","co","length","l","le","rvb","sv","r_1","m","$176622c6c12b4bff$var$flt","$176622c6c12b4bff$var$fdt","$176622c6c12b4bff$var$flm","$176622c6c12b4bff$var$flrm","$176622c6c12b4bff$var$fdm","$176622c6c12b4bff$var$fdrm","$176622c6c12b4bff$var$max","a","$176622c6c12b4bff$var$bits","p","o","$176622c6c12b4bff$var$bits16","$176622c6c12b4bff$var$shft","$176622c6c12b4bff$var$slc","subarray","$176622c6c12b4bff$var$ec","$176622c6c12b4bff$var$err","ind","nt","code","captureStackTrace","$176622c6c12b4bff$var$inflt","dat","st","buf","dict","sl","dl","f","noBuf","resize","noSt","cbuf","bl","nbuf","Math","max","final","pos","bt","lm","dm","lbt","dbt","tbts","hLit","hcLen","tl","ldt","clt","clb","clbmsk","clm","lt","dt","t","lms","dms","lpos","sym","add","dsym","end","shift","dend","min","$176622c6c12b4bff$var$wbits","$176622c6c12b4bff$var$wbits16","$176622c6c12b4bff$var$hTree","push","t2","slice","$176622c6c12b4bff$var$et","sort","i0","i1","i2","maxSym","tr","mbt","$176622c6c12b4bff$var$ln","lft","cst","i2_1","i2_2","i2_3","$176622c6c12b4bff$var$lc","cl","cli","cln","cls","$176622c6c12b4bff$var$clen","cf","$176622c6c12b4bff$var$wfblk","out","$176622c6c12b4bff$var$wblk","syms","lf","df","li","bs","ll","_a","dlt","mlb","_b","ddt","mdb","_c","lclt","nlc","_d","lcdt","ndc","lcfreq","_e","lct","mlcb","nlcc","flen","ftlen","dtlen","llm","lcts","it","clct","len","dst","$176622c6c12b4bff$var$deo","$176622c6c12b4bff$var$dflt","lvl","plvl","pre","post","z","ceil","lst","opt","msk_1","prev","head","h","bs1_1","bs2_1","hsh","lc_1","wi","hv","imod","pimod","rem","ch_1","dif","maxn","maxd","ml","nl","mmd","md","ti","pti","lin","din","$176622c6c12b4bff$var$crct","k","$176622c6c12b4bff$var$crc","cr","$176622c6c12b4bff$var$adler","$176622c6c12b4bff$var$dopt","dictionary","newDat","level","mem","log","$176622c6c12b4bff$var$mrg","$176622c6c12b4bff$var$wcln","fn","fnStr","td","toString","ks","indexOf","lastIndexOf","replace","split","st_1","prototype","spInd","$176622c6c12b4bff$var$ch","$176622c6c12b4bff$var$cbfs","buffer","constructor","$176622c6c12b4bff$var$wrkr","fns","init","td_1","$176622c6c12b4bff$var$pbf","$176622c6c12b4bff$var$gopt","size","$176622c6c12b4bff$var$b4","$176622c6c12b4bff$var$wbytes","$176622c6c12b4bff$var$gzh","filename","mtime","floor","Date","now","charCodeAt","$176622c6c12b4bff$var$gzs","flg","zs","$176622c6c12b4bff$var$gzl","$176622c6c12b4bff$var$zls","$176622c6c12b4bff$export$21533ff51b8a0b4a","opts","$176622c6c12b4bff$export$d1de70a877d6e43c","Inflate","ondata","bts","chunk","$176622c6c12b4bff$export$90366d8b308ba94a","$176622c6c12b4bff$var$te","TextEncoder","$176622c6c12b4bff$var$td","TextDecoder","decode","stream","str","latin1","ar_1","encode","ar","ai","queueMicrotask"],"version":3,"file":"browser.c81f129f.js.map"}
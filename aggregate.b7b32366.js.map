{"mappings":"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","sources":["<anon>","node_modules/@newrelic/browser-agent/dist/esm/features/page_view_event/aggregate/index.js","node_modules/@newrelic/browser-agent/dist/esm/common/timing/nav-timing.js","node_modules/@newrelic/browser-agent/dist/esm/features/page_view_event/aggregate/initialized-features.js","node_modules/@newrelic/browser-agent/dist/esm/common/vitals/time-to-first-byte.js","node_modules/@newrelic/browser-agent/dist/esm/common/timing/time-keeper.js","node_modules/@newrelic/browser-agent/dist/esm/common/util/traverse.js"],"sourcesContent":["(function () {\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  var parcelRequire = $parcel$global[\"parcelRequire5e30\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"bxyEV\", function(module, exports) {\n\n$parcel$export(module.exports, \"Aggregate\", function () { return $866da95e412c1e33$export$b9601df20779e14a; });\n/**\n * Copyright 2020-2025 New Relic, Inc. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */ \nvar $7CBaz = parcelRequire(\"7CBaz\");\n\nvar $6H82V = parcelRequire(\"6H82V\");\n\nvar $gSI6b = parcelRequire(\"gSI6b\");\n\nvar $4qjOv = parcelRequire(\"4qjOv\");\n\nvar $95KVp = parcelRequire(\"95KVp\");\n\nvar $6cMq7 = parcelRequire(\"6cMq7\");\n\nvar $cARWO = parcelRequire(\"cARWO\");\n\nvar $73gWV = parcelRequire(\"73gWV\");\n\nvar $6Lc7k = parcelRequire(\"6Lc7k\");\n\nvar $27uK3 = parcelRequire(\"27uK3\");\n\nvar $kI9nw = parcelRequire(\"kI9nw\");\n\nvar $hP1Bb = parcelRequire(\"hP1Bb\");\n\nvar $7nvKd = parcelRequire(\"7nvKd\");\n\nvar $jL9ao = parcelRequire(\"jL9ao\");\n\nvar $jHSql = parcelRequire(\"jHSql\");\n\nvar $8auZx = parcelRequire(\"8auZx\");\n\nvar $2cGfe = parcelRequire(\"2cGfe\");\nclass $866da95e412c1e33$export$b9601df20779e14a extends (0, $6Lc7k.AggregateBase) {\n    static featureName = $95KVp.FEATURE_NAME;\n    constructor(agentRef){\n        super(agentRef, $95KVp.FEATURE_NAME);\n        this.timeToFirstByte = 0;\n        this.firstByteToWindowLoad = 0; // our \"frontend\" duration\n        this.firstByteToDomContent = 0; // our \"dom processing\" duration\n        (0, $8auZx.registerHandler)('send-rum', (customAttibutes, target)=>{\n            this.sendRum(customAttibutes, target);\n        }, this.featureName, this.ee);\n        if (!(0, $4qjOv.isValid)(agentRef.info)) {\n            this.ee.abort();\n            return (0, $73gWV.warn)(43);\n        }\n        agentRef.runtime.timeKeeper = new (0, $jL9ao.TimeKeeper)(agentRef.runtime.session);\n        if (0, $7CBaz.isBrowserScope) (0, $hP1Bb.timeToFirstByte).subscribe(({ value: value, attrs: attrs })=>{\n            const navEntry = attrs.navigationEntry;\n            this.timeToFirstByte = Math.max(value, this.timeToFirstByte);\n            this.firstByteToWindowLoad = Math.max(Math.round(navEntry.loadEventEnd - this.timeToFirstByte), this.firstByteToWindowLoad); // our \"frontend\" duration\n            this.firstByteToDomContent = Math.max(Math.round(navEntry.domContentLoadedEventEnd - this.timeToFirstByte), this.firstByteToDomContent); // our \"dom processing\" duration\n            this.sendRum();\n        });\n        else // worker agent build does not get TTFB values, use default 0 values\n        this.sendRum();\n    }\n    /**\n   *\n   * @param {Function} cb A function to run once the RUM call has finished - Defaults to activateFeatures\n   * @param {*} customAttributes custom attributes to attach to the RUM call - Defaults to info.js\n   * @param {*} target The target to harvest to - Since we will not know the entityGuid before harvesting, this must be an object directly supplied from the info object or API, not an entityGuid string for lookup with the entityManager - Defaults to { licenseKey: this.agentRef.info.licenseKey, applicationID: this.agentRef.info.applicationID }\n   */ sendRum(customAttributes = this.agentRef.info.jsAttributes, target = {\n        licenseKey: this.agentRef.info.licenseKey,\n        applicationID: this.agentRef.info.applicationID\n    }) {\n        const info = this.agentRef.info;\n        const measures = {};\n        if (info.queueTime) measures.qt = info.queueTime;\n        if (info.applicationTime) measures.ap = info.applicationTime;\n        // These 3 values should've been recorded after load and before this func runs. They are part of the minimum required for PageView events to be created.\n        // Following PR #428, which demands that all agents send RUM call, these need to be sent even outside of the main window context where PerformanceTiming\n        // or PerformanceNavigationTiming do not exists. Hence, they'll be filled in by 0s instead in, for example, worker threads that still init the PVE module.\n        measures.be = this.timeToFirstByte;\n        measures.fe = this.firstByteToWindowLoad;\n        measures.dc = this.firstByteToDomContent;\n        const queryParameters = {\n            tt: info.ttGuid,\n            us: info.user,\n            ac: info.account,\n            pr: info.product,\n            af: (0, $6cMq7.getActivatedFeaturesFlags)(this.agentIdentifier).join(','),\n            ...measures,\n            xx: info.extra,\n            ua: info.userAttributes,\n            at: info.atts\n        };\n        if (this.agentRef.runtime.session) queryParameters.fsh = Number(this.agentRef.runtime.session.isNew); // \"first session harvest\" aka RUM request or PageView event of a session\n        let body;\n        if (typeof customAttributes === 'object' && Object.keys(customAttributes).length > 0) body = (0, $jHSql.applyFnToProps)({\n            ja: customAttributes\n        }, this.obfuscator.obfuscateString.bind(this.obfuscator), 'string');\n        if ((0, $7CBaz.globalScope).performance) {\n            if (typeof PerformanceNavigationTiming !== 'undefined') {\n                // Navigation Timing level 2 API that replaced PerformanceTiming & PerformanceNavigation\n                const navTimingEntry = (0, $7CBaz.globalScope)?.performance?.getEntriesByType('navigation')?.[0];\n                const perf = {\n                    timing: (0, $6H82V.addPT)((0, $7CBaz.originTime), navTimingEntry, {}),\n                    navigation: (0, $6H82V.addPN)(navTimingEntry, {})\n                };\n                queryParameters.perf = (0, $gSI6b.stringify)(perf);\n            } else if (typeof PerformanceTiming !== 'undefined') {\n                // Safari pre-15 did not support level 2 timing\n                const perf = {\n                    timing: (0, $6H82V.addPT)((0, $7CBaz.originTime), (0, $7CBaz.globalScope).performance.timing, {}, true),\n                    navigation: (0, $6H82V.addPN)((0, $7CBaz.globalScope).performance.navigation, {})\n                };\n                queryParameters.perf = (0, $gSI6b.stringify)(perf);\n            }\n        }\n        queryParameters.fp = (0, $kI9nw.firstPaint).current.value;\n        queryParameters.fcp = (0, $27uK3.firstContentfulPaint).current.value;\n        const timeKeeper = this.agentRef.runtime.timeKeeper;\n        if (timeKeeper?.ready) queryParameters.timestamp = Math.floor(timeKeeper.correctRelativeTimestamp((0, $7nvKd.now)()));\n        this.rumStartTime = (0, $7nvKd.now)();\n        this.agentRef.runtime.harvester.triggerHarvestFor(this, {\n            directSend: {\n                targetApp: target,\n                payload: {\n                    qs: queryParameters,\n                    body: body\n                }\n            },\n            needResponse: true,\n            sendEmptyBody: true\n        });\n    }\n    postHarvestCleanup({ status: status, responseText: responseText, xhr: xhr, targetApp: targetApp }) {\n        const rumEndTime = (0, $7nvKd.now)();\n        let app, flags;\n        try {\n            ({ app: app, ...flags } = JSON.parse(responseText));\n            this.processEntities(app.agents, targetApp);\n        } catch (error) {\n            // wont set entity stuff here, if main agent will later abort, if registered agent, nothing will happen\n            (0, $73gWV.warn)(53, error);\n        }\n        /** Only run agent-wide side-effects if the harvest was for the main agent */ if (!(0, $2cGfe.isContainerAgentTarget)(targetApp, this.agentRef)) return;\n        if (status >= 400 || status === 0) {\n            (0, $73gWV.warn)(18, status);\n            // Adding retry logic for the rum call will be a separate change; this.blocked will need to be changed since that prevents another triggerHarvestFor()\n            this.ee.abort();\n            return;\n        }\n        try {\n            // will do nothing if already done\n            this.agentRef.runtime.timeKeeper.processRumRequest(xhr, this.rumStartTime, rumEndTime, app.nrServerTime);\n            if (!this.agentRef.runtime.timeKeeper.ready) throw new Error('TimeKeeper not ready');\n        } catch (error) {\n            this.ee.abort();\n            (0, $73gWV.warn)(17, error);\n            return;\n        }\n        // set the agent runtime objects that require the rum response or entity guid\n        if (!Object.keys(this.agentRef.runtime.appMetadata).length) this.agentRef.runtime.appMetadata = app;\n        this.drain();\n        this.agentRef.runtime.harvester.startTimer();\n        (0, $cARWO.activateFeatures)(flags, this.agentRef);\n    }\n    processEntities(entities, targetApp) {\n        if (!entities || !targetApp) return;\n        entities.forEach((agent)=>{\n            const entityManager = this.agentRef.runtime.entityManager;\n            const entityGuid = agent.entityGuid;\n            const entity = entityManager.get(entityGuid);\n            if (entity) return; // already processed\n            if ((0, $2cGfe.isContainerAgentTarget)(targetApp, this.agentRef)) entityManager.setDefaultEntity({\n                ...targetApp,\n                entityGuid: entityGuid\n            });\n            entityManager.set(agent.entityGuid, {\n                ...targetApp,\n                entityGuid: entityGuid\n            });\n        });\n    }\n}\n\n});\nparcelRegister(\"6H82V\", function(module, exports) {\n\n$parcel$export(module.exports, \"navTimingValues\", function () { return $4dfd000ec77da785$export$2f44a866b65eb89b; });\n$parcel$export(module.exports, \"addPT\", function () { return $4dfd000ec77da785$export$4eecd77d9102a9b2; });\n$parcel$export(module.exports, \"addPN\", function () { return $4dfd000ec77da785$export$a47612ea3c40772d; });\n/**\n * Copyright 2020-2025 New Relic, Inc. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */ // We don't use JSON.stringify directly on the performance timing data for these reasons:\n// * Chrome has extra data in the performance object that we don't want to send all the time (wasteful)\n// * Firefox fails to stringify the native object due to - http://code.google.com/p/v8/issues/detail?id=1223\n// * The variable names are long and wasteful to transmit\n// Add Performance Timing values to the given object.\n// * Values are written relative to an offset to reduce their length (i.e. number of characters).\n// * The offset is sent with the data\n// * 0's are not included unless the value is a 'relative zero'\n//\nvar $4dfd000ec77da785$var$START = 'Start';\nvar $4dfd000ec77da785$var$END = 'End';\nvar $4dfd000ec77da785$var$UNLOAD_EVENT = 'unloadEvent';\nvar $4dfd000ec77da785$var$REDIRECT = 'redirect';\nvar $4dfd000ec77da785$var$DOMAIN_LOOKUP = 'domainLookup';\nvar $4dfd000ec77da785$var$ONNECT = 'onnect';\nvar $4dfd000ec77da785$var$REQUEST = 'request';\nvar $4dfd000ec77da785$var$RESPONSE = 'response';\nvar $4dfd000ec77da785$var$LOAD_EVENT = 'loadEvent';\nvar $4dfd000ec77da785$var$DOM_CONTENT_LOAD_EVENT = 'domContentLoadedEvent';\nconst $4dfd000ec77da785$export$2f44a866b65eb89b = [];\nfunction $4dfd000ec77da785$var$getPntType(type) {\n    if (typeof type === 'number') return type;\n    const types = {\n        navigate: undefined,\n        reload: 1,\n        back_forward: 2,\n        prerender: 3\n    };\n    return types[type];\n}\nfunction $4dfd000ec77da785$export$4eecd77d9102a9b2(offset, pt, v = {}, isL1Api = false) {\n    if (!pt) return;\n    v.of = offset;\n    $4dfd000ec77da785$var$handleValue(v.of, v, 'n', true);\n    $4dfd000ec77da785$var$handleValue(pt[$4dfd000ec77da785$var$UNLOAD_EVENT + $4dfd000ec77da785$var$START], v, 'u', isL1Api);\n    $4dfd000ec77da785$var$handleValue(pt[$4dfd000ec77da785$var$REDIRECT + $4dfd000ec77da785$var$START], v, 'r', isL1Api);\n    $4dfd000ec77da785$var$handleValue(pt[$4dfd000ec77da785$var$UNLOAD_EVENT + $4dfd000ec77da785$var$END], v, 'ue', isL1Api);\n    $4dfd000ec77da785$var$handleValue(pt[$4dfd000ec77da785$var$REDIRECT + $4dfd000ec77da785$var$END], v, 're', isL1Api);\n    $4dfd000ec77da785$var$handleValue(pt['fetch' + $4dfd000ec77da785$var$START], v, 'f', isL1Api);\n    $4dfd000ec77da785$var$handleValue(pt[$4dfd000ec77da785$var$DOMAIN_LOOKUP + $4dfd000ec77da785$var$START], v, 'dn', isL1Api);\n    $4dfd000ec77da785$var$handleValue(pt[$4dfd000ec77da785$var$DOMAIN_LOOKUP + $4dfd000ec77da785$var$END], v, 'dne', isL1Api);\n    $4dfd000ec77da785$var$handleValue(pt['c' + $4dfd000ec77da785$var$ONNECT + $4dfd000ec77da785$var$START], v, 'c', isL1Api);\n    $4dfd000ec77da785$var$handleValue(pt['secureC' + $4dfd000ec77da785$var$ONNECT + 'ion' + $4dfd000ec77da785$var$START], v, 's', isL1Api);\n    $4dfd000ec77da785$var$handleValue(pt['c' + $4dfd000ec77da785$var$ONNECT + $4dfd000ec77da785$var$END], v, 'ce', isL1Api);\n    $4dfd000ec77da785$var$handleValue(pt[$4dfd000ec77da785$var$REQUEST + $4dfd000ec77da785$var$START], v, 'rq', isL1Api);\n    $4dfd000ec77da785$var$handleValue(pt[$4dfd000ec77da785$var$RESPONSE + $4dfd000ec77da785$var$START], v, 'rp', isL1Api);\n    $4dfd000ec77da785$var$handleValue(pt[$4dfd000ec77da785$var$RESPONSE + $4dfd000ec77da785$var$END], v, 'rpe', isL1Api);\n    $4dfd000ec77da785$var$handleValue(pt.domLoading, v, 'dl', isL1Api);\n    $4dfd000ec77da785$var$handleValue(pt.domInteractive, v, 'di', isL1Api);\n    $4dfd000ec77da785$var$handleValue(pt[$4dfd000ec77da785$var$DOM_CONTENT_LOAD_EVENT + $4dfd000ec77da785$var$START], v, 'ds', isL1Api);\n    $4dfd000ec77da785$var$handleValue(pt[$4dfd000ec77da785$var$DOM_CONTENT_LOAD_EVENT + $4dfd000ec77da785$var$END], v, 'de', isL1Api);\n    $4dfd000ec77da785$var$handleValue(pt.domComplete, v, 'dc', isL1Api);\n    $4dfd000ec77da785$var$handleValue(pt[$4dfd000ec77da785$var$LOAD_EVENT + $4dfd000ec77da785$var$START], v, 'l', isL1Api);\n    $4dfd000ec77da785$var$handleValue(pt[$4dfd000ec77da785$var$LOAD_EVENT + $4dfd000ec77da785$var$END], v, 'le', isL1Api);\n    return v;\n}\nfunction $4dfd000ec77da785$export$a47612ea3c40772d(pn, v) {\n    $4dfd000ec77da785$var$handleValue($4dfd000ec77da785$var$getPntType(pn.type), v, 'ty');\n    $4dfd000ec77da785$var$handleValue(pn.redirectCount, v, 'rc');\n    return v;\n}\n/**\n * By side effect, this modifies 'obj' with a mapping of the 'prop' provided to a 'value', and invalid values are not added.\n * On the other hand, the local navTimingValues array gets the value appended if valid and 'undefined' appended if invalid, regardless.\n */ function $4dfd000ec77da785$var$handleValue(value, obj, prop, isOldApi) {\n    /*\n  For L2 Timing API, the value will already be a relative-to-previous-document DOMHighResTimeStamp.\n  For L1 (deprecated) Timing, the value is an UNIX epoch timestamp, which we will convert to a relative time using our offset.\n  PNT.type is reported as undefined, 1, 2, etc -- note that zero-value properties will be recorded as 'undefined', however DEM interprets undefined \"types\" as \"navigate\"\n  */ if (typeof value === 'number' && value > 0) {\n        // note that zero-value properties will be recorded as 'undefined'\n        if (isOldApi) {\n            const offset = obj?.of > 0 ? obj.of : 0; // expect an epoch timestamp, if called by addPT\n            value = Math.max(value - offset, 0);\n        }\n        value = Math.round(value);\n        obj[prop] = value;\n        $4dfd000ec77da785$export$2f44a866b65eb89b.push(value);\n    } else $4dfd000ec77da785$export$2f44a866b65eb89b.push(undefined);\n}\n\n});\n\nparcelRegister(\"6cMq7\", function(module, exports) {\n\n$parcel$export(module.exports, \"getActivatedFeaturesFlags\", function () { return $48496c4cc9a50774$export$2d079ebe16700cdd; });\n/**\n * Copyright 2020-2025 New Relic, Inc. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */ \nvar $gUmiN = parcelRequire(\"gUmiN\");\n\nvar $7jrqI = parcelRequire(\"7jrqI\");\nfunction $48496c4cc9a50774$export$2d079ebe16700cdd(agentId) {\n    const flagArr = [];\n    const newrelic = (0, $7jrqI.gosNREUM)();\n    try {\n        Object.keys(newrelic.initializedAgents[agentId].features).forEach((featName)=>{\n            switch(featName){\n                case (0, $gUmiN.FEATURE_NAMES).ajax:\n                    flagArr.push('xhr');\n                    break;\n                case (0, $gUmiN.FEATURE_NAMES).jserrors:\n                    flagArr.push('err');\n                    break;\n                case (0, $gUmiN.FEATURE_NAMES).genericEvents:\n                    flagArr.push('ins');\n                    break;\n                case (0, $gUmiN.FEATURE_NAMES).sessionTrace:\n                    flagArr.push('stn');\n                    break;\n                case (0, $gUmiN.FEATURE_NAMES).softNav:\n                case (0, $gUmiN.FEATURE_NAMES).spa:\n                    flagArr.push('spa');\n                    break;\n            }\n        });\n    } catch (e) {}\n    return flagArr;\n} // Note: this module and the \"af\" param in src/features/page_view_event/aggregate/index.js can be removed in the future at such time\n // that it's no longer being used. For the browser agent, this is an unused flag system.\n\n});\n\nparcelRegister(\"hP1Bb\", function(module, exports) {\n\n$parcel$export(module.exports, \"timeToFirstByte\", function () { return $cf98708e3f8a6ed8$export$55966f8361587cf3; });\n/**\n * Copyright 2020-2025 New Relic, Inc. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */ \nvar $7CBaz = parcelRequire(\"7CBaz\");\n\nvar $bUgi3 = parcelRequire(\"bUgi3\");\n\nvar $dmOjl = parcelRequire(\"dmOjl\");\n\nvar $kF4Tt = parcelRequire(\"kF4Tt\");\nconst $cf98708e3f8a6ed8$export$55966f8361587cf3 = new (0, $dmOjl.VitalMetric)((0, $bUgi3.VITAL_NAMES).TIME_TO_FIRST_BYTE);\n/**\n * onTTFB is not supported in the following scenarios:\n * - in a non-browser scope\n * - in browsers that do not support PerformanceNavigationTiming API\n * - in an iOS browser\n * - cross-origin iframes specifically in firefox and safari\n */ if ((0, $7CBaz.isBrowserScope) && typeof PerformanceNavigationTiming !== 'undefined' && !(0, $7CBaz.isiOS) && window === window.parent) (0, $kF4Tt.onTTFB)(({ value: value, attribution: attribution })=>{\n    if ($cf98708e3f8a6ed8$export$55966f8361587cf3.isValid) return;\n    $cf98708e3f8a6ed8$export$55966f8361587cf3.update({\n        value: value,\n        attrs: {\n            navigationEntry: attribution.navigationEntry\n        }\n    });\n});\nelse if (!$cf98708e3f8a6ed8$export$55966f8361587cf3.isValid) {\n    const entry = {};\n    // convert real timestamps to relative timestamps to match web-vitals behavior\n    for(let key in (0, $7CBaz.globalScope)?.performance?.timing || {})entry[key] = Math.max((0, $7CBaz.globalScope)?.performance?.timing[key] - (0, $7CBaz.originTime), 0);\n    // ttfb is equiv to document's responseStart property in timing API --> https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/responseStart\n    $cf98708e3f8a6ed8$export$55966f8361587cf3.update({\n        value: entry.responseStart,\n        attrs: {\n            navigationEntry: entry\n        }\n    });\n}\n\n});\n\nparcelRegister(\"jL9ao\", function(module, exports) {\n\n$parcel$export(module.exports, \"TimeKeeper\", function () { return $e62984692c2c61c4$export$ab19517904b64359; });\n/**\n * Copyright 2020-2025 New Relic, Inc. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */ \nvar $7CBaz = parcelRequire(\"7CBaz\");\nclass $e62984692c2c61c4$export$ab19517904b64359 {\n    /**\n   * Pointer to the current agent session if it exists.\n   * @type {import('../session/session-entity').SessionEntity}\n   */ #session;\n    /**\n   * Represents the browser origin time corrected to NR server time.\n   * @type {number}\n   */ #correctedOriginTime;\n    /**\n   * Represents the difference in milliseconds between the calculated NR server time and\n   * the local time.\n   * @type {number}\n   */ #localTimeDiff;\n    /**\n   * Represents whether the timekeeper is in a state that it can accurately convert\n   * timestamps.\n   * @type {boolean}\n   */ #ready = false;\n    constructor(sessionObj){\n        this.#session = sessionObj;\n        this.processStoredDiff();\n    }\n    get ready() {\n        return this.#ready;\n    }\n    get correctedOriginTime() {\n        return this.#correctedOriginTime;\n    }\n    get localTimeDiff() {\n        return this.#localTimeDiff;\n    }\n    /**\n   * Process a rum request to calculate NR server time.\n   * @param rumRequest {XMLHttpRequest} The xhr for the rum request\n   * @param startTime {number} The start time of the RUM request\n   * @param endTime {number} The end time of the RUM request\n   * @param nrServerTime {number} the unix number value of the NR server time in MS, returned in the RUM request body\n   */ processRumRequest(rumRequest, startTime, endTime, nrServerTime) {\n        this.processStoredDiff(); // Check session entity for stored time diff\n        if (this.#ready) return; // Server time calculated from session entity\n        if (!nrServerTime) throw new Error('nrServerTime not found');\n        const medianRumOffset = (endTime - startTime) / 2;\n        const serverOffset = startTime + medianRumOffset;\n        // Corrected page origin time\n        this.#correctedOriginTime = Math.floor(nrServerTime - serverOffset);\n        this.#localTimeDiff = (0, $7CBaz.originTime) - this.#correctedOriginTime;\n        if (isNaN(this.#correctedOriginTime)) throw new Error('Failed to correct browser time to server time');\n        this.#session?.write({\n            serverTimeDiff: this.#localTimeDiff\n        });\n        this.#ready = true;\n    }\n    /**\n   * Converts a page origin relative time to an absolute timestamp\n   * using the user's local clock.\n   * @param relativeTime {number} The relative time of the event in milliseconds\n   * @returns {number} Corrected unix/epoch timestamp\n   */ convertRelativeTimestamp(relativeTime) {\n        return (0, $7CBaz.originTime) + relativeTime;\n    }\n    /**\n   * Converts an absolute timestamp to a relative timestamp using the\n   * user's local clock.\n   * @param timestamp\n   * @returns {number}\n   */ convertAbsoluteTimestamp(timestamp) {\n        return timestamp - (0, $7CBaz.originTime);\n    }\n    /**\n   * Corrects an absolute timestamp to NR server time.\n   * @param timestamp {number} The unix/epoch timestamp of the event with milliseconds\n   * @return {number} Corrected unix/epoch timestamp\n   */ correctAbsoluteTimestamp(timestamp) {\n        return timestamp - this.#localTimeDiff;\n    }\n    /**\n   * Corrects relative timestamp to NR server time (epoch).\n   * @param {DOMHighResTimeStamp} relativeTime\n   * @returns {number}\n   */ correctRelativeTimestamp(relativeTime) {\n        return this.correctAbsoluteTimestamp(this.convertRelativeTimestamp(relativeTime));\n    }\n    /** Process the session entity and use the info to set the main time calculations if present */ processStoredDiff() {\n        if (this.#ready) return; // Time diff has already been calculated\n        const storedServerTimeDiff = this.#session?.read()?.serverTimeDiff;\n        if (typeof storedServerTimeDiff === 'number' && !isNaN(storedServerTimeDiff)) {\n            this.#localTimeDiff = storedServerTimeDiff;\n            this.#correctedOriginTime = (0, $7CBaz.originTime) - this.#localTimeDiff;\n            this.#ready = true;\n        }\n    }\n}\n\n});\n\nparcelRegister(\"jHSql\", function(module, exports) {\n\n$parcel$export(module.exports, \"applyFnToProps\", function () { return $e58c3fe7deaf7d4d$export$1091a5f4e456a123; });\n/**\n * Copyright 2020-2025 New Relic, Inc. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */ /**\n * Applies a function to properties of a specified type in an object, recursively.\n *\n * @param {Object} obj - The object to apply the function to.\n * @param {Function} fn - The function to apply to matching properties.\n * @param {string} [type='string'] - The type of properties to apply the function to.\n * @param {Array<string>} [ignoreKeys=[]] - The keys of properties to ignore and not modify.\n * @returns {Object} - The object with function recursively applied.\n */ function $e58c3fe7deaf7d4d$export$1091a5f4e456a123(obj, fn, type = 'string', ignoreKeys = []) {\n    if (!obj || typeof obj !== 'object') return obj;\n    Object.keys(obj).forEach((property)=>{\n        if (typeof obj[property] === 'object') $e58c3fe7deaf7d4d$export$1091a5f4e456a123(obj[property], fn, type, ignoreKeys);\n        else // eslint-disable-next-line valid-typeof\n        if (typeof obj[property] === type && !ignoreKeys.includes(property)) obj[property] = fn(obj[property]);\n    });\n    return obj;\n}\n\n});\n\n\n})();\n//# sourceMappingURL=aggregate.b7b32366.js.map\n","/**\n * Copyright 2020-2025 New Relic, Inc. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { globalScope, isBrowserScope, originTime } from '../../../common/constants/runtime';\nimport { addPT, addPN } from '../../../common/timing/nav-timing';\nimport { stringify } from '../../../common/util/stringify';\nimport { isValid } from '../../../common/config/info';\nimport * as CONSTANTS from '../constants';\nimport { getActivatedFeaturesFlags } from './initialized-features';\nimport { activateFeatures } from '../../../common/util/feature-flags';\nimport { warn } from '../../../common/util/console';\nimport { AggregateBase } from '../../utils/aggregate-base';\nimport { firstContentfulPaint } from '../../../common/vitals/first-contentful-paint';\nimport { firstPaint } from '../../../common/vitals/first-paint';\nimport { timeToFirstByte } from '../../../common/vitals/time-to-first-byte';\nimport { now } from '../../../common/timing/now';\nimport { TimeKeeper } from '../../../common/timing/time-keeper';\nimport { applyFnToProps } from '../../../common/util/traverse';\nimport { registerHandler } from '../../../common/event-emitter/register-handler';\nimport { isContainerAgentTarget } from '../../../common/util/target';\nexport class Aggregate extends AggregateBase {\n  static featureName = CONSTANTS.FEATURE_NAME;\n  constructor(agentRef) {\n    super(agentRef, CONSTANTS.FEATURE_NAME);\n    this.timeToFirstByte = 0;\n    this.firstByteToWindowLoad = 0; // our \"frontend\" duration\n    this.firstByteToDomContent = 0; // our \"dom processing\" duration\n\n    registerHandler('send-rum', (customAttibutes, target) => {\n      this.sendRum(customAttibutes, target);\n    }, this.featureName, this.ee);\n    if (!isValid(agentRef.info)) {\n      this.ee.abort();\n      return warn(43);\n    }\n    agentRef.runtime.timeKeeper = new TimeKeeper(agentRef.runtime.session);\n    if (isBrowserScope) {\n      timeToFirstByte.subscribe(({\n        value,\n        attrs\n      }) => {\n        const navEntry = attrs.navigationEntry;\n        this.timeToFirstByte = Math.max(value, this.timeToFirstByte);\n        this.firstByteToWindowLoad = Math.max(Math.round(navEntry.loadEventEnd - this.timeToFirstByte), this.firstByteToWindowLoad); // our \"frontend\" duration\n        this.firstByteToDomContent = Math.max(Math.round(navEntry.domContentLoadedEventEnd - this.timeToFirstByte), this.firstByteToDomContent); // our \"dom processing\" duration\n\n        this.sendRum();\n      });\n    } else {\n      // worker agent build does not get TTFB values, use default 0 values\n      this.sendRum();\n    }\n  }\n\n  /**\n   *\n   * @param {Function} cb A function to run once the RUM call has finished - Defaults to activateFeatures\n   * @param {*} customAttributes custom attributes to attach to the RUM call - Defaults to info.js\n   * @param {*} target The target to harvest to - Since we will not know the entityGuid before harvesting, this must be an object directly supplied from the info object or API, not an entityGuid string for lookup with the entityManager - Defaults to { licenseKey: this.agentRef.info.licenseKey, applicationID: this.agentRef.info.applicationID }\n   */\n  sendRum(customAttributes = this.agentRef.info.jsAttributes, target = {\n    licenseKey: this.agentRef.info.licenseKey,\n    applicationID: this.agentRef.info.applicationID\n  }) {\n    const info = this.agentRef.info;\n    const measures = {};\n    if (info.queueTime) measures.qt = info.queueTime;\n    if (info.applicationTime) measures.ap = info.applicationTime;\n\n    // These 3 values should've been recorded after load and before this func runs. They are part of the minimum required for PageView events to be created.\n    // Following PR #428, which demands that all agents send RUM call, these need to be sent even outside of the main window context where PerformanceTiming\n    // or PerformanceNavigationTiming do not exists. Hence, they'll be filled in by 0s instead in, for example, worker threads that still init the PVE module.\n    measures.be = this.timeToFirstByte;\n    measures.fe = this.firstByteToWindowLoad;\n    measures.dc = this.firstByteToDomContent;\n    const queryParameters = {\n      tt: info.ttGuid,\n      us: info.user,\n      ac: info.account,\n      pr: info.product,\n      af: getActivatedFeaturesFlags(this.agentIdentifier).join(','),\n      ...measures,\n      xx: info.extra,\n      ua: info.userAttributes,\n      at: info.atts\n    };\n    if (this.agentRef.runtime.session) queryParameters.fsh = Number(this.agentRef.runtime.session.isNew); // \"first session harvest\" aka RUM request or PageView event of a session\n\n    let body;\n    if (typeof customAttributes === 'object' && Object.keys(customAttributes).length > 0) {\n      body = applyFnToProps({\n        ja: customAttributes\n      }, this.obfuscator.obfuscateString.bind(this.obfuscator), 'string');\n    }\n    if (globalScope.performance) {\n      if (typeof PerformanceNavigationTiming !== 'undefined') {\n        // Navigation Timing level 2 API that replaced PerformanceTiming & PerformanceNavigation\n        const navTimingEntry = globalScope?.performance?.getEntriesByType('navigation')?.[0];\n        const perf = {\n          timing: addPT(originTime, navTimingEntry, {}),\n          navigation: addPN(navTimingEntry, {})\n        };\n        queryParameters.perf = stringify(perf);\n      } else if (typeof PerformanceTiming !== 'undefined') {\n        // Safari pre-15 did not support level 2 timing\n        const perf = {\n          timing: addPT(originTime, globalScope.performance.timing, {}, true),\n          navigation: addPN(globalScope.performance.navigation, {})\n        };\n        queryParameters.perf = stringify(perf);\n      }\n    }\n    queryParameters.fp = firstPaint.current.value;\n    queryParameters.fcp = firstContentfulPaint.current.value;\n    const timeKeeper = this.agentRef.runtime.timeKeeper;\n    if (timeKeeper?.ready) {\n      queryParameters.timestamp = Math.floor(timeKeeper.correctRelativeTimestamp(now()));\n    }\n    this.rumStartTime = now();\n    this.agentRef.runtime.harvester.triggerHarvestFor(this, {\n      directSend: {\n        targetApp: target,\n        payload: {\n          qs: queryParameters,\n          body\n        }\n      },\n      needResponse: true,\n      sendEmptyBody: true\n    });\n  }\n  postHarvestCleanup({\n    status,\n    responseText,\n    xhr,\n    targetApp\n  }) {\n    const rumEndTime = now();\n    let app, flags;\n    try {\n      ({\n        app,\n        ...flags\n      } = JSON.parse(responseText));\n      this.processEntities(app.agents, targetApp);\n    } catch (error) {\n      // wont set entity stuff here, if main agent will later abort, if registered agent, nothing will happen\n      warn(53, error);\n    }\n\n    /** Only run agent-wide side-effects if the harvest was for the main agent */\n    if (!isContainerAgentTarget(targetApp, this.agentRef)) return;\n    if (status >= 400 || status === 0) {\n      warn(18, status);\n      // Adding retry logic for the rum call will be a separate change; this.blocked will need to be changed since that prevents another triggerHarvestFor()\n      this.ee.abort();\n      return;\n    }\n    try {\n      // will do nothing if already done\n      this.agentRef.runtime.timeKeeper.processRumRequest(xhr, this.rumStartTime, rumEndTime, app.nrServerTime);\n      if (!this.agentRef.runtime.timeKeeper.ready) throw new Error('TimeKeeper not ready');\n    } catch (error) {\n      this.ee.abort();\n      warn(17, error);\n      return;\n    }\n\n    // set the agent runtime objects that require the rum response or entity guid\n    if (!Object.keys(this.agentRef.runtime.appMetadata).length) this.agentRef.runtime.appMetadata = app;\n    this.drain();\n    this.agentRef.runtime.harvester.startTimer();\n    activateFeatures(flags, this.agentRef);\n  }\n  processEntities(entities, targetApp) {\n    if (!entities || !targetApp) return;\n    entities.forEach(agent => {\n      const entityManager = this.agentRef.runtime.entityManager;\n      const entityGuid = agent.entityGuid;\n      const entity = entityManager.get(entityGuid);\n      if (entity) return; // already processed\n\n      if (isContainerAgentTarget(targetApp, this.agentRef)) {\n        entityManager.setDefaultEntity({\n          ...targetApp,\n          entityGuid\n        });\n      }\n      entityManager.set(agent.entityGuid, {\n        ...targetApp,\n        entityGuid\n      });\n    });\n  }\n}","/**\n * Copyright 2020-2025 New Relic, Inc. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n// We don't use JSON.stringify directly on the performance timing data for these reasons:\n// * Chrome has extra data in the performance object that we don't want to send all the time (wasteful)\n// * Firefox fails to stringify the native object due to - http://code.google.com/p/v8/issues/detail?id=1223\n// * The variable names are long and wasteful to transmit\n\n// Add Performance Timing values to the given object.\n// * Values are written relative to an offset to reduce their length (i.e. number of characters).\n// * The offset is sent with the data\n// * 0's are not included unless the value is a 'relative zero'\n//\n\nvar START = 'Start';\nvar END = 'End';\nvar UNLOAD_EVENT = 'unloadEvent';\nvar REDIRECT = 'redirect';\nvar DOMAIN_LOOKUP = 'domainLookup';\nvar ONNECT = 'onnect';\nvar REQUEST = 'request';\nvar RESPONSE = 'response';\nvar LOAD_EVENT = 'loadEvent';\nvar DOM_CONTENT_LOAD_EVENT = 'domContentLoadedEvent';\nexport const navTimingValues = [];\nfunction getPntType(type) {\n  if (typeof type === 'number') return type;\n  const types = {\n    navigate: undefined,\n    reload: 1,\n    back_forward: 2,\n    prerender: 3\n  };\n  return types[type];\n}\nexport function addPT(offset, pt, v = {}, isL1Api = false) {\n  if (!pt) return;\n  v.of = offset;\n  handleValue(v.of, v, 'n', true);\n  handleValue(pt[UNLOAD_EVENT + START], v, 'u', isL1Api);\n  handleValue(pt[REDIRECT + START], v, 'r', isL1Api);\n  handleValue(pt[UNLOAD_EVENT + END], v, 'ue', isL1Api);\n  handleValue(pt[REDIRECT + END], v, 're', isL1Api);\n  handleValue(pt['fetch' + START], v, 'f', isL1Api);\n  handleValue(pt[DOMAIN_LOOKUP + START], v, 'dn', isL1Api);\n  handleValue(pt[DOMAIN_LOOKUP + END], v, 'dne', isL1Api);\n  handleValue(pt['c' + ONNECT + START], v, 'c', isL1Api);\n  handleValue(pt['secureC' + ONNECT + 'ion' + START], v, 's', isL1Api);\n  handleValue(pt['c' + ONNECT + END], v, 'ce', isL1Api);\n  handleValue(pt[REQUEST + START], v, 'rq', isL1Api);\n  handleValue(pt[RESPONSE + START], v, 'rp', isL1Api);\n  handleValue(pt[RESPONSE + END], v, 'rpe', isL1Api);\n  handleValue(pt.domLoading, v, 'dl', isL1Api);\n  handleValue(pt.domInteractive, v, 'di', isL1Api);\n  handleValue(pt[DOM_CONTENT_LOAD_EVENT + START], v, 'ds', isL1Api);\n  handleValue(pt[DOM_CONTENT_LOAD_EVENT + END], v, 'de', isL1Api);\n  handleValue(pt.domComplete, v, 'dc', isL1Api);\n  handleValue(pt[LOAD_EVENT + START], v, 'l', isL1Api);\n  handleValue(pt[LOAD_EVENT + END], v, 'le', isL1Api);\n  return v;\n}\n\n// Add Performance Navigation values to the given object\nexport function addPN(pn, v) {\n  handleValue(getPntType(pn.type), v, 'ty');\n  handleValue(pn.redirectCount, v, 'rc');\n  return v;\n}\n\n/**\n * By side effect, this modifies 'obj' with a mapping of the 'prop' provided to a 'value', and invalid values are not added.\n * On the other hand, the local navTimingValues array gets the value appended if valid and 'undefined' appended if invalid, regardless.\n */\nfunction handleValue(value, obj, prop, isOldApi) {\n  /*\n  For L2 Timing API, the value will already be a relative-to-previous-document DOMHighResTimeStamp.\n  For L1 (deprecated) Timing, the value is an UNIX epoch timestamp, which we will convert to a relative time using our offset.\n  PNT.type is reported as undefined, 1, 2, etc -- note that zero-value properties will be recorded as 'undefined', however DEM interprets undefined \"types\" as \"navigate\"\n  */\n  if (typeof value === 'number' && value > 0) {\n    // note that zero-value properties will be recorded as 'undefined'\n    if (isOldApi) {\n      const offset = obj?.of > 0 ? obj.of : 0; // expect an epoch timestamp, if called by addPT\n      value = Math.max(value - offset, 0);\n    }\n    value = Math.round(value);\n    obj[prop] = value;\n    navTimingValues.push(value);\n  } else navTimingValues.push(undefined);\n}","/**\n * Copyright 2020-2025 New Relic, Inc. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { FEATURE_NAMES } from '../../../loaders/features/features';\nimport { gosNREUM } from '../../../common/window/nreum';\n\n/**\n * Get an array of flags required by downstream (NR UI) based on the features initialized in this agent\n * (aka what is running on the page).\n * @param {String} agentId - the ID of the initialized agent on the page, mapping to the one under the global 'newrelic' object\n * @returns {String[]} Up to 5 short strings corresponding to ingest mapping of features.\n */\nexport function getActivatedFeaturesFlags(agentId) {\n  const flagArr = [];\n  const newrelic = gosNREUM();\n  try {\n    Object.keys(newrelic.initializedAgents[agentId].features).forEach(featName => {\n      switch (featName) {\n        case FEATURE_NAMES.ajax:\n          flagArr.push('xhr');\n          break;\n        case FEATURE_NAMES.jserrors:\n          flagArr.push('err');\n          break;\n        case FEATURE_NAMES.genericEvents:\n          flagArr.push('ins');\n          break;\n        case FEATURE_NAMES.sessionTrace:\n          flagArr.push('stn');\n          break;\n        case FEATURE_NAMES.softNav:\n        case FEATURE_NAMES.spa:\n          flagArr.push('spa');\n          break;\n      }\n    });\n  } catch (e) {}\n  return flagArr;\n}\n\n// Note: this module and the \"af\" param in src/features/page_view_event/aggregate/index.js can be removed in the future at such time\n// that it's no longer being used. For the browser agent, this is an unused flag system.","/**\n * Copyright 2020-2025 New Relic, Inc. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { globalScope, isBrowserScope, isiOS, originTime } from '../constants/runtime';\nimport { VITAL_NAMES } from './constants';\nimport { VitalMetric } from './vital-metric';\nimport { onTTFB } from 'web-vitals/attribution';\nexport const timeToFirstByte = new VitalMetric(VITAL_NAMES.TIME_TO_FIRST_BYTE);\n\n/**\n * onTTFB is not supported in the following scenarios:\n * - in a non-browser scope\n * - in browsers that do not support PerformanceNavigationTiming API\n * - in an iOS browser\n * - cross-origin iframes specifically in firefox and safari\n */\nif (isBrowserScope && typeof PerformanceNavigationTiming !== 'undefined' && !isiOS && window === window.parent) {\n  onTTFB(({\n    value,\n    attribution\n  }) => {\n    if (timeToFirstByte.isValid) return;\n    timeToFirstByte.update({\n      value,\n      attrs: {\n        navigationEntry: attribution.navigationEntry\n      }\n    });\n  });\n} else {\n  if (!timeToFirstByte.isValid) {\n    const entry = {};\n    // convert real timestamps to relative timestamps to match web-vitals behavior\n    for (let key in globalScope?.performance?.timing || {}) entry[key] = Math.max(globalScope?.performance?.timing[key] - originTime, 0);\n\n    // ttfb is equiv to document's responseStart property in timing API --> https://developer.mozilla.org/en-US/docs/Web/API/PerformanceTiming/responseStart\n    timeToFirstByte.update({\n      value: entry.responseStart,\n      attrs: {\n        navigationEntry: entry\n      }\n    });\n  }\n}","/**\n * Copyright 2020-2025 New Relic, Inc. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { originTime } from '../constants/runtime';\n\n/**\n * Class used to adjust the timestamp of harvested data to New Relic server time. This\n * is done by tracking the performance timings of the RUM call and applying a calculation\n * to the harvested data event offset time.\n */\nexport class TimeKeeper {\n  /**\n   * Pointer to the current agent session if it exists.\n   * @type {import('../session/session-entity').SessionEntity}\n   */\n  #session;\n\n  /**\n   * Represents the browser origin time corrected to NR server time.\n   * @type {number}\n   */\n  #correctedOriginTime;\n\n  /**\n   * Represents the difference in milliseconds between the calculated NR server time and\n   * the local time.\n   * @type {number}\n   */\n  #localTimeDiff;\n\n  /**\n   * Represents whether the timekeeper is in a state that it can accurately convert\n   * timestamps.\n   * @type {boolean}\n   */\n  #ready = false;\n  constructor(sessionObj) {\n    this.#session = sessionObj;\n    this.processStoredDiff();\n  }\n  get ready() {\n    return this.#ready;\n  }\n  get correctedOriginTime() {\n    return this.#correctedOriginTime;\n  }\n  get localTimeDiff() {\n    return this.#localTimeDiff;\n  }\n\n  /**\n   * Process a rum request to calculate NR server time.\n   * @param rumRequest {XMLHttpRequest} The xhr for the rum request\n   * @param startTime {number} The start time of the RUM request\n   * @param endTime {number} The end time of the RUM request\n   * @param nrServerTime {number} the unix number value of the NR server time in MS, returned in the RUM request body\n   */\n  processRumRequest(rumRequest, startTime, endTime, nrServerTime) {\n    this.processStoredDiff(); // Check session entity for stored time diff\n    if (this.#ready) return; // Server time calculated from session entity\n\n    if (!nrServerTime) throw new Error('nrServerTime not found');\n    const medianRumOffset = (endTime - startTime) / 2;\n    const serverOffset = startTime + medianRumOffset;\n\n    // Corrected page origin time\n    this.#correctedOriginTime = Math.floor(nrServerTime - serverOffset);\n    this.#localTimeDiff = originTime - this.#correctedOriginTime;\n    if (isNaN(this.#correctedOriginTime)) {\n      throw new Error('Failed to correct browser time to server time');\n    }\n    this.#session?.write({\n      serverTimeDiff: this.#localTimeDiff\n    });\n    this.#ready = true;\n  }\n\n  /**\n   * Converts a page origin relative time to an absolute timestamp\n   * using the user's local clock.\n   * @param relativeTime {number} The relative time of the event in milliseconds\n   * @returns {number} Corrected unix/epoch timestamp\n   */\n  convertRelativeTimestamp(relativeTime) {\n    return originTime + relativeTime;\n  }\n\n  /**\n   * Converts an absolute timestamp to a relative timestamp using the\n   * user's local clock.\n   * @param timestamp\n   * @returns {number}\n   */\n  convertAbsoluteTimestamp(timestamp) {\n    return timestamp - originTime;\n  }\n\n  /**\n   * Corrects an absolute timestamp to NR server time.\n   * @param timestamp {number} The unix/epoch timestamp of the event with milliseconds\n   * @return {number} Corrected unix/epoch timestamp\n   */\n  correctAbsoluteTimestamp(timestamp) {\n    return timestamp - this.#localTimeDiff;\n  }\n\n  /**\n   * Corrects relative timestamp to NR server time (epoch).\n   * @param {DOMHighResTimeStamp} relativeTime\n   * @returns {number}\n   */\n  correctRelativeTimestamp(relativeTime) {\n    return this.correctAbsoluteTimestamp(this.convertRelativeTimestamp(relativeTime));\n  }\n\n  /** Process the session entity and use the info to set the main time calculations if present */\n  processStoredDiff() {\n    if (this.#ready) return; // Time diff has already been calculated\n\n    const storedServerTimeDiff = this.#session?.read()?.serverTimeDiff;\n    if (typeof storedServerTimeDiff === 'number' && !isNaN(storedServerTimeDiff)) {\n      this.#localTimeDiff = storedServerTimeDiff;\n      this.#correctedOriginTime = originTime - this.#localTimeDiff;\n      this.#ready = true;\n    }\n  }\n}","/**\n * Copyright 2020-2025 New Relic, Inc. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Applies a function to properties of a specified type in an object, recursively.\n *\n * @param {Object} obj - The object to apply the function to.\n * @param {Function} fn - The function to apply to matching properties.\n * @param {string} [type='string'] - The type of properties to apply the function to.\n * @param {Array<string>} [ignoreKeys=[]] - The keys of properties to ignore and not modify.\n * @returns {Object} - The object with function recursively applied.\n */\nexport function applyFnToProps(obj, fn, type = 'string', ignoreKeys = []) {\n  if (!obj || typeof obj !== 'object') return obj;\n  Object.keys(obj).forEach(property => {\n    if (typeof obj[property] === 'object') {\n      applyFnToProps(obj[property], fn, type, ignoreKeys);\n    } else {\n      // eslint-disable-next-line valid-typeof\n      if (typeof obj[property] === type && !ignoreKeys.includes(property)) obj[property] = fn(obj[property]);\n    }\n  });\n  return obj;\n}"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRequire","$parcel$global","globalThis","self","window","global","parcelRegister","register","module","exports","$866da95e412c1e33$export$b9601df20779e14a","$7CBaz","$6H82V","$gSI6b","$4qjOv","$95KVp","$6cMq7","$cARWO","$73gWV","$6Lc7k","$27uK3","$kI9nw","$hP1Bb","$7nvKd","$jL9ao","$jHSql","$8auZx","$2cGfe","AggregateBase","featureName","FEATURE_NAME","constructor","agentRef","timeToFirstByte","firstByteToWindowLoad","firstByteToDomContent","registerHandler","customAttibutes","target","sendRum","ee","isValid","info","abort","warn","runtime","timeKeeper","TimeKeeper","session","isBrowserScope","subscribe","value","attrs","navEntry","navigationEntry","Math","max","round","loadEventEnd","domContentLoadedEventEnd","customAttributes","jsAttributes","licenseKey","applicationID","body","measures","queueTime","qt","applicationTime","ap","be","fe","dc","queryParameters","tt","ttGuid","us","user","ac","account","pr","product","af","getActivatedFeaturesFlags","agentIdentifier","join","xx","extra","ua","userAttributes","at","atts","fsh","Number","isNew","keys","length","applyFnToProps","ja","obfuscator","obfuscateString","bind","globalScope","performance","PerformanceNavigationTiming","navTimingEntry","getEntriesByType","perf","timing","addPT","originTime","navigation","addPN","stringify","PerformanceTiming","fp","firstPaint","current","fcp","firstContentfulPaint","ready","timestamp","floor","correctRelativeTimestamp","now","rumStartTime","harvester","triggerHarvestFor","directSend","targetApp","payload","qs","needResponse","sendEmptyBody","postHarvestCleanup","status","responseText","xhr","app","flags","rumEndTime","JSON","parse","processEntities","agents","error","isContainerAgentTarget","processRumRequest","nrServerTime","Error","appMetadata","drain","startTimer","activateFeatures","entities","forEach","agent","entityManager","entityGuid","setDefaultEntity","$4dfd000ec77da785$export$2f44a866b65eb89b","$4dfd000ec77da785$export$4eecd77d9102a9b2","$4dfd000ec77da785$export$a47612ea3c40772d","$4dfd000ec77da785$var$START","$4dfd000ec77da785$var$UNLOAD_EVENT","$4dfd000ec77da785$var$REDIRECT","$4dfd000ec77da785$var$DOMAIN_LOOKUP","$4dfd000ec77da785$var$ONNECT","$4dfd000ec77da785$var$RESPONSE","$4dfd000ec77da785$var$LOAD_EVENT","$4dfd000ec77da785$var$DOM_CONTENT_LOAD_EVENT","offset","pt","isL1Api","of","$4dfd000ec77da785$var$handleValue","$4dfd000ec77da785$var$REQUEST","domLoading","domInteractive","domComplete","pn","type","types","navigate","undefined","reload","back_forward","prerender","redirectCount","obj","prop","isOldApi","push","$48496c4cc9a50774$export$2d079ebe16700cdd","$gUmiN","$7jrqI","agentId","flagArr","newrelic","gosNREUM","initializedAgents","features","featName","FEATURE_NAMES","ajax","jserrors","genericEvents","sessionTrace","softNav","spa","$cf98708e3f8a6ed8$export$55966f8361587cf3","$bUgi3","$dmOjl","$kF4Tt","VitalMetric","VITAL_NAMES","TIME_TO_FIRST_BYTE","isiOS","parent","onTTFB","attribution","update","entry","key","responseStart","$e62984692c2c61c4$export$ab19517904b64359","sessionObj","processStoredDiff","correctedOriginTime","localTimeDiff","rumRequest","startTime","endTime","isNaN","write","serverTimeDiff","convertRelativeTimestamp","relativeTime","convertAbsoluteTimestamp","correctAbsoluteTimestamp","storedServerTimeDiff","read","$e58c3fe7deaf7d4d$export$1091a5f4e456a123","fn","ignoreKeys","property","includes"],"version":3,"file":"aggregate.b7b32366.js.map"}
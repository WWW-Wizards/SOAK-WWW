{"mappings":"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","sources":["<anon>","node_modules/@newrelic/browser-agent/dist/esm/features/logging/aggregate/index.js","node_modules/@newrelic/browser-agent/dist/esm/features/logging/shared/log.js","node_modules/@newrelic/browser-agent/dist/esm/common/util/traverse.js"],"sourcesContent":["\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  var parcelRequire = $parcel$global[\"parcelRequire5e30\"];\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"lw6U3\", function(module, exports) {\n\n$parcel$export(module.exports, \"Aggregate\", function () { return $faa1f0efd08cdefa$export$b9601df20779e14a; });\n/**\n * Copyright 2020-2025 New Relic, Inc. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */ \nvar $4he1m = parcelRequire(\"4he1m\");\n\nvar $jkuUu = parcelRequire(\"jkuUu\");\n\nvar $8KO5M = parcelRequire(\"8KO5M\");\n\nvar $3DmF0 = parcelRequire(\"3DmF0\");\n\nvar $9RUUB = parcelRequire(\"9RUUB\");\n\nvar $55kzq = parcelRequire(\"55kzq\");\n\nvar $8FTye = parcelRequire(\"8FTye\");\n\nvar $hcIxM = parcelRequire(\"hcIxM\");\n\nvar $iNTSX = parcelRequire(\"iNTSX\");\n\nvar $hzcK4 = parcelRequire(\"hzcK4\");\n\nvar $44Lnf = parcelRequire(\"44Lnf\");\n\nvar $6bsRh = parcelRequire(\"6bsRh\");\n\nvar $1orxZ = parcelRequire(\"1orxZ\");\nclass $faa1f0efd08cdefa$export$b9601df20779e14a extends (0, $3DmF0.AggregateBase) {\n    static featureName = (0, $9RUUB.FEATURE_NAME);\n    constructor(agentRef){\n        super(agentRef, (0, $9RUUB.FEATURE_NAME));\n        this.isSessionTrackingEnabled = (0, $1orxZ.canEnableSessionTracking)(agentRef.init) && agentRef.runtime.session;\n        // The SessionEntity class can emit a message indicating the session was cleared and reset (expiry, inactivity). This feature must abort and never resume if that occurs.\n        this.ee.on((0, $44Lnf.SESSION_EVENTS).RESET, ()=>{\n            this.abort((0, $6bsRh.ABORT_REASONS).RESET);\n        });\n        this.ee.on((0, $44Lnf.SESSION_EVENTS).UPDATE, (type, data)=>{\n            if (this.blocked || type !== (0, $44Lnf.SESSION_EVENT_TYPES).CROSS_TAB) return;\n            if (this.loggingMode !== (0, $9RUUB.LOGGING_MODE).OFF && data.loggingMode === (0, $9RUUB.LOGGING_MODE).OFF) this.abort((0, $6bsRh.ABORT_REASONS).CROSS_TAB);\n            else this.loggingMode = data.loggingMode;\n        });\n        this.harvestOpts.raw = true;\n        this.waitForFlags([\n            'log'\n        ]).then(([loggingMode])=>{\n            const session = this.agentRef.runtime.session ?? {};\n            if (this.loggingMode === (0, $9RUUB.LOGGING_MODE).OFF || session.isNew && loggingMode === (0, $9RUUB.LOGGING_MODE).OFF) {\n                this.blocked = true;\n                this.deregisterDrain();\n                return;\n            }\n            if (session.isNew || !this.isSessionTrackingEnabled) this.updateLoggingMode(loggingMode);\n            else this.loggingMode = session.state.loggingMode;\n            /** emitted by instrument class (wrapped loggers) or the api methods directly */ (0, $4he1m.registerHandler)((0, $9RUUB.LOGGING_EVENT_EMITTER_CHANNEL), this.handleLog.bind(this), this.featureName, this.ee);\n            this.drain();\n            /** harvest immediately once started to purge pre-load logs collected */ agentRef.runtime.harvester.triggerHarvestFor(this);\n        });\n    }\n    updateLoggingMode(loggingMode) {\n        this.loggingMode = loggingMode;\n        this.syncWithSessionManager({\n            loggingMode: this.loggingMode\n        });\n    }\n    handleLog(timestamp, message, attributes = {}, level = (0, $9RUUB.LOG_LEVELS).INFO, targetEntityGuid) {\n        if (!this.agentRef.runtime.entityManager.get(targetEntityGuid)) return (0, $jkuUu.warn)(56, this.featureName);\n        if (this.blocked || !this.loggingMode) return;\n        if (!attributes || typeof attributes !== 'object') attributes = {};\n        if (typeof level === 'string') level = level.toUpperCase();\n        if (!(0, $8FTye.isValidLogLevel)(level)) return (0, $jkuUu.warn)(30, level);\n        if (this.loggingMode < ((0, $9RUUB.LOGGING_MODE)[level] || Infinity)) {\n            this.reportSupportabilityMetric('Logging/Event/Dropped/Sampling');\n            return;\n        }\n        try {\n            if (typeof message !== 'string') {\n                const stringified = (0, $8KO5M.stringify)(message);\n                /**\n           * Error instances convert to `{}` when stringified\n           * Symbol converts to '' when stringified\n           * other cases tbd\n           * */ if (!!stringified && stringified !== '{}') message = stringified;\n                else message = String(message);\n            }\n        } catch (err) {\n            (0, $jkuUu.warn)(16, message);\n            this.reportSupportabilityMetric('Logging/Event/Dropped/Casting');\n            return;\n        }\n        if (typeof message !== 'string' || !message) return (0, $jkuUu.warn)(32);\n        const log = new (0, $55kzq.Log)(Math.floor(this.agentRef.runtime.timeKeeper.correctRelativeTimestamp(timestamp)), message, attributes, level);\n        const logBytes = log.message.length + (0, $8KO5M.stringify)(log.attributes).length + log.level.length + 10; // timestamp == 10 chars\n        const failToHarvestMessage = 'Logging/Harvest/Failed/Seen';\n        if (logBytes > (0, $iNTSX.MAX_PAYLOAD_SIZE)) {\n            // cannot possibly send this, even with an empty buffer\n            this.reportSupportabilityMetric(failToHarvestMessage, logBytes);\n            (0, $jkuUu.warn)(31, log.message.slice(0, 25) + '...');\n            return;\n        }\n        if (this.events.wouldExceedMaxSize(logBytes, targetEntityGuid)) {\n            this.reportSupportabilityMetric('Logging/Harvest/Early/Seen', this.events.byteSize() + logBytes);\n            this.agentRef.runtime.harvester.triggerHarvestFor(this, {\n                targetEntityGuid: targetEntityGuid\n            }); // force a harvest synchronously to try adding again\n        }\n        if (!this.events.add(log, targetEntityGuid)) {\n            // still failed after a harvest attempt despite not being too large would mean harvest failed with options.retry\n            this.reportSupportabilityMetric(failToHarvestMessage, logBytes);\n            (0, $jkuUu.warn)(31, log.message.slice(0, 25) + '...');\n        } else this.reportSupportabilityMetric('Logging/Event/Added/Seen');\n    }\n    serializer(eventBuffer, targetEntityGuid) {\n        const target = this.agentRef.runtime.entityManager.get(targetEntityGuid);\n        const sessionEntity = this.agentRef.runtime.session;\n        return [\n            {\n                common: {\n                    /** Attributes in the `common` section are added to `all` logs generated in the payload */ attributes: {\n                        'entity.guid': target.entityGuid,\n                        // browser entity guid as provided API target OR the default from RUM response if not supplied\n                        ...sessionEntity && {\n                            session: sessionEntity.state.value || '0',\n                            // The session ID that we generate and keep across page loads\n                            hasReplay: sessionEntity.state.sessionReplayMode === 1 && (0, $hzcK4.isContainerAgentTarget)(target, this.agentRef),\n                            // True if a session replay recording is running\n                            hasTrace: sessionEntity.state.sessionTraceMode === 1 // True if a session trace recording is running\n                        },\n                        ptid: this.agentRef.runtime.ptid,\n                        // page trace id\n                        appId: target.applicationID || this.agentRef.info.applicationID,\n                        // Application ID from info object,\n                        standalone: Boolean(this.agentRef.info.sa),\n                        // copy paste (true) vs APM (false)\n                        agentVersion: this.agentRef.runtime.version,\n                        // browser agent version\n                        // The following 3 attributes are evaluated and dropped at ingest processing time and do not get stored on NRDB:\n                        'instrumentation.provider': 'browser',\n                        'instrumentation.version': this.agentRef.runtime.version,\n                        'instrumentation.name': this.agentRef.runtime.loaderType,\n                        // Custom attributes\n                        ...this.agentRef.info.jsAttributes\n                    }\n                },\n                /** logs section contains individual unique log entries */ logs: (0, $hcIxM.applyFnToProps)(eventBuffer, this.obfuscator.obfuscateString.bind(this.obfuscator), 'string')\n            }\n        ];\n    }\n    queryStringsBuilder(_, targetEntityGuid) {\n        const target = this.agentRef.runtime.entityManager.get(targetEntityGuid);\n        return {\n            browser_monitoring_key: target.licenseKey\n        };\n    }\n    /** Abort the feature, once aborted it will not resume */ abort(reason = {}) {\n        this.reportSupportabilityMetric(\"Logging/Abort/\".concat(reason.sm));\n        this.blocked = true;\n        if (this.events) {\n            this.events.clear();\n            this.events.clearSave();\n        }\n        this.updateLoggingMode((0, $9RUUB.LOGGING_MODE).OFF);\n        this.deregisterDrain();\n    }\n    syncWithSessionManager(state = {}) {\n        if (this.isSessionTrackingEnabled) this.agentRef.runtime.session.write(state);\n    }\n}\n\n});\nparcelRegister(\"55kzq\", function(module, exports) {\n\n$parcel$export(module.exports, \"Log\", function () { return $3b3d603cb20b9fbc$export$ce30dbb46644d06c; });\n/**\n * Copyright 2020-2025 New Relic, Inc. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */ \nvar $9EKMI = parcelRequire(\"9EKMI\");\n\nvar $jWywI = parcelRequire(\"jWywI\");\n\nvar $9RUUB = parcelRequire(\"9RUUB\");\nclass $3b3d603cb20b9fbc$export$ce30dbb46644d06c {\n    /** @type {long} the unix timestamp of the log event */ timestamp;\n    /** @type {string} the log message */ message;\n    /** @type {object} the object of attributes to be parsed by logging ingest into top-level properties */ attributes;\n    /** @type {'ERROR'|'TRACE'|'DEBUG'|'INFO'|'WARN'} the log type of the log */ level;\n    /**\n   * @param {number} timestamp - Unix timestamp\n   * @param {string} message - message string\n   * @param {object} attributes - other log event attributes\n   * @param {enum} level - Log level\n   */ constructor(timestamp, message, attributes = {}, level = (0, $9RUUB.LOG_LEVELS).INFO){\n        /** @type {long} */ this.timestamp = timestamp;\n        this.message = message;\n        this.attributes = {\n            ...attributes,\n            pageUrl: (0, $jWywI.cleanURL)('' + (0, $9EKMI.initialLocation))\n        };\n        this.level = level.toUpperCase();\n    }\n}\n\n});\n\nparcelRegister(\"hcIxM\", function(module, exports) {\n\n$parcel$export(module.exports, \"applyFnToProps\", function () { return $c8661c288403a270$export$1091a5f4e456a123; });\n/**\n * Copyright 2020-2025 New Relic, Inc. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */ /**\n * Applies a function to properties of a specified type in an object, recursively.\n *\n * @param {Object} obj - The object to apply the function to.\n * @param {Function} fn - The function to apply to matching properties.\n * @param {string} [type='string'] - The type of properties to apply the function to.\n * @param {Array<string>} [ignoreKeys=[]] - The keys of properties to ignore and not modify.\n * @returns {Object} - The object with function recursively applied.\n */ function $c8661c288403a270$export$1091a5f4e456a123(obj, fn, type = 'string', ignoreKeys = []) {\n    if (!obj || typeof obj !== 'object') return obj;\n    Object.keys(obj).forEach((property)=>{\n        if (typeof obj[property] === 'object') $c8661c288403a270$export$1091a5f4e456a123(obj[property], fn, type, ignoreKeys);\n        else // eslint-disable-next-line valid-typeof\n        if (typeof obj[property] === type && !ignoreKeys.includes(property)) obj[property] = fn(obj[property]);\n    });\n    return obj;\n}\n\n});\n\n\n\n//# sourceMappingURL=aggregate.321b8588.js.map\n","/**\n * Copyright 2020-2025 New Relic, Inc. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { registerHandler } from '../../../common/event-emitter/register-handler';\nimport { warn } from '../../../common/util/console';\nimport { stringify } from '../../../common/util/stringify';\nimport { AggregateBase } from '../../utils/aggregate-base';\nimport { FEATURE_NAME, LOGGING_EVENT_EMITTER_CHANNEL, LOG_LEVELS, LOGGING_MODE } from '../constants';\nimport { Log } from '../shared/log';\nimport { isValidLogLevel } from '../shared/utils';\nimport { applyFnToProps } from '../../../common/util/traverse';\nimport { MAX_PAYLOAD_SIZE } from '../../../common/constants/agent-constants';\nimport { isContainerAgentTarget } from '../../../common/util/target';\nimport { SESSION_EVENT_TYPES, SESSION_EVENTS } from '../../../common/session/constants';\nimport { ABORT_REASONS } from '../../session_replay/constants';\nimport { canEnableSessionTracking } from '../../utils/feature-gates';\nexport class Aggregate extends AggregateBase {\n  static featureName = FEATURE_NAME;\n  constructor(agentRef) {\n    super(agentRef, FEATURE_NAME);\n    this.isSessionTrackingEnabled = canEnableSessionTracking(agentRef.init) && agentRef.runtime.session;\n\n    // The SessionEntity class can emit a message indicating the session was cleared and reset (expiry, inactivity). This feature must abort and never resume if that occurs.\n    this.ee.on(SESSION_EVENTS.RESET, () => {\n      this.abort(ABORT_REASONS.RESET);\n    });\n    this.ee.on(SESSION_EVENTS.UPDATE, (type, data) => {\n      if (this.blocked || type !== SESSION_EVENT_TYPES.CROSS_TAB) return;\n      if (this.loggingMode !== LOGGING_MODE.OFF && data.loggingMode === LOGGING_MODE.OFF) this.abort(ABORT_REASONS.CROSS_TAB);else this.loggingMode = data.loggingMode;\n    });\n    this.harvestOpts.raw = true;\n    this.waitForFlags(['log']).then(([loggingMode]) => {\n      const session = this.agentRef.runtime.session ?? {};\n      if (this.loggingMode === LOGGING_MODE.OFF || session.isNew && loggingMode === LOGGING_MODE.OFF) {\n        this.blocked = true;\n        this.deregisterDrain();\n        return;\n      }\n      if (session.isNew || !this.isSessionTrackingEnabled) {\n        this.updateLoggingMode(loggingMode);\n      } else {\n        this.loggingMode = session.state.loggingMode;\n      }\n\n      /** emitted by instrument class (wrapped loggers) or the api methods directly */\n      registerHandler(LOGGING_EVENT_EMITTER_CHANNEL, this.handleLog.bind(this), this.featureName, this.ee);\n      this.drain();\n      /** harvest immediately once started to purge pre-load logs collected */\n      agentRef.runtime.harvester.triggerHarvestFor(this);\n    });\n  }\n  updateLoggingMode(loggingMode) {\n    this.loggingMode = loggingMode;\n    this.syncWithSessionManager({\n      loggingMode: this.loggingMode\n    });\n  }\n  handleLog(timestamp, message, attributes = {}, level = LOG_LEVELS.INFO, targetEntityGuid) {\n    if (!this.agentRef.runtime.entityManager.get(targetEntityGuid)) return warn(56, this.featureName);\n    if (this.blocked || !this.loggingMode) return;\n    if (!attributes || typeof attributes !== 'object') attributes = {};\n    if (typeof level === 'string') level = level.toUpperCase();\n    if (!isValidLogLevel(level)) return warn(30, level);\n    if (this.loggingMode < (LOGGING_MODE[level] || Infinity)) {\n      this.reportSupportabilityMetric('Logging/Event/Dropped/Sampling');\n      return;\n    }\n    try {\n      if (typeof message !== 'string') {\n        const stringified = stringify(message);\n        /**\n           * Error instances convert to `{}` when stringified\n           * Symbol converts to '' when stringified\n           * other cases tbd\n           * */\n        if (!!stringified && stringified !== '{}') message = stringified;else message = String(message);\n      }\n    } catch (err) {\n      warn(16, message);\n      this.reportSupportabilityMetric('Logging/Event/Dropped/Casting');\n      return;\n    }\n    if (typeof message !== 'string' || !message) return warn(32);\n    const log = new Log(Math.floor(this.agentRef.runtime.timeKeeper.correctRelativeTimestamp(timestamp)), message, attributes, level);\n    const logBytes = log.message.length + stringify(log.attributes).length + log.level.length + 10; // timestamp == 10 chars\n\n    const failToHarvestMessage = 'Logging/Harvest/Failed/Seen';\n    if (logBytes > MAX_PAYLOAD_SIZE) {\n      // cannot possibly send this, even with an empty buffer\n      this.reportSupportabilityMetric(failToHarvestMessage, logBytes);\n      warn(31, log.message.slice(0, 25) + '...');\n      return;\n    }\n    if (this.events.wouldExceedMaxSize(logBytes, targetEntityGuid)) {\n      this.reportSupportabilityMetric('Logging/Harvest/Early/Seen', this.events.byteSize() + logBytes);\n      this.agentRef.runtime.harvester.triggerHarvestFor(this, {\n        targetEntityGuid\n      }); // force a harvest synchronously to try adding again\n    }\n    if (!this.events.add(log, targetEntityGuid)) {\n      // still failed after a harvest attempt despite not being too large would mean harvest failed with options.retry\n      this.reportSupportabilityMetric(failToHarvestMessage, logBytes);\n      warn(31, log.message.slice(0, 25) + '...');\n    } else {\n      this.reportSupportabilityMetric('Logging/Event/Added/Seen');\n    }\n  }\n  serializer(eventBuffer, targetEntityGuid) {\n    const target = this.agentRef.runtime.entityManager.get(targetEntityGuid);\n    const sessionEntity = this.agentRef.runtime.session;\n    return [{\n      common: {\n        /** Attributes in the `common` section are added to `all` logs generated in the payload */\n        attributes: {\n          'entity.guid': target.entityGuid,\n          // browser entity guid as provided API target OR the default from RUM response if not supplied\n          ...(sessionEntity && {\n            session: sessionEntity.state.value || '0',\n            // The session ID that we generate and keep across page loads\n            hasReplay: sessionEntity.state.sessionReplayMode === 1 && isContainerAgentTarget(target, this.agentRef),\n            // True if a session replay recording is running\n            hasTrace: sessionEntity.state.sessionTraceMode === 1 // True if a session trace recording is running\n          }),\n          ptid: this.agentRef.runtime.ptid,\n          // page trace id\n          appId: target.applicationID || this.agentRef.info.applicationID,\n          // Application ID from info object,\n          standalone: Boolean(this.agentRef.info.sa),\n          // copy paste (true) vs APM (false)\n          agentVersion: this.agentRef.runtime.version,\n          // browser agent version\n          // The following 3 attributes are evaluated and dropped at ingest processing time and do not get stored on NRDB:\n          'instrumentation.provider': 'browser',\n          'instrumentation.version': this.agentRef.runtime.version,\n          'instrumentation.name': this.agentRef.runtime.loaderType,\n          // Custom attributes\n          ...this.agentRef.info.jsAttributes\n        }\n      },\n      /** logs section contains individual unique log entries */\n      logs: applyFnToProps(eventBuffer, this.obfuscator.obfuscateString.bind(this.obfuscator), 'string')\n    }];\n  }\n  queryStringsBuilder(_, targetEntityGuid) {\n    const target = this.agentRef.runtime.entityManager.get(targetEntityGuid);\n    return {\n      browser_monitoring_key: target.licenseKey\n    };\n  }\n\n  /** Abort the feature, once aborted it will not resume */\n  abort(reason = {}) {\n    this.reportSupportabilityMetric(\"Logging/Abort/\".concat(reason.sm));\n    this.blocked = true;\n    if (this.events) {\n      this.events.clear();\n      this.events.clearSave();\n    }\n    this.updateLoggingMode(LOGGING_MODE.OFF);\n    this.deregisterDrain();\n  }\n  syncWithSessionManager(state = {}) {\n    if (this.isSessionTrackingEnabled) {\n      this.agentRef.runtime.session.write(state);\n    }\n  }\n}","/**\n * Copyright 2020-2025 New Relic, Inc. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\nimport { initialLocation } from '../../../common/constants/runtime';\nimport { cleanURL } from '../../../common/url/clean-url';\nimport { LOG_LEVELS } from '../constants';\nexport class Log {\n  /** @type {long} the unix timestamp of the log event */\n  timestamp;\n  /** @type {string} the log message */\n  message;\n  /** @type {object} the object of attributes to be parsed by logging ingest into top-level properties */\n  attributes;\n  /** @type {'ERROR'|'TRACE'|'DEBUG'|'INFO'|'WARN'} the log type of the log */\n  level;\n\n  /**\n   * @param {number} timestamp - Unix timestamp\n   * @param {string} message - message string\n   * @param {object} attributes - other log event attributes\n   * @param {enum} level - Log level\n   */\n  constructor(timestamp, message, attributes = {}, level = LOG_LEVELS.INFO) {\n    /** @type {long} */\n    this.timestamp = timestamp;\n    this.message = message;\n    this.attributes = {\n      ...attributes,\n      pageUrl: cleanURL('' + initialLocation)\n    };\n    this.level = level.toUpperCase();\n  }\n}","/**\n * Copyright 2020-2025 New Relic, Inc. All rights reserved.\n * SPDX-License-Identifier: Apache-2.0\n */\n\n/**\n * Applies a function to properties of a specified type in an object, recursively.\n *\n * @param {Object} obj - The object to apply the function to.\n * @param {Function} fn - The function to apply to matching properties.\n * @param {string} [type='string'] - The type of properties to apply the function to.\n * @param {Array<string>} [ignoreKeys=[]] - The keys of properties to ignore and not modify.\n * @returns {Object} - The object with function recursively applied.\n */\nexport function applyFnToProps(obj, fn, type = 'string', ignoreKeys = []) {\n  if (!obj || typeof obj !== 'object') return obj;\n  Object.keys(obj).forEach(property => {\n    if (typeof obj[property] === 'object') {\n      applyFnToProps(obj[property], fn, type, ignoreKeys);\n    } else {\n      // eslint-disable-next-line valid-typeof\n      if (typeof obj[property] === type && !ignoreKeys.includes(property)) obj[property] = fn(obj[property]);\n    }\n  });\n  return obj;\n}"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","parcelRequire","$parcel$global","globalThis","self","window","global","parcelRegister","register","module","exports","$faa1f0efd08cdefa$export$b9601df20779e14a","$4he1m","$jkuUu","$8KO5M","$3DmF0","$9RUUB","$55kzq","$8FTye","$hcIxM","$iNTSX","$hzcK4","$44Lnf","$6bsRh","$1orxZ","AggregateBase","featureName","FEATURE_NAME","constructor","agentRef","isSessionTrackingEnabled","canEnableSessionTracking","init","runtime","session","ee","on","SESSION_EVENTS","RESET","abort","ABORT_REASONS","UPDATE","type","data","blocked","SESSION_EVENT_TYPES","CROSS_TAB","loggingMode","LOGGING_MODE","OFF","harvestOpts","raw","waitForFlags","then","isNew","deregisterDrain","updateLoggingMode","state","registerHandler","LOGGING_EVENT_EMITTER_CHANNEL","handleLog","bind","drain","harvester","triggerHarvestFor","syncWithSessionManager","timestamp","message","attributes","level","LOG_LEVELS","INFO","targetEntityGuid","entityManager","warn","toUpperCase","isValidLogLevel","Infinity","reportSupportabilityMetric","stringified","stringify","String","err","log","Log","Math","floor","timeKeeper","correctRelativeTimestamp","logBytes","length","failToHarvestMessage","MAX_PAYLOAD_SIZE","slice","events","wouldExceedMaxSize","byteSize","add","serializer","eventBuffer","target","sessionEntity","common","entityGuid","value","hasReplay","sessionReplayMode","isContainerAgentTarget","hasTrace","sessionTraceMode","ptid","appId","applicationID","info","standalone","Boolean","sa","agentVersion","version","loaderType","jsAttributes","logs","applyFnToProps","obfuscator","obfuscateString","queryStringsBuilder","_","browser_monitoring_key","licenseKey","reason","concat","sm","clear","clearSave","write","$3b3d603cb20b9fbc$export$ce30dbb46644d06c","$9EKMI","$jWywI","pageUrl","cleanURL","initialLocation","$c8661c288403a270$export$1091a5f4e456a123","obj","fn","ignoreKeys","keys","forEach","property","includes"],"version":3,"file":"aggregate.321b8588.js.map"}
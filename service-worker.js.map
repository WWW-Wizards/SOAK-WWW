{"mappings":"C,A,W,S,E,C,C,C,C,C,C,C,E,O,c,C,E,E,C,I,E,I,E,W,C,E,a,C,C,E,C,I,E,A,a,O,W,W,A,a,O,K,K,A,a,O,O,O,A,a,O,O,O,C,E,E,C,E,E,C,E,E,E,iB,A,O,I,A,C,E,S,C,E,G,K,E,O,C,C,E,C,O,C,G,K,E,C,I,E,C,C,E,A,Q,C,C,E,C,I,E,C,G,E,Q,C,C,E,O,C,C,E,C,E,E,I,C,E,O,C,E,E,O,E,E,O,A,C,I,E,A,M,uB,E,I,O,E,I,C,mB,C,C,E,Q,C,S,C,C,C,E,C,C,E,C,C,E,E,iB,C,G,I,E,E,Q,C,E,Q,S,C,C,C,E,E,S,I,E,E,S,E,S,I,E,E,S,E,E,S,E,E,S,E,S,I,E,E,S,E,S,I,E,E,SCUA,AAAA,CAAA,EAAA,EAAA,aAAY,AAAZ,EACE,CAAC,CAAA,QAAE,CAAO,CAAE,GAAK,AAAiB,aAAjB,EAAQ,IAAI,CAC7B,GAAI,CAAA,EAAA,EAAA,YAAW,AAAX,EAAa,CACf,UAAW,QACX,QAAS,CAAC,GAAI,CAAA,EAAA,EAAA,uBAAsB,AAAtB,EAAwB,CAAE,SAAU,CAAC,IAAI,AAAC,GAAG,AAC7D,IAIF,AAAA,CAAA,EAAA,EAAA,aAAY,AAAZ,EACE,CAAC,CAAA,IAAC,CAAG,CAAC,GACJ,AAAe,8BAAf,EAAI,MAAM,CACZ,GAAI,CAAA,EAAA,EAAA,oBAAmB,AAAnB,EAAqB,CACvB,UAAW,YACX,QAAS,CACP,GAAI,CAAA,EAAA,EAAA,uBAAsB,AAAtB,EAAwB,CAC1B,SAAU,CAAC,EAAG,IAAI,AACpB,GACD,AACH,IAIF,AAAA,CAAA,EAAA,EAAA,aAAY,AAAZ,EACE,CAAC,CAAA,QAAE,CAAO,CAAE,GACV,AAAwB,UAAxB,EAAQ,WAAW,EACnB,AAAwB,WAAxB,EAAQ,WAAW,EACnB,AAAwB,WAAxB,EAAQ,WAAW,CACrB,GAAI,CAAA,EAAA,EAAA,oBAAmB,AAAnB,EAAqB,CACvB,UAAW,SACX,QAAS,CACP,GAAI,CAAA,EAAA,EAAA,uBAAsB,AAAtB,EAAwB,CAC1B,SAAU,CAAC,IAAI,AACjB,GACD,AACH,IAIF,AAAA,CAAA,EAAA,EAAA,a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AAX,EAAa,6CAA8C,CACjE,OAAQ,EAAM,MAAM,AACxB,GAEJ,IAAM,EAAa,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAM,MAAM,EAAE,OAAO,CAAC,GAC1D,GAAI,EAAa,GACb,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,EAAM,MAAM,EAAE,MAAM,CAAC,EAAY,QAGlD,MAAM,GAAI,CAAA,EAAA,EAAA,YAAW,AAAX,EAAa,wCAE/B,CACJ,C,G,E,Q,S,C,C,C,E,E,E,O,C,iB,W,O,C,GCjYA,EAAA,SAEA,IAAM,EAAiB,AAAC,GAIb,AAHQ,IAAI,IAAI,OAAO,GAAM,SAAS,IAAI,EAGnC,IAAI,CAAC,OAAO,CAAC,AAAI,OAAO,CAAC,CAAC,EAAE,SAAS,MAAM,CAAA,CAAE,EAAG,G,G,E,Q,S,C,C,C,ECNlE,EAAA,S,E,Q,G,E,Q,S,C,C,C,ECAA,EAAA,S,E,Q,G,E,Q,S,C,C,C,E,E,E,O,C,a,W,O,A,E,S,U,A,G,E,E,O,C,e,W,O,A,E,S,Y,A,G,E,E,O,C,uB,W,O,A,E,S,oB,A,G,E,Q,G,E,Q,S,C,C,C,E,E,E,O,C,a,W,O,A,E,S,U,A,G,E,E,O,C,e,W,O,A,E,S,Y,A,G,E,E,O,C,uB,W,O,A,E,S,oB,A,GEAA,EAAA,S,E,S,E,S,E,S,E,S,E,S,E,S,E,Q,G,E,Q,S,C,C,C,E,E,E,O,C,a,W,O,C,GCAA,EAAA,S,E,S,I,E,E,S,E,E,S,E,S,E,QAqBA,OAAM,UAAmB,EAAA,QAAO,CAQ5B,MAAM,QAAQ,CAAO,CAAE,CAAO,CAAE,CAU5B,IACI,EADA,EAAW,MAAM,EAAQ,UAAU,CAAC,GAExC,GAAI,CAAC,EAKD,GAAI,CACA,EAAW,MAAM,EAAQ,gBAAgB,CAAC,EAC9C,CACA,MAAO,EAAK,CACJ,aAAe,OACf,CAAA,EAAQ,CADZ,CAGJ,CAuBJ,GAAI,CAAC,EACD,MAAM,GAAI,CAAA,EAAA,EAAA,YAAW,AAAX,EAAa,cAAe,CAAE,IAAK,EAAQ,GAAG,CAAE,MAAA,CAAM,GAEpE,OAAO,CACX,CACJ,C,G,E,Q,S,C,C,C,E,E,E,O,C,W,W,O,C,GCjFA,IAAA,EAAA,EAAA,S,E,E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EAC5E,IAAM,EAAqB,EAAY,EAAQ,GAAG,CAAE,GAEpD,GAAI,EAAQ,GAAG,GAAK,EAChB,OAAO,EAAM,KAAK,CAAC,EAAS,GAGhC,IAAM,EAAc,OAAO,MAAM,CAAC,OAAO,MAAM,CAAC,CAAC,EAAG,GAAe,CAAE,aAAc,CAAA,CAAK,GAExF,IAAK,IAAM,IADO,CAAA,MAAM,EAAM,IAAI,CAAC,EAAS,EAA5C,EAGI,GAAI,IADwB,EAAY,EAAS,GAAG,CAAE,GAElD,OAAO,EAAM,KAAK,CAAC,EAAU,EAIzC,C,E,E,O,C,yB,W,O,C,GArCA,EAAA,Q,G,E,Q,S,C,C,C,E,E,E,O,C,W,W,O,C,GCCA,EAAA,QAUA,OAAM,EAIF,aAAc,CACV,IAAI,CAAC,OAAO,CAAG,IAAI,QAAQ,CAAC,EAAS,KACjC,IAAI,CAAC,OAAO,CAAG,EACf,IAAI,CAAC,MAAM,CAAG,CAClB,EACJ,CACJ,C,G,E,Q,S,C,C,C,E,E,E,O,C,6B,W,O,C,GCpBA,EAAA,S,I,E,E,SAWA,eAAe,IAKX,IAAK,IAAM,KAAY,EAAA,mBAAkB,CACrC,MAAM,GAQd,C,E,Q,G,E,Q,S,C,C,C,E,E,E,O,C,sB,W,O,C,GCzBA,EAAA,SAKA,IAAM,EAAsB,IAAI,G,G,E,Q,S,C,C,C,ECIzB,SAAS,EAAQ,CAAE,EACtB,OAAO,IAAI,QAAQ,AAAC,GAAY,WAAW,EAAS,GACxD,C,E,E,O,C,U,W,O,C,GAZA,EAAA,Q,G,E,Q,S,C,C,C,ECLA,aAEA,GAAI,CACA,IAAI,CAAC,2BAA2B,EAAI,GACxC,CACA,MAAO,EAAG,CAAE,C,G,E,Q,S,C,C,C,ECCZ,EAAA,S,E,S,E,Q,G,E,Q,S,C,C,C,ECAA,EAAA,S,E,S,E,S,I,E,E,S,E,S,E,SAmBwB,EAAA,QAAO,A,G,E,Q,S,C,C,C,E,E,E,O,C,e,W,O,C,GCnB/B,EAAA,S,E,S,I,E,E,S,E,E,S,E,E,S,E,S,E,QAwBA,OAAM,UAAqB,EAAA,QAAO,CAoB9B,YAAY,EAAU,CAAC,CAAC,CAAE,CACtB,KAAK,CAAC,GAGF,AAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,AAAC,GAAM,oBAAqB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","sources":["<anon>","src/service-worker.js","node_modules/workbox-routing/index.mjs","node_modules/workbox-routing/index.js","node_modules/workbox-routing/NavigationRoute.js","node_modules/workbox-core/_private/assert.js","node_modules/workbox-core/_private/WorkboxError.js","node_modules/workbox-core/models/messages/messageGenerator.js","node_modules/workbox-core/models/messages/messages.js","node_modules/workbox-core/_version.js","node_modules/workbox-core/_private/logger.js","node_modules/workbox-routing/Route.js","node_modules/workbox-routing/utils/constants.js","node_modules/workbox-routing/_version.js","node_modules/workbox-routing/utils/normalizeHandler.js","node_modules/workbox-routing/RegExpRoute.js","node_modules/workbox-routing/registerRoute.js","node_modules/workbox-routing/utils/getOrCreateDefaultRouter.js","node_modules/workbox-routing/Router.js","node_modules/workbox-core/_private/getFriendlyURL.js","node_modules/workbox-routing/setCatchHandler.js","node_modules/workbox-routing/setDefaultHandler.js","node_modules/workbox-strategies/index.mjs","node_modules/workbox-strategies/index.js","node_modules/workbox-strategies/CacheFirst.js","node_modules/workbox-strategies/Strategy.js","node_modules/workbox-core/_private/cacheNames.js","node_modules/workbox-strategies/StrategyHandler.js","node_modules/workbox-core/_private/cacheMatchIgnoreParams.js","node_modules/workbox-core/_private/Deferred.js","node_modules/workbox-core/_private/executeQuotaErrorCallbacks.js","node_modules/workbox-core/models/quotaErrorCallbacks.js","node_modules/workbox-core/_private/timeout.js","node_modules/workbox-strategies/_version.js","node_modules/workbox-strategies/utils/messages.js","node_modules/workbox-strategies/CacheOnly.js","node_modules/workbox-strategies/NetworkFirst.js","node_modules/workbox-strategies/plugins/cacheOkAndOpaquePlugin.js","node_modules/workbox-strategies/NetworkOnly.js","node_modules/workbox-strategies/StaleWhileRevalidate.js","node_modules/workbox-cacheable-response/index.mjs","node_modules/workbox-cacheable-response/index.js","node_modules/workbox-cacheable-response/CacheableResponse.js","node_modules/workbox-cacheable-response/_version.js","node_modules/workbox-cacheable-response/CacheableResponsePlugin.js","node_modules/workbox-expiration/index.mjs","node_modules/workbox-expiration/index.js","node_modules/workbox-expiration/CacheExpiration.js","node_modules/workbox-core/_private/dontWaitFor.js","node_modules/workbox-expiration/models/CacheTimestampsModel.js","node_modules/idb/build/index.js","node_modules/idb/build/wrap-idb-value.js","node_modules/workbox-expiration/_version.js","node_modules/workbox-expiration/ExpirationPlugin.js","node_modules/workbox-core/registerQuotaErrorCallback.js"],"sourcesContent":["(function () {\n\nfunction $parcel$export(e, n, v, s) {\n  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});\n}\n\n      var $parcel$global =\n        typeof globalThis !== 'undefined'\n          ? globalThis\n          : typeof self !== 'undefined'\n          ? self\n          : typeof window !== 'undefined'\n          ? window\n          : typeof global !== 'undefined'\n          ? global\n          : {};\n  \nvar $parcel$modules = {};\nvar $parcel$inits = {};\n\nvar parcelRequire = $parcel$global[\"parcelRequire5e30\"];\n\nif (parcelRequire == null) {\n  parcelRequire = function(id) {\n    if (id in $parcel$modules) {\n      return $parcel$modules[id].exports;\n    }\n    if (id in $parcel$inits) {\n      var init = $parcel$inits[id];\n      delete $parcel$inits[id];\n      var module = {id: id, exports: {}};\n      $parcel$modules[id] = module;\n      init.call(module.exports, module, module.exports);\n      return module.exports;\n    }\n    var err = new Error(\"Cannot find module '\" + id + \"'\");\n    err.code = 'MODULE_NOT_FOUND';\n    throw err;\n  };\n\n  parcelRequire.register = function register(id, init) {\n    $parcel$inits[id] = init;\n  };\n\n  $parcel$global[\"parcelRequire5e30\"] = parcelRequire;\n}\n\nvar parcelRegister = parcelRequire.register;\nparcelRegister(\"fcCO2\", function(module, exports) {\nparcelRequire(\"ljpSy\");\nvar $9OrUn = parcelRequire(\"9OrUn\");\nparcelRequire(\"dO4ET\");\nvar $5TCrG = parcelRequire(\"5TCrG\");\nvar $azwmW = parcelRequire(\"azwmW\");\nvar $1MSXF = parcelRequire(\"1MSXF\");\nparcelRequire(\"e54Ah\");\nvar $fneqe = parcelRequire(\"fneqe\");\nparcelRequire(\"9C22Z\");\nvar $6cjo5 = parcelRequire(\"6cjo5\");\n// Cache page navigations that result only in 200 responses.\n(0, $9OrUn.registerRoute)(({ request: request })=>request.mode === 'navigate', new (0, $azwmW.NetworkFirst)({\n    cacheName: 'pages',\n    plugins: [\n        new (0, $fneqe.CacheableResponsePlugin)({\n            statuses: [\n                200\n            ]\n        })\n    ]\n}));\n// Cache dust api\n(0, $9OrUn.registerRoute)(({ url: url })=>url.origin === 'https://data.dust.events/', new (0, $1MSXF.StaleWhileRevalidate)({\n    cacheName: 'api-cache',\n    plugins: [\n        new (0, $fneqe.CacheableResponsePlugin)({\n            statuses: [\n                0,\n                200\n            ]\n        })\n    ]\n}));\n// Cache CSS, JS, and web worker requests.\n(0, $9OrUn.registerRoute)(({ request: request })=>request.destination === 'style' || request.destination === 'script' || request.destination === 'worker', new (0, $1MSXF.StaleWhileRevalidate)({\n    cacheName: 'assets',\n    plugins: [\n        new (0, $fneqe.CacheableResponsePlugin)({\n            statuses: [\n                200\n            ]\n        })\n    ]\n}));\n// Cache images.\n(0, $9OrUn.registerRoute)(({ request: request })=>request.destination === 'image', new (0, $5TCrG.CacheFirst)({\n    cacheName: 'images',\n    plugins: [\n        new (0, $fneqe.CacheableResponsePlugin)({\n            statuses: [\n                200\n            ]\n        }),\n        new (0, $6cjo5.ExpirationPlugin)({\n            maxEntries: 60,\n            maxAgeSeconds: 2592000\n        })\n    ]\n}));\n\n});\nparcelRegister(\"ljpSy\", function(module, exports) {\n$parcel$export(module.exports, \"registerRoute\", function () { return (parcelRequire(\"9OrUn\")).registerRoute; });\nparcelRequire(\"7PkT3\");\n\n});\nparcelRegister(\"7PkT3\", function(module, exports) {\n\n$parcel$export(module.exports, \"registerRoute\", function () { return (parcelRequire(\"9OrUn\")).registerRoute; });\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ \nvar $jyVaG = parcelRequire(\"jyVaG\");\n\nvar $1fQSB = parcelRequire(\"1fQSB\");\n\nvar $9OrUn = parcelRequire(\"9OrUn\");\n\nvar $b6cm1 = parcelRequire(\"b6cm1\");\n\nvar $dcfPL = parcelRequire(\"dcfPL\");\n\nvar $g4h9a = parcelRequire(\"g4h9a\");\n\nvar $xTLcq = parcelRequire(\"xTLcq\");\nparcelRequire(\"cAmLs\");\n\n});\nparcelRegister(\"jyVaG\", function(module, exports) {\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ parcelRequire(\"hdoOF\");\nparcelRequire(\"j4Ws3\");\n\nvar $b6cm1 = parcelRequire(\"b6cm1\");\nparcelRequire(\"cAmLs\");\n/**\n * NavigationRoute makes it easy to create a\n * {@link workbox-routing.Route} that matches for browser\n * [navigation requests]{@link https://developers.google.com/web/fundamentals/primers/service-workers/high-performance-loading#first_what_are_navigation_requests}.\n *\n * It will only match incoming Requests whose\n * {@link https://fetch.spec.whatwg.org/#concept-request-mode|mode}\n * is set to `navigate`.\n *\n * You can optionally only apply this route to a subset of navigation requests\n * by using one or both of the `denylist` and `allowlist` parameters.\n *\n * @memberof workbox-routing\n * @extends workbox-routing.Route\n */ class $e3dd8a513f9f325e$export$862778e4617eab43 extends (0, $b6cm1.Route) {\n    /**\n     * If both `denylist` and `allowlist` are provided, the `denylist` will\n     * take precedence and the request will not match this route.\n     *\n     * The regular expressions in `allowlist` and `denylist`\n     * are matched against the concatenated\n     * [`pathname`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/pathname}\n     * and [`search`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/search}\n     * portions of the requested URL.\n     *\n     * *Note*: These RegExps may be evaluated against every destination URL during\n     * a navigation. Avoid using\n     * [complex RegExps](https://github.com/GoogleChrome/workbox/issues/3077),\n     * or else your users may see delays when navigating your site.\n     *\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {Object} options\n     * @param {Array<RegExp>} [options.denylist] If any of these patterns match,\n     * the route will not handle the request (even if a allowlist RegExp matches).\n     * @param {Array<RegExp>} [options.allowlist=[/./]] If any of these patterns\n     * match the URL's pathname and search parameter, the route will handle the\n     * request (assuming the denylist doesn't match).\n     */ constructor(handler, { allowlist: allowlist = [\n        /./\n    ], denylist: denylist = [] } = {}){\n        super((options)=>this._match(options), handler);\n        this._allowlist = allowlist;\n        this._denylist = denylist;\n    }\n    /**\n     * Routes match handler.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {Request} options.request\n     * @return {boolean}\n     *\n     * @private\n     */ _match({ url: url, request: request }) {\n        if (request && request.mode !== 'navigate') return false;\n        const pathnameAndSearch = url.pathname + url.search;\n        for (const regExp of this._denylist){\n            if (regExp.test(pathnameAndSearch)) return false;\n        }\n        if (this._allowlist.some((regExp)=>regExp.test(pathnameAndSearch))) return true;\n        return false;\n    }\n}\n\n});\nparcelRegister(\"hdoOF\", function(module, exports) {\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ \nvar $bLao8 = parcelRequire(\"bLao8\");\nparcelRequire(\"j6K0f\");\n/*\n * This method throws if the supplied value is not an array.\n * The destructed values are required to produce a meaningful error for users.\n * The destructed and restructured object is so it's clear what is\n * needed.\n */ const $c886e690783988ae$var$isArray = (value, details)=>{\n    if (!Array.isArray(value)) throw new (0, $bLao8.WorkboxError)('not-an-array', details);\n};\nconst $c886e690783988ae$var$hasMethod = (object, expectedMethod, details)=>{\n    const type = typeof object[expectedMethod];\n    if (type !== 'function') {\n        details['expectedMethod'] = expectedMethod;\n        throw new (0, $bLao8.WorkboxError)('missing-a-method', details);\n    }\n};\nconst $c886e690783988ae$var$isType = (object, expectedType, details)=>{\n    if (typeof object !== expectedType) {\n        details['expectedType'] = expectedType;\n        throw new (0, $bLao8.WorkboxError)('incorrect-type', details);\n    }\n};\nconst $c886e690783988ae$var$isInstance = (object, // Need the general type to do the check later.\n// eslint-disable-next-line @typescript-eslint/ban-types\nexpectedClass, details)=>{\n    if (!(object instanceof expectedClass)) {\n        details['expectedClassName'] = expectedClass.name;\n        throw new (0, $bLao8.WorkboxError)('incorrect-class', details);\n    }\n};\nconst $c886e690783988ae$var$isOneOf = (value, validValues, details)=>{\n    if (!validValues.includes(value)) {\n        details['validValueDescription'] = `Valid values are ${JSON.stringify(validValues)}.`;\n        throw new (0, $bLao8.WorkboxError)('invalid-value', details);\n    }\n};\nconst $c886e690783988ae$var$isArrayOfClass = (value, // Need general type to do check later.\nexpectedClass, details)=>{\n    const error = new (0, $bLao8.WorkboxError)('not-array-of-class', details);\n    if (!Array.isArray(value)) throw error;\n    for (const item of value){\n        if (!(item instanceof expectedClass)) throw error;\n    }\n};\nconst $c886e690783988ae$export$a7a9523472993e97 = null;\n\n});\nparcelRegister(\"bLao8\", function(module, exports) {\n\n$parcel$export(module.exports, \"WorkboxError\", function () { return $88fc246318b599fa$export$86951c8e0bcb03a3; });\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ \nvar $888sT = parcelRequire(\"888sT\");\nparcelRequire(\"j6K0f\");\n/**\n * Workbox errors should be thrown with this class.\n * This allows use to ensure the type easily in tests,\n * helps developers identify errors from workbox\n * easily and allows use to optimise error\n * messages correctly.\n *\n * @private\n */ class $88fc246318b599fa$export$86951c8e0bcb03a3 extends Error {\n    /**\n     *\n     * @param {string} errorCode The error code that\n     * identifies this particular error.\n     * @param {Object=} details Any relevant arguments\n     * that will help developers identify issues should\n     * be added as a key on the context object.\n     */ constructor(errorCode, details){\n        const message = (0, $888sT.messageGenerator)(errorCode, details);\n        super(message);\n        this.name = errorCode;\n        this.details = details;\n    }\n}\n\n});\nparcelRegister(\"888sT\", function(module, exports) {\n\n$parcel$export(module.exports, \"messageGenerator\", function () { return $5eb5a309d70f6e0c$export$9b6405cf8a618e2b; });\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ \nvar $ajWG9 = parcelRequire(\"ajWG9\");\nparcelRequire(\"j6K0f\");\nconst $5eb5a309d70f6e0c$var$fallback = (code, ...args)=>{\n    let msg = code;\n    if (args.length > 0) msg += ` :: ${JSON.stringify(args)}`;\n    return msg;\n};\nconst $5eb5a309d70f6e0c$var$generatorFunction = (code, details = {})=>{\n    const message = (0, $ajWG9.messages)[code];\n    if (!message) throw new Error(`Unable to find message for code '${code}'.`);\n    return message(details);\n};\nconst $5eb5a309d70f6e0c$export$9b6405cf8a618e2b = $5eb5a309d70f6e0c$var$fallback;\n\n});\nparcelRegister(\"ajWG9\", function(module, exports) {\n\n$parcel$export(module.exports, \"messages\", function () { return $78393224cffdc873$export$defe85febe8b728c; });\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ parcelRequire(\"j6K0f\");\nconst $78393224cffdc873$export$defe85febe8b728c = {\n    'invalid-value': ({ paramName: paramName, validValueDescription: validValueDescription, value: value })=>{\n        if (!paramName || !validValueDescription) throw new Error(`Unexpected input to 'invalid-value' error.`);\n        return `The '${paramName}' parameter was given a value with an ` + `unexpected value. ${validValueDescription} Received a value of ` + `${JSON.stringify(value)}.`;\n    },\n    'not-an-array': ({ moduleName: moduleName, className: className, funcName: funcName, paramName: paramName })=>{\n        if (!moduleName || !className || !funcName || !paramName) throw new Error(`Unexpected input to 'not-an-array' error.`);\n        return `The parameter '${paramName}' passed into ` + `'${moduleName}.${className}.${funcName}()' must be an array.`;\n    },\n    'incorrect-type': ({ expectedType: expectedType, paramName: paramName, moduleName: moduleName, className: className, funcName: funcName })=>{\n        if (!expectedType || !paramName || !moduleName || !funcName) throw new Error(`Unexpected input to 'incorrect-type' error.`);\n        const classNameStr = className ? `${className}.` : '';\n        return `The parameter '${paramName}' passed into ` + `'${moduleName}.${classNameStr}` + `${funcName}()' must be of type ${expectedType}.`;\n    },\n    'incorrect-class': ({ expectedClassName: expectedClassName, paramName: paramName, moduleName: moduleName, className: className, funcName: funcName, isReturnValueProblem: isReturnValueProblem })=>{\n        if (!expectedClassName || !moduleName || !funcName) throw new Error(`Unexpected input to 'incorrect-class' error.`);\n        const classNameStr = className ? `${className}.` : '';\n        if (isReturnValueProblem) return `The return value from ` + `'${moduleName}.${classNameStr}${funcName}()' ` + `must be an instance of class ${expectedClassName}.`;\n        return `The parameter '${paramName}' passed into ` + `'${moduleName}.${classNameStr}${funcName}()' ` + `must be an instance of class ${expectedClassName}.`;\n    },\n    'missing-a-method': ({ expectedMethod: expectedMethod, paramName: paramName, moduleName: moduleName, className: className, funcName: funcName })=>{\n        if (!expectedMethod || !paramName || !moduleName || !className || !funcName) throw new Error(`Unexpected input to 'missing-a-method' error.`);\n        return `${moduleName}.${className}.${funcName}() expected the ` + `'${paramName}' parameter to expose a '${expectedMethod}' method.`;\n    },\n    'add-to-cache-list-unexpected-type': ({ entry: entry })=>{\n        return `An unexpected entry was passed to ` + `'workbox-precaching.PrecacheController.addToCacheList()' The entry ` + `'${JSON.stringify(entry)}' isn't supported. You must supply an array of ` + `strings with one or more characters, objects with a url property or ` + `Request objects.`;\n    },\n    'add-to-cache-list-conflicting-entries': ({ firstEntry: firstEntry, secondEntry: secondEntry })=>{\n        if (!firstEntry || !secondEntry) throw new Error(`Unexpected input to ` + `'add-to-cache-list-duplicate-entries' error.`);\n        return `Two of the entries passed to ` + `'workbox-precaching.PrecacheController.addToCacheList()' had the URL ` + `${firstEntry} but different revision details. Workbox is ` + `unable to cache and version the asset correctly. Please remove one ` + `of the entries.`;\n    },\n    'plugin-error-request-will-fetch': ({ thrownErrorMessage: thrownErrorMessage })=>{\n        if (!thrownErrorMessage) throw new Error(`Unexpected input to ` + `'plugin-error-request-will-fetch', error.`);\n        return `An error was thrown by a plugins 'requestWillFetch()' method. ` + `The thrown error message was: '${thrownErrorMessage}'.`;\n    },\n    'invalid-cache-name': ({ cacheNameId: cacheNameId, value: value })=>{\n        if (!cacheNameId) throw new Error(`Expected a 'cacheNameId' for error 'invalid-cache-name'`);\n        return `You must provide a name containing at least one character for ` + `setCacheDetails({${cacheNameId}: '...'}). Received a value of ` + `'${JSON.stringify(value)}'`;\n    },\n    'unregister-route-but-not-found-with-method': ({ method: method })=>{\n        if (!method) throw new Error(`Unexpected input to ` + `'unregister-route-but-not-found-with-method' error.`);\n        return `The route you're trying to unregister was not  previously ` + `registered for the method type '${method}'.`;\n    },\n    'unregister-route-route-not-registered': ()=>{\n        return `The route you're trying to unregister was not previously ` + `registered.`;\n    },\n    'queue-replay-failed': ({ name: name })=>{\n        return `Replaying the background sync queue '${name}' failed.`;\n    },\n    'duplicate-queue-name': ({ name: name })=>{\n        return `The Queue name '${name}' is already being used. ` + `All instances of backgroundSync.Queue must be given unique names.`;\n    },\n    'expired-test-without-max-age': ({ methodName: methodName, paramName: paramName })=>{\n        return `The '${methodName}()' method can only be used when the ` + `'${paramName}' is used in the constructor.`;\n    },\n    'unsupported-route-type': ({ moduleName: moduleName, className: className, funcName: funcName, paramName: paramName })=>{\n        return `The supplied '${paramName}' parameter was an unsupported type. ` + `Please check the docs for ${moduleName}.${className}.${funcName} for ` + `valid input types.`;\n    },\n    'not-array-of-class': ({ value: value, expectedClass: expectedClass, moduleName: moduleName, className: className, funcName: funcName, paramName: paramName })=>{\n        return `The supplied '${paramName}' parameter must be an array of ` + `'${expectedClass}' objects. Received '${JSON.stringify(value)},'. ` + `Please check the call to ${moduleName}.${className}.${funcName}() ` + `to fix the issue.`;\n    },\n    'max-entries-or-age-required': ({ moduleName: moduleName, className: className, funcName: funcName })=>{\n        return `You must define either config.maxEntries or config.maxAgeSeconds` + `in ${moduleName}.${className}.${funcName}`;\n    },\n    'statuses-or-headers-required': ({ moduleName: moduleName, className: className, funcName: funcName })=>{\n        return `You must define either config.statuses or config.headers` + `in ${moduleName}.${className}.${funcName}`;\n    },\n    'invalid-string': ({ moduleName: moduleName, funcName: funcName, paramName: paramName })=>{\n        if (!paramName || !moduleName || !funcName) throw new Error(`Unexpected input to 'invalid-string' error.`);\n        return `When using strings, the '${paramName}' parameter must start with ` + `'http' (for cross-origin matches) or '/' (for same-origin matches). ` + `Please see the docs for ${moduleName}.${funcName}() for ` + `more info.`;\n    },\n    'channel-name-required': ()=>{\n        return `You must provide a channelName to construct a ` + `BroadcastCacheUpdate instance.`;\n    },\n    'invalid-responses-are-same-args': ()=>{\n        return `The arguments passed into responsesAreSame() appear to be ` + `invalid. Please ensure valid Responses are used.`;\n    },\n    'expire-custom-caches-only': ()=>{\n        return `You must provide a 'cacheName' property when using the ` + `expiration plugin with a runtime caching strategy.`;\n    },\n    'unit-must-be-bytes': ({ normalizedRangeHeader: normalizedRangeHeader })=>{\n        if (!normalizedRangeHeader) throw new Error(`Unexpected input to 'unit-must-be-bytes' error.`);\n        return `The 'unit' portion of the Range header must be set to 'bytes'. ` + `The Range header provided was \"${normalizedRangeHeader}\"`;\n    },\n    'single-range-only': ({ normalizedRangeHeader: normalizedRangeHeader })=>{\n        if (!normalizedRangeHeader) throw new Error(`Unexpected input to 'single-range-only' error.`);\n        return `Multiple ranges are not supported. Please use a  single start ` + `value, and optional end value. The Range header provided was ` + `\"${normalizedRangeHeader}\"`;\n    },\n    'invalid-range-values': ({ normalizedRangeHeader: normalizedRangeHeader })=>{\n        if (!normalizedRangeHeader) throw new Error(`Unexpected input to 'invalid-range-values' error.`);\n        return `The Range header is missing both start and end values. At least ` + `one of those values is needed. The Range header provided was ` + `\"${normalizedRangeHeader}\"`;\n    },\n    'no-range-header': ()=>{\n        return `No Range header was found in the Request provided.`;\n    },\n    'range-not-satisfiable': ({ size: size, start: start, end: end })=>{\n        return `The start (${start}) and end (${end}) values in the Range are ` + `not satisfiable by the cached response, which is ${size} bytes.`;\n    },\n    'attempt-to-cache-non-get-request': ({ url: url, method: method })=>{\n        return `Unable to cache '${url}' because it is a '${method}' request and ` + `only 'GET' requests can be cached.`;\n    },\n    'cache-put-with-no-response': ({ url: url })=>{\n        return `There was an attempt to cache '${url}' but the response was not ` + `defined.`;\n    },\n    'no-response': ({ url: url, error: error })=>{\n        let message = `The strategy could not generate a response for '${url}'.`;\n        if (error) message += ` The underlying error is ${error}.`;\n        return message;\n    },\n    'bad-precaching-response': ({ url: url, status: status })=>{\n        return `The precaching request for '${url}' failed` + (status ? ` with an HTTP status of ${status}.` : `.`);\n    },\n    'non-precached-url': ({ url: url })=>{\n        return `createHandlerBoundToURL('${url}') was called, but that URL is ` + `not precached. Please pass in a URL that is precached instead.`;\n    },\n    'add-to-cache-list-conflicting-integrities': ({ url: url })=>{\n        return `Two of the entries passed to ` + `'workbox-precaching.PrecacheController.addToCacheList()' had the URL ` + `${url} with different integrity values. Please remove one of them.`;\n    },\n    'missing-precache-entry': ({ cacheName: cacheName, url: url })=>{\n        return `Unable to find a precached response in ${cacheName} for ${url}.`;\n    },\n    'cross-origin-copy-response': ({ origin: origin })=>{\n        return `workbox-core.copyResponse() can only be used with same-origin ` + `responses. It was passed a response with origin ${origin}.`;\n    },\n    'opaque-streams-source': ({ type: type })=>{\n        const message = `One of the workbox-streams sources resulted in an ` + `'${type}' response.`;\n        if (type === 'opaqueredirect') return `${message} Please do not use a navigation request that results ` + `in a redirect as a source.`;\n        return `${message} Please ensure your sources are CORS-enabled.`;\n    }\n};\n\n});\nparcelRegister(\"j6K0f\", function(module, exports) {\n\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:core:7.2.0'] && _();\n} catch (e) {}\n\n});\n\n\n\n\n\nparcelRegister(\"j4Ws3\", function(module, exports) {\n\n$parcel$export(module.exports, \"logger\", function () { return $de3bbb4d19c3a842$export$af88d00dbe7f521; });\n/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ parcelRequire(\"j6K0f\");\nconst $de3bbb4d19c3a842$export$af88d00dbe7f521 = null;\n\n});\n\nparcelRegister(\"b6cm1\", function(module, exports) {\n\n$parcel$export(module.exports, \"Route\", function () { return $8149d68d175b9cc3$export$e7b0ac011bb776c6; });\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ parcelRequire(\"hdoOF\");\n\nvar $7g2xp = parcelRequire(\"7g2xp\");\n\nvar $hMXVl = parcelRequire(\"hMXVl\");\nparcelRequire(\"cAmLs\");\n/**\n * A `Route` consists of a pair of callback functions, \"match\" and \"handler\".\n * The \"match\" callback determine if a route should be used to \"handle\" a\n * request by returning a non-falsy value if it can. The \"handler\" callback\n * is called when there is a match and should return a Promise that resolves\n * to a `Response`.\n *\n * @memberof workbox-routing\n */ class $8149d68d175b9cc3$export$e7b0ac011bb776c6 {\n    /**\n     * Constructor for Route class.\n     *\n     * @param {workbox-routing~matchCallback} match\n     * A callback function that determines whether the route matches a given\n     * `fetch` event by returning a non-falsy value.\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */ constructor(match, handler, method = (0, $7g2xp.defaultMethod)){\n        // These values are referenced directly by Router so cannot be\n        // altered by minificaton.\n        this.handler = (0, $hMXVl.normalizeHandler)(handler);\n        this.match = match;\n        this.method = method;\n    }\n    /**\n     *\n     * @param {workbox-routing-handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response\n     */ setCatchHandler(handler) {\n        this.catchHandler = (0, $hMXVl.normalizeHandler)(handler);\n    }\n}\n\n});\nparcelRegister(\"7g2xp\", function(module, exports) {\n\n$parcel$export(module.exports, \"defaultMethod\", function () { return $548bfeff9902e514$export$23aa776992c05e54; });\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ parcelRequire(\"cAmLs\");\nconst $548bfeff9902e514$export$23aa776992c05e54 = 'GET';\nconst $548bfeff9902e514$export$7ad73ab44ad732c0 = [\n    'DELETE',\n    'GET',\n    'HEAD',\n    'PATCH',\n    'POST',\n    'PUT'\n];\n\n});\nparcelRegister(\"cAmLs\", function(module, exports) {\n\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:routing:7.2.0'] && _();\n} catch (e) {}\n\n});\n\n\nparcelRegister(\"hMXVl\", function(module, exports) {\n\n$parcel$export(module.exports, \"normalizeHandler\", function () { return $cf356705827370b1$export$c3ccfd7381bc479; });\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ parcelRequire(\"hdoOF\");\nparcelRequire(\"cAmLs\");\nconst $cf356705827370b1$export$c3ccfd7381bc479 = (handler)=>{\n    if (handler && typeof handler === 'object') return handler;\n    else return {\n        handle: handler\n    };\n};\n\n});\n\n\n\nparcelRegister(\"1fQSB\", function(module, exports) {\n\n$parcel$export(module.exports, \"RegExpRoute\", function () { return $0ea035f669279f35$export$dadc8067e88ff641; });\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ parcelRequire(\"hdoOF\");\nparcelRequire(\"j4Ws3\");\n\nvar $b6cm1 = parcelRequire(\"b6cm1\");\nparcelRequire(\"cAmLs\");\n/**\n * RegExpRoute makes it easy to create a regular expression based\n * {@link workbox-routing.Route}.\n *\n * For same-origin requests the RegExp only needs to match part of the URL. For\n * requests against third-party servers, you must define a RegExp that matches\n * the start of the URL.\n *\n * @memberof workbox-routing\n * @extends workbox-routing.Route\n */ class $0ea035f669279f35$export$dadc8067e88ff641 extends (0, $b6cm1.Route) {\n    /**\n     * If the regular expression contains\n     * [capture groups]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#grouping-back-references},\n     * the captured values will be passed to the\n     * {@link workbox-routing~handlerCallback} `params`\n     * argument.\n     *\n     * @param {RegExp} regExp The regular expression to match against URLs.\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */ constructor(regExp, handler, method){\n        const match = ({ url: url })=>{\n            const result = regExp.exec(url.href);\n            // Return immediately if there's no match.\n            if (!result) return;\n            // Require that the match start at the first character in the URL string\n            // if it's a cross-origin request.\n            // See https://github.com/GoogleChrome/workbox/issues/281 for the context\n            // behind this behavior.\n            if (url.origin !== location.origin && result.index !== 0) return;\n            // If the route matches, but there aren't any capture groups defined, then\n            // this will return [], which is truthy and therefore sufficient to\n            // indicate a match.\n            // If there are capture groups, then it will return their values.\n            return result.slice(1);\n        };\n        super(match, handler, method);\n    }\n}\n\n});\n\nparcelRegister(\"9OrUn\", function(module, exports) {\n\n$parcel$export(module.exports, \"registerRoute\", function () { return $724e6e928f4f40fc$export$ecc3f737da4d6188; });\n/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ parcelRequire(\"j4Ws3\");\n\nvar $bLao8 = parcelRequire(\"bLao8\");\n\nvar $b6cm1 = parcelRequire(\"b6cm1\");\n\nvar $1fQSB = parcelRequire(\"1fQSB\");\n\nvar $cajzJ = parcelRequire(\"cajzJ\");\nparcelRequire(\"cAmLs\");\n/**\n * Easily register a RegExp, string, or function with a caching\n * strategy to a singleton Router instance.\n *\n * This method will generate a Route for you if needed and\n * call {@link workbox-routing.Router#registerRoute}.\n *\n * @param {RegExp|string|workbox-routing.Route~matchCallback|workbox-routing.Route} capture\n * If the capture param is a `Route`, all other arguments will be ignored.\n * @param {workbox-routing~handlerCallback} [handler] A callback\n * function that returns a Promise resulting in a Response. This parameter\n * is required if `capture` is not a `Route` object.\n * @param {string} [method='GET'] The HTTP method to match the Route\n * against.\n * @return {workbox-routing.Route} The generated `Route`.\n *\n * @memberof workbox-routing\n */ function $724e6e928f4f40fc$export$ecc3f737da4d6188(capture, handler, method) {\n    let route;\n    if (typeof capture === 'string') {\n        const captureUrl = new URL(capture, location.href);\n        const matchCallback = ({ url: url })=>{\n            return url.href === captureUrl.href;\n        };\n        // If `capture` is a string then `handler` and `method` must be present.\n        route = new (0, $b6cm1.Route)(matchCallback, handler, method);\n    } else if (capture instanceof RegExp) // If `capture` is a `RegExp` then `handler` and `method` must be present.\n    route = new (0, $1fQSB.RegExpRoute)(capture, handler, method);\n    else if (typeof capture === 'function') // If `capture` is a function then `handler` and `method` must be present.\n    route = new (0, $b6cm1.Route)(capture, handler, method);\n    else if (capture instanceof (0, $b6cm1.Route)) route = capture;\n    else throw new (0, $bLao8.WorkboxError)('unsupported-route-type', {\n        moduleName: 'workbox-routing',\n        funcName: 'registerRoute',\n        paramName: 'capture'\n    });\n    const defaultRouter = (0, $cajzJ.getOrCreateDefaultRouter)();\n    defaultRouter.registerRoute(route);\n    return route;\n}\n\n});\nparcelRegister(\"cajzJ\", function(module, exports) {\n\n$parcel$export(module.exports, \"getOrCreateDefaultRouter\", function () { return $8db59a710c642ac7$export$961157d28bda6197; });\n/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ \nvar $dcfPL = parcelRequire(\"dcfPL\");\nparcelRequire(\"cAmLs\");\nlet $8db59a710c642ac7$var$defaultRouter;\nconst $8db59a710c642ac7$export$961157d28bda6197 = ()=>{\n    if (!$8db59a710c642ac7$var$defaultRouter) {\n        $8db59a710c642ac7$var$defaultRouter = new (0, $dcfPL.Router)();\n        // The helpers that use the default Router assume these listeners exist.\n        $8db59a710c642ac7$var$defaultRouter.addFetchListener();\n        $8db59a710c642ac7$var$defaultRouter.addCacheListener();\n    }\n    return $8db59a710c642ac7$var$defaultRouter;\n};\n\n});\nparcelRegister(\"dcfPL\", function(module, exports) {\n\n$parcel$export(module.exports, \"Router\", function () { return $99b8ad9d91ca379d$export$55185c17a0fcbe46; });\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ parcelRequire(\"hdoOF\");\nparcelRequire(\"dBE2C\");\n\nvar $7g2xp = parcelRequire(\"7g2xp\");\nparcelRequire(\"j4Ws3\");\n\nvar $hMXVl = parcelRequire(\"hMXVl\");\n\nvar $bLao8 = parcelRequire(\"bLao8\");\nparcelRequire(\"cAmLs\");\n/**\n * The Router can be used to process a `FetchEvent` using one or more\n * {@link workbox-routing.Route}, responding with a `Response` if\n * a matching route exists.\n *\n * If no route matches a given a request, the Router will use a \"default\"\n * handler if one is defined.\n *\n * Should the matching Route throw an error, the Router will use a \"catch\"\n * handler if one is defined to gracefully deal with issues and respond with a\n * Request.\n *\n * If a request matches multiple routes, the **earliest** registered route will\n * be used to respond to the request.\n *\n * @memberof workbox-routing\n */ class $99b8ad9d91ca379d$export$55185c17a0fcbe46 {\n    /**\n     * Initializes a new Router.\n     */ constructor(){\n        this._routes = new Map();\n        this._defaultHandlerMap = new Map();\n    }\n    /**\n     * @return {Map<string, Array<workbox-routing.Route>>} routes A `Map` of HTTP\n     * method name ('GET', etc.) to an array of all the corresponding `Route`\n     * instances that are registered.\n     */ get routes() {\n        return this._routes;\n    }\n    /**\n     * Adds a fetch event listener to respond to events when a route matches\n     * the event's request.\n     */ addFetchListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('fetch', (event)=>{\n            const { request: request } = event;\n            const responsePromise = this.handleRequest({\n                request: request,\n                event: event\n            });\n            if (responsePromise) event.respondWith(responsePromise);\n        });\n    }\n    /**\n     * Adds a message event listener for URLs to cache from the window.\n     * This is useful to cache resources loaded on the page prior to when the\n     * service worker started controlling it.\n     *\n     * The format of the message data sent from the window should be as follows.\n     * Where the `urlsToCache` array may consist of URL strings or an array of\n     * URL string + `requestInit` object (the same as you'd pass to `fetch()`).\n     *\n     * ```\n     * {\n     *   type: 'CACHE_URLS',\n     *   payload: {\n     *     urlsToCache: [\n     *       './script1.js',\n     *       './script2.js',\n     *       ['./script3.js', {mode: 'no-cors'}],\n     *     ],\n     *   },\n     * }\n     * ```\n     */ addCacheListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('message', (event)=>{\n            // event.data is type 'any'\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            if (event.data && event.data.type === 'CACHE_URLS') {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                const { payload: payload } = event.data;\n                const requestPromises = Promise.all(payload.urlsToCache.map((entry)=>{\n                    if (typeof entry === 'string') entry = [\n                        entry\n                    ];\n                    const request = new Request(...entry);\n                    return this.handleRequest({\n                        request: request,\n                        event: event\n                    });\n                // TODO(philipwalton): TypeScript errors without this typecast for\n                // some reason (probably a bug). The real type here should work but\n                // doesn't: `Array<Promise<Response> | undefined>`.\n                })); // TypeScript\n                event.waitUntil(requestPromises);\n                // If a MessageChannel was used, reply to the message on success.\n                if (event.ports && event.ports[0]) requestPromises.then(()=>event.ports[0].postMessage(true));\n            }\n        });\n    }\n    /**\n     * Apply the routing rules to a FetchEvent object to get a Response from an\n     * appropriate Route's handler.\n     *\n     * @param {Object} options\n     * @param {Request} options.request The request to handle.\n     * @param {ExtendableEvent} options.event The event that triggered the\n     *     request.\n     * @return {Promise<Response>|undefined} A promise is returned if a\n     *     registered route can handle the request. If there is no matching\n     *     route and there's no `defaultHandler`, `undefined` is returned.\n     */ handleRequest({ request: request, event: event }) {\n        const url = new URL(request.url, location.href);\n        if (!url.protocol.startsWith('http')) return;\n        const sameOrigin = url.origin === location.origin;\n        const { params: params, route: route } = this.findMatchingRoute({\n            event: event,\n            request: request,\n            sameOrigin: sameOrigin,\n            url: url\n        });\n        let handler = route && route.handler;\n        const debugMessages = [];\n        // If we don't have a handler because there was no matching route, then\n        // fall back to defaultHandler if that's defined.\n        const method = request.method;\n        if (!handler && this._defaultHandlerMap.has(method)) handler = this._defaultHandlerMap.get(method);\n        if (!handler) return;\n        var msg;\n        // Wrap in try and catch in case the handle method throws a synchronous\n        // error. It should still callback to the catch handler.\n        let responsePromise;\n        try {\n            responsePromise = handler.handle({\n                url: url,\n                request: request,\n                event: event,\n                params: params\n            });\n        } catch (err) {\n            responsePromise = Promise.reject(err);\n        }\n        // Get route's catch handler, if it exists\n        const catchHandler = route && route.catchHandler;\n        if (responsePromise instanceof Promise && (this._catchHandler || catchHandler)) responsePromise = responsePromise.catch(async (err)=>{\n            // If there's a route catch handler, process that first\n            if (catchHandler) try {\n                return await catchHandler.handle({\n                    url: url,\n                    request: request,\n                    event: event,\n                    params: params\n                });\n            } catch (catchErr) {\n                if (catchErr instanceof Error) err = catchErr;\n            }\n            if (this._catchHandler) return this._catchHandler.handle({\n                url: url,\n                request: request,\n                event: event\n            });\n            throw err;\n        });\n        return responsePromise;\n    }\n    /**\n     * Checks a request and URL (and optionally an event) against the list of\n     * registered routes, and if there's a match, returns the corresponding\n     * route along with any params generated by the match.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {boolean} options.sameOrigin The result of comparing `url.origin`\n     *     against the current origin.\n     * @param {Request} options.request The request to match.\n     * @param {Event} options.event The corresponding event.\n     * @return {Object} An object with `route` and `params` properties.\n     *     They are populated if a matching route was found or `undefined`\n     *     otherwise.\n     */ findMatchingRoute({ url: url, sameOrigin: sameOrigin, request: request, event: event }) {\n        const routes = this._routes.get(request.method) || [];\n        for (const route of routes){\n            let params;\n            // route.match returns type any, not possible to change right now.\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            const matchResult = route.match({\n                url: url,\n                sameOrigin: sameOrigin,\n                request: request,\n                event: event\n            });\n            if (matchResult) {\n                // See https://github.com/GoogleChrome/workbox/issues/2079\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                params = matchResult;\n                if (Array.isArray(params) && params.length === 0) // Instead of passing an empty array in as params, use undefined.\n                params = undefined;\n                else if (matchResult.constructor === Object && // eslint-disable-line\n                Object.keys(matchResult).length === 0) // Instead of passing an empty object in as params, use undefined.\n                params = undefined;\n                else if (typeof matchResult === 'boolean') // For the boolean value true (rather than just something truth-y),\n                // don't set params.\n                // See https://github.com/GoogleChrome/workbox/pull/2134#issuecomment-513924353\n                params = undefined;\n                // Return early if have a match.\n                return {\n                    route: route,\n                    params: params\n                };\n            }\n        }\n        // If no match was found above, return and empty object.\n        return {};\n    }\n    /**\n     * Define a default `handler` that's called when no routes explicitly\n     * match the incoming request.\n     *\n     * Each HTTP method ('GET', 'POST', etc.) gets its own default handler.\n     *\n     * Without a default handler, unmatched requests will go against the\n     * network as if there were no service worker present.\n     *\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to associate with this\n     * default handler. Each method has its own default.\n     */ setDefaultHandler(handler, method = (0, $7g2xp.defaultMethod)) {\n        this._defaultHandlerMap.set(method, (0, $hMXVl.normalizeHandler)(handler));\n    }\n    /**\n     * If a Route throws an error while handling a request, this `handler`\n     * will be called and given a chance to provide a response.\n     *\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     */ setCatchHandler(handler) {\n        this._catchHandler = (0, $hMXVl.normalizeHandler)(handler);\n    }\n    /**\n     * Registers a route with the router.\n     *\n     * @param {workbox-routing.Route} route The route to register.\n     */ registerRoute(route) {\n        if (!this._routes.has(route.method)) this._routes.set(route.method, []);\n        // Give precedence to all of the earlier routes by adding this additional\n        // route to the end of the array.\n        this._routes.get(route.method).push(route);\n    }\n    /**\n     * Unregisters a route with the router.\n     *\n     * @param {workbox-routing.Route} route The route to unregister.\n     */ unregisterRoute(route) {\n        if (!this._routes.has(route.method)) throw new (0, $bLao8.WorkboxError)('unregister-route-but-not-found-with-method', {\n            method: route.method\n        });\n        const routeIndex = this._routes.get(route.method).indexOf(route);\n        if (routeIndex > -1) this._routes.get(route.method).splice(routeIndex, 1);\n        else throw new (0, $bLao8.WorkboxError)('unregister-route-route-not-registered');\n    }\n}\n\n});\nparcelRegister(\"dBE2C\", function(module, exports) {\n\n$parcel$export(module.exports, \"getFriendlyURL\", function () { return $9e7dca6d233c4572$export$ea94e9f18324709a; });\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ parcelRequire(\"j6K0f\");\nconst $9e7dca6d233c4572$export$ea94e9f18324709a = (url)=>{\n    const urlObj = new URL(String(url), location.href);\n    // See https://github.com/GoogleChrome/workbox/issues/2323\n    // We want to include everything, except for the origin if it's same-origin.\n    return urlObj.href.replace(new RegExp(`^${location.origin}`), '');\n};\n\n});\n\n\n\n\nparcelRegister(\"g4h9a\", function(module, exports) {\n/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ \nvar $cajzJ = parcelRequire(\"cajzJ\");\nparcelRequire(\"cAmLs\");\n/**\n * If a Route throws an error while handling a request, this `handler`\n * will be called and given a chance to provide a response.\n *\n * @param {workbox-routing~handlerCallback} handler A callback\n * function that returns a Promise resulting in a Response.\n *\n * @memberof workbox-routing\n */ function $bb2a520bdc91e05a$export$a8c420ba18a6df2f(handler) {\n    const defaultRouter = (0, $cajzJ.getOrCreateDefaultRouter)();\n    defaultRouter.setCatchHandler(handler);\n}\n\n});\n\nparcelRegister(\"xTLcq\", function(module, exports) {\n/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ \nvar $cajzJ = parcelRequire(\"cajzJ\");\nparcelRequire(\"cAmLs\");\n/**\n * Define a default `handler` that's called when no routes explicitly\n * match the incoming request.\n *\n * Without a default handler, unmatched requests will go against the\n * network as if there were no service worker present.\n *\n * @param {workbox-routing~handlerCallback} handler A callback\n * function that returns a Promise resulting in a Response.\n *\n * @memberof workbox-routing\n */ function $065e5603202d2854$export$765686f3cef8897b(handler) {\n    const defaultRouter = (0, $cajzJ.getOrCreateDefaultRouter)();\n    defaultRouter.setDefaultHandler(handler);\n}\n\n});\n\n\n\nparcelRegister(\"dO4ET\", function(module, exports) {\n$parcel$export(module.exports, \"CacheFirst\", function () { return (parcelRequire(\"5TCrG\")).CacheFirst; });\n$parcel$export(module.exports, \"NetworkFirst\", function () { return (parcelRequire(\"azwmW\")).NetworkFirst; });\n$parcel$export(module.exports, \"StaleWhileRevalidate\", function () { return (parcelRequire(\"1MSXF\")).StaleWhileRevalidate; });\nparcelRequire(\"8Cto7\");\n\n});\nparcelRegister(\"8Cto7\", function(module, exports) {\n\n$parcel$export(module.exports, \"CacheFirst\", function () { return (parcelRequire(\"5TCrG\")).CacheFirst; });\n$parcel$export(module.exports, \"NetworkFirst\", function () { return (parcelRequire(\"azwmW\")).NetworkFirst; });\n$parcel$export(module.exports, \"StaleWhileRevalidate\", function () { return (parcelRequire(\"1MSXF\")).StaleWhileRevalidate; });\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ \nvar $5TCrG = parcelRequire(\"5TCrG\");\n\nvar $jS9VE = parcelRequire(\"jS9VE\");\n\nvar $azwmW = parcelRequire(\"azwmW\");\n\nvar $iNiFZ = parcelRequire(\"iNiFZ\");\n\nvar $1MSXF = parcelRequire(\"1MSXF\");\n\nvar $cuyhQ = parcelRequire(\"cuyhQ\");\n\nvar $dovPJ = parcelRequire(\"dovPJ\");\nparcelRequire(\"aagxE\");\n\n});\nparcelRegister(\"5TCrG\", function(module, exports) {\n\n$parcel$export(module.exports, \"CacheFirst\", function () { return $44afe9430131f559$export$31be715f8b5f3b36; });\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ parcelRequire(\"hdoOF\");\nparcelRequire(\"j4Ws3\");\n\nvar $bLao8 = parcelRequire(\"bLao8\");\n\nvar $cuyhQ = parcelRequire(\"cuyhQ\");\nparcelRequire(\"ckdRY\");\nparcelRequire(\"aagxE\");\n/**\n * An implementation of a [cache-first](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#cache-first-falling-back-to-network)\n * request strategy.\n *\n * A cache first strategy is useful for assets that have been revisioned,\n * such as URLs like `/styles/example.a8f5f1.css`, since they\n * can be cached for long periods of time.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-strategies\n */ class $44afe9430131f559$export$31be715f8b5f3b36 extends (0, $cuyhQ.Strategy) {\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */ async _handle(request, handler) {\n        const logs = [];\n        let response = await handler.cacheMatch(request);\n        let error = undefined;\n        if (!response) try {\n            response = await handler.fetchAndCachePut(request);\n        } catch (err) {\n            if (err instanceof Error) error = err;\n        }\n        if (!response) throw new (0, $bLao8.WorkboxError)('no-response', {\n            url: request.url,\n            error: error\n        });\n        return response;\n    }\n}\n\n});\nparcelRegister(\"cuyhQ\", function(module, exports) {\n\n$parcel$export(module.exports, \"Strategy\", function () { return $9182e20738c0122b$export$88a6666ae2487175; });\n/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ \nvar $1SZVT = parcelRequire(\"1SZVT\");\n\nvar $bLao8 = parcelRequire(\"bLao8\");\nparcelRequire(\"j4Ws3\");\nparcelRequire(\"dBE2C\");\n\nvar $dovPJ = parcelRequire(\"dovPJ\");\nparcelRequire(\"aagxE\");\n/**\n * An abstract base class that all other strategy classes must extend from:\n *\n * @memberof workbox-strategies\n */ class $9182e20738c0122b$export$88a6666ae2487175 {\n    /**\n     * Creates a new instance of the strategy and sets all documented option\n     * properties as public instance properties.\n     *\n     * Note: if a custom strategy class extends the base Strategy class and does\n     * not need more than these properties, it does not need to define its own\n     * constructor.\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to the cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] The\n     * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\n     */ constructor(options = {}){\n        /**\n         * Cache name to store and retrieve\n         * requests. Defaults to the cache names provided by\n         * {@link workbox-core.cacheNames}.\n         *\n         * @type {string}\n         */ this.cacheName = (0, $1SZVT.cacheNames).getRuntimeName(options.cacheName);\n        /**\n         * The list\n         * [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n         * used by this strategy.\n         *\n         * @type {Array<Object>}\n         */ this.plugins = options.plugins || [];\n        /**\n         * Values passed along to the\n         * [`init`]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters}\n         * of all fetch() requests made by this strategy.\n         *\n         * @type {Object}\n         */ this.fetchOptions = options.fetchOptions;\n        /**\n         * The\n         * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n         * for any `cache.match()` or `cache.put()` calls made by this strategy.\n         *\n         * @type {Object}\n         */ this.matchOptions = options.matchOptions;\n    }\n    /**\n     * Perform a request strategy and returns a `Promise` that will resolve with\n     * a `Response`, invoking all relevant plugin callbacks.\n     *\n     * When a strategy instance is registered with a Workbox\n     * {@link workbox-routing.Route}, this method is automatically\n     * called when the route matches.\n     *\n     * Alternatively, this method can be used in a standalone `FetchEvent`\n     * listener by passing it to `event.respondWith()`.\n     *\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     */ handle(options) {\n        const [responseDone] = this.handleAll(options);\n        return responseDone;\n    }\n    /**\n     * Similar to {@link workbox-strategies.Strategy~handle}, but\n     * instead of just returning a `Promise` that resolves to a `Response` it\n     * it will return an tuple of `[response, done]` promises, where the former\n     * (`response`) is equivalent to what `handle()` returns, and the latter is a\n     * Promise that will resolve once any promises that were added to\n     * `event.waitUntil()` as part of performing the strategy have completed.\n     *\n     * You can await the `done` promise to ensure any extra work performed by\n     * the strategy (usually caching responses) completes successfully.\n     *\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     * @return {Array<Promise>} A tuple of [response, done]\n     *     promises that can be used to determine when the response resolves as\n     *     well as when the handler has completed all its work.\n     */ handleAll(options) {\n        // Allow for flexible options to be passed.\n        if (options instanceof FetchEvent) options = {\n            event: options,\n            request: options.request\n        };\n        const event = options.event;\n        const request = typeof options.request === 'string' ? new Request(options.request) : options.request;\n        const params = 'params' in options ? options.params : undefined;\n        const handler = new (0, $dovPJ.StrategyHandler)(this, {\n            event: event,\n            request: request,\n            params: params\n        });\n        const responseDone = this._getResponse(handler, request, event);\n        const handlerDone = this._awaitComplete(responseDone, handler, request, event);\n        // Return an array of promises, suitable for use with Promise.all().\n        return [\n            responseDone,\n            handlerDone\n        ];\n    }\n    async _getResponse(handler, request, event) {\n        await handler.runCallbacks('handlerWillStart', {\n            event: event,\n            request: request\n        });\n        let response = undefined;\n        try {\n            response = await this._handle(request, handler);\n            // The \"official\" Strategy subclasses all throw this error automatically,\n            // but in case a third-party Strategy doesn't, ensure that we have a\n            // consistent failure when there's no response or an error response.\n            if (!response || response.type === 'error') throw new (0, $bLao8.WorkboxError)('no-response', {\n                url: request.url\n            });\n        } catch (error) {\n            if (error instanceof Error) for (const callback of handler.iterateCallbacks('handlerDidError')){\n                response = await callback({\n                    error: error,\n                    event: event,\n                    request: request\n                });\n                if (response) break;\n            }\n            if (!response) throw error;\n        }\n        for (const callback of handler.iterateCallbacks('handlerWillRespond'))response = await callback({\n            event: event,\n            request: request,\n            response: response\n        });\n        return response;\n    }\n    async _awaitComplete(responseDone, handler, request, event) {\n        let response;\n        let error;\n        try {\n            response = await responseDone;\n        } catch (error) {\n        // Ignore errors, as response errors should be caught via the `response`\n        // promise above. The `done` promise will only throw for errors in\n        // promises passed to `handler.waitUntil()`.\n        }\n        try {\n            await handler.runCallbacks('handlerDidRespond', {\n                event: event,\n                request: request,\n                response: response\n            });\n            await handler.doneWaiting();\n        } catch (waitUntilError) {\n            if (waitUntilError instanceof Error) error = waitUntilError;\n        }\n        await handler.runCallbacks('handlerDidComplete', {\n            event: event,\n            request: request,\n            response: response,\n            error: error\n        });\n        handler.destroy();\n        if (error) throw error;\n    }\n}\n /**\n * Classes extending the `Strategy` based class should implement this method,\n * and leverage the {@link workbox-strategies.StrategyHandler}\n * arg to perform all fetching and cache logic, which will ensure all relevant\n * cache, cache options, fetch options and plugins are used (per the current\n * strategy instance).\n *\n * @name _handle\n * @instance\n * @abstract\n * @function\n * @param {Request} request\n * @param {workbox-strategies.StrategyHandler} handler\n * @return {Promise<Response>}\n *\n * @memberof workbox-strategies.Strategy\n */ \n});\nparcelRegister(\"1SZVT\", function(module, exports) {\n\n$parcel$export(module.exports, \"cacheNames\", function () { return $15fae0277cef1542$export$ab6e80394d30c0bd; });\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ parcelRequire(\"j6K0f\");\nconst $15fae0277cef1542$var$_cacheNameDetails = {\n    googleAnalytics: 'googleAnalytics',\n    precache: 'precache-v2',\n    prefix: 'workbox',\n    runtime: 'runtime',\n    suffix: typeof registration !== 'undefined' ? registration.scope : ''\n};\nconst $15fae0277cef1542$var$_createCacheName = (cacheName)=>{\n    return [\n        $15fae0277cef1542$var$_cacheNameDetails.prefix,\n        cacheName,\n        $15fae0277cef1542$var$_cacheNameDetails.suffix\n    ].filter((value)=>value && value.length > 0).join('-');\n};\nconst $15fae0277cef1542$var$eachCacheNameDetail = (fn)=>{\n    for (const key of Object.keys($15fae0277cef1542$var$_cacheNameDetails))fn(key);\n};\nconst $15fae0277cef1542$export$ab6e80394d30c0bd = {\n    updateDetails: (details)=>{\n        $15fae0277cef1542$var$eachCacheNameDetail((key)=>{\n            if (typeof details[key] === 'string') $15fae0277cef1542$var$_cacheNameDetails[key] = details[key];\n        });\n    },\n    getGoogleAnalyticsName: (userCacheName)=>{\n        return userCacheName || $15fae0277cef1542$var$_createCacheName($15fae0277cef1542$var$_cacheNameDetails.googleAnalytics);\n    },\n    getPrecacheName: (userCacheName)=>{\n        return userCacheName || $15fae0277cef1542$var$_createCacheName($15fae0277cef1542$var$_cacheNameDetails.precache);\n    },\n    getPrefix: ()=>{\n        return $15fae0277cef1542$var$_cacheNameDetails.prefix;\n    },\n    getRuntimeName: (userCacheName)=>{\n        return userCacheName || $15fae0277cef1542$var$_createCacheName($15fae0277cef1542$var$_cacheNameDetails.runtime);\n    },\n    getSuffix: ()=>{\n        return $15fae0277cef1542$var$_cacheNameDetails.suffix;\n    }\n};\n\n});\n\nparcelRegister(\"dovPJ\", function(module, exports) {\n\n$parcel$export(module.exports, \"StrategyHandler\", function () { return $9c0635aca457f92b$export$21756803dae8d5d1; });\n/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ parcelRequire(\"hdoOF\");\n\nvar $jvjrT = parcelRequire(\"jvjrT\");\n\nvar $5PQ27 = parcelRequire(\"5PQ27\");\n\nvar $gLG8R = parcelRequire(\"gLG8R\");\n\nvar $dBE2C = parcelRequire(\"dBE2C\");\nparcelRequire(\"j4Ws3\");\n\nvar $ddiLb = parcelRequire(\"ddiLb\");\n\nvar $bLao8 = parcelRequire(\"bLao8\");\nparcelRequire(\"aagxE\");\nfunction $9c0635aca457f92b$var$toRequest(input) {\n    return typeof input === 'string' ? new Request(input) : input;\n}\n/**\n * A class created every time a Strategy instance instance calls\n * {@link workbox-strategies.Strategy~handle} or\n * {@link workbox-strategies.Strategy~handleAll} that wraps all fetch and\n * cache actions around plugin callbacks and keeps track of when the strategy\n * is \"done\" (i.e. all added `event.waitUntil()` promises have resolved).\n *\n * @memberof workbox-strategies\n */ class $9c0635aca457f92b$export$21756803dae8d5d1 {\n    /**\n     * Creates a new instance associated with the passed strategy and event\n     * that's handling the request.\n     *\n     * The constructor also initializes the state that will be passed to each of\n     * the plugins handling this request.\n     *\n     * @param {workbox-strategies.Strategy} strategy\n     * @param {Object} options\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params] The return value from the\n     *     {@link workbox-routing~matchCallback} (if applicable).\n     */ constructor(strategy, options){\n        this._cacheKeys = {};\n        Object.assign(this, options);\n        this.event = options.event;\n        this._strategy = strategy;\n        this._handlerDeferred = new (0, $5PQ27.Deferred)();\n        this._extendLifetimePromises = [];\n        // Copy the plugins list (since it's mutable on the strategy),\n        // so any mutations don't affect this handler instance.\n        this._plugins = [\n            ...strategy.plugins\n        ];\n        this._pluginStateMap = new Map();\n        for (const plugin of this._plugins)this._pluginStateMap.set(plugin, {});\n        this.event.waitUntil(this._handlerDeferred.promise);\n    }\n    /**\n     * Fetches a given request (and invokes any applicable plugin callback\n     * methods) using the `fetchOptions` (for non-navigation requests) and\n     * `plugins` defined on the `Strategy` object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - `requestWillFetch()`\n     * - `fetchDidSucceed()`\n     * - `fetchDidFail()`\n     *\n     * @param {Request|string} input The URL or request to fetch.\n     * @return {Promise<Response>}\n     */ async fetch(input) {\n        const { event: event } = this;\n        let request = $9c0635aca457f92b$var$toRequest(input);\n        if (request.mode === 'navigate' && event instanceof FetchEvent && event.preloadResponse) {\n            const possiblePreloadResponse = await event.preloadResponse;\n            if (possiblePreloadResponse) return possiblePreloadResponse;\n        }\n        // If there is a fetchDidFail plugin, we need to save a clone of the\n        // original request before it's either modified by a requestWillFetch\n        // plugin or before the original request's body is consumed via fetch().\n        const originalRequest = this.hasCallback('fetchDidFail') ? request.clone() : null;\n        try {\n            for (const cb of this.iterateCallbacks('requestWillFetch'))request = await cb({\n                request: request.clone(),\n                event: event\n            });\n        } catch (err) {\n            if (err instanceof Error) throw new (0, $bLao8.WorkboxError)('plugin-error-request-will-fetch', {\n                thrownErrorMessage: err.message\n            });\n        }\n        // The request can be altered by plugins with `requestWillFetch` making\n        // the original request (most likely from a `fetch` event) different\n        // from the Request we make. Pass both to `fetchDidFail` to aid debugging.\n        const pluginFilteredRequest = request.clone();\n        try {\n            let fetchResponse;\n            // See https://github.com/GoogleChrome/workbox/issues/1796\n            fetchResponse = await fetch(request, request.mode === 'navigate' ? undefined : this._strategy.fetchOptions);\n            for (const callback of this.iterateCallbacks('fetchDidSucceed'))fetchResponse = await callback({\n                event: event,\n                request: pluginFilteredRequest,\n                response: fetchResponse\n            });\n            return fetchResponse;\n        } catch (error) {\n            // `originalRequest` will only exist if a `fetchDidFail` callback\n            // is being used (see above).\n            if (originalRequest) await this.runCallbacks('fetchDidFail', {\n                error: error,\n                event: event,\n                originalRequest: originalRequest.clone(),\n                request: pluginFilteredRequest.clone()\n            });\n            throw error;\n        }\n    }\n    /**\n     * Calls `this.fetch()` and (in the background) runs `this.cachePut()` on\n     * the response generated by `this.fetch()`.\n     *\n     * The call to `this.cachePut()` automatically invokes `this.waitUntil()`,\n     * so you do not have to manually call `waitUntil()` on the event.\n     *\n     * @param {Request|string} input The request or URL to fetch and cache.\n     * @return {Promise<Response>}\n     */ async fetchAndCachePut(input) {\n        const response = await this.fetch(input);\n        const responseClone = response.clone();\n        this.waitUntil(this.cachePut(input, responseClone));\n        return response;\n    }\n    /**\n     * Matches a request from the cache (and invokes any applicable plugin\n     * callback methods) using the `cacheName`, `matchOptions`, and `plugins`\n     * defined on the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillBeUsed()\n     * - cachedResponseWillBeUsed()\n     *\n     * @param {Request|string} key The Request or URL to use as the cache key.\n     * @return {Promise<Response|undefined>} A matching response, if found.\n     */ async cacheMatch(key) {\n        const request = $9c0635aca457f92b$var$toRequest(key);\n        let cachedResponse;\n        const { cacheName: cacheName, matchOptions: matchOptions } = this._strategy;\n        const effectiveRequest = await this.getCacheKey(request, 'read');\n        const multiMatchOptions = Object.assign(Object.assign({}, matchOptions), {\n            cacheName: cacheName\n        });\n        cachedResponse = await caches.match(effectiveRequest, multiMatchOptions);\n        for (const callback of this.iterateCallbacks('cachedResponseWillBeUsed'))cachedResponse = await callback({\n            cacheName: cacheName,\n            matchOptions: matchOptions,\n            cachedResponse: cachedResponse,\n            request: effectiveRequest,\n            event: this.event\n        }) || undefined;\n        return cachedResponse;\n    }\n    /**\n     * Puts a request/response pair in the cache (and invokes any applicable\n     * plugin callback methods) using the `cacheName` and `plugins` defined on\n     * the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillBeUsed()\n     * - cacheWillUpdate()\n     * - cacheDidUpdate()\n     *\n     * @param {Request|string} key The request or URL to use as the cache key.\n     * @param {Response} response The response to cache.\n     * @return {Promise<boolean>} `false` if a cacheWillUpdate caused the response\n     * not be cached, and `true` otherwise.\n     */ async cachePut(key, response) {\n        const request = $9c0635aca457f92b$var$toRequest(key);\n        // Run in the next task to avoid blocking other cache reads.\n        // https://github.com/w3c/ServiceWorker/issues/1397\n        await (0, $ddiLb.timeout)(0);\n        const effectiveRequest = await this.getCacheKey(request, 'write');\n        if (!response) throw new (0, $bLao8.WorkboxError)('cache-put-with-no-response', {\n            url: (0, $dBE2C.getFriendlyURL)(effectiveRequest.url)\n        });\n        const responseToCache = await this._ensureResponseSafeToCache(response);\n        if (!responseToCache) return false;\n        const { cacheName: cacheName, matchOptions: matchOptions } = this._strategy;\n        const cache = await self.caches.open(cacheName);\n        const hasCacheUpdateCallback = this.hasCallback('cacheDidUpdate');\n        const oldResponse = hasCacheUpdateCallback ? await (0, $jvjrT.cacheMatchIgnoreParams)(// TODO(philipwalton): the `__WB_REVISION__` param is a precaching\n        // feature. Consider into ways to only add this behavior if using\n        // precaching.\n        cache, effectiveRequest.clone(), [\n            '__WB_REVISION__'\n        ], matchOptions) : null;\n        try {\n            await cache.put(effectiveRequest, hasCacheUpdateCallback ? responseToCache.clone() : responseToCache);\n        } catch (error) {\n            if (error instanceof Error) {\n                // See https://developer.mozilla.org/en-US/docs/Web/API/DOMException#exception-QuotaExceededError\n                if (error.name === 'QuotaExceededError') await (0, $gLG8R.executeQuotaErrorCallbacks)();\n                throw error;\n            }\n        }\n        for (const callback of this.iterateCallbacks('cacheDidUpdate'))await callback({\n            cacheName: cacheName,\n            oldResponse: oldResponse,\n            newResponse: responseToCache.clone(),\n            request: effectiveRequest,\n            event: this.event\n        });\n        return true;\n    }\n    /**\n     * Checks the list of plugins for the `cacheKeyWillBeUsed` callback, and\n     * executes any of those callbacks found in sequence. The final `Request`\n     * object returned by the last plugin is treated as the cache key for cache\n     * reads and/or writes. If no `cacheKeyWillBeUsed` plugin callbacks have\n     * been registered, the passed request is returned unmodified\n     *\n     * @param {Request} request\n     * @param {string} mode\n     * @return {Promise<Request>}\n     */ async getCacheKey(request, mode) {\n        const key = `${request.url} | ${mode}`;\n        if (!this._cacheKeys[key]) {\n            let effectiveRequest = request;\n            for (const callback of this.iterateCallbacks('cacheKeyWillBeUsed'))effectiveRequest = $9c0635aca457f92b$var$toRequest(await callback({\n                mode: mode,\n                request: effectiveRequest,\n                event: this.event,\n                // params has a type any can't change right now.\n                params: this.params\n            }));\n            this._cacheKeys[key] = effectiveRequest;\n        }\n        return this._cacheKeys[key];\n    }\n    /**\n     * Returns true if the strategy has at least one plugin with the given\n     * callback.\n     *\n     * @param {string} name The name of the callback to check for.\n     * @return {boolean}\n     */ hasCallback(name) {\n        for (const plugin of this._strategy.plugins){\n            if (name in plugin) return true;\n        }\n        return false;\n    }\n    /**\n     * Runs all plugin callbacks matching the given name, in order, passing the\n     * given param object (merged ith the current plugin state) as the only\n     * argument.\n     *\n     * Note: since this method runs all plugins, it's not suitable for cases\n     * where the return value of a callback needs to be applied prior to calling\n     * the next callback. See\n     * {@link workbox-strategies.StrategyHandler#iterateCallbacks}\n     * below for how to handle that case.\n     *\n     * @param {string} name The name of the callback to run within each plugin.\n     * @param {Object} param The object to pass as the first (and only) param\n     *     when executing each callback. This object will be merged with the\n     *     current plugin state prior to callback execution.\n     */ async runCallbacks(name, param) {\n        for (const callback of this.iterateCallbacks(name))// TODO(philipwalton): not sure why `any` is needed. It seems like\n        // this should work with `as WorkboxPluginCallbackParam[C]`.\n        await callback(param);\n    }\n    /**\n     * Accepts a callback and returns an iterable of matching plugin callbacks,\n     * where each callback is wrapped with the current handler state (i.e. when\n     * you call each callback, whatever object parameter you pass it will\n     * be merged with the plugin's current state).\n     *\n     * @param {string} name The name fo the callback to run\n     * @return {Array<Function>}\n     */ *iterateCallbacks(name) {\n        for (const plugin of this._strategy.plugins)if (typeof plugin[name] === 'function') {\n            const state = this._pluginStateMap.get(plugin);\n            const statefulCallback = (param)=>{\n                const statefulParam = Object.assign(Object.assign({}, param), {\n                    state: state\n                });\n                // TODO(philipwalton): not sure why `any` is needed. It seems like\n                // this should work with `as WorkboxPluginCallbackParam[C]`.\n                return plugin[name](statefulParam);\n            };\n            yield statefulCallback;\n        }\n    }\n    /**\n     * Adds a promise to the\n     * [extend lifetime promises]{@link https://w3c.github.io/ServiceWorker/#extendableevent-extend-lifetime-promises}\n     * of the event event associated with the request being handled (usually a\n     * `FetchEvent`).\n     *\n     * Note: you can await\n     * {@link workbox-strategies.StrategyHandler~doneWaiting}\n     * to know when all added promises have settled.\n     *\n     * @param {Promise} promise A promise to add to the extend lifetime promises\n     *     of the event that triggered the request.\n     */ waitUntil(promise) {\n        this._extendLifetimePromises.push(promise);\n        return promise;\n    }\n    /**\n     * Returns a promise that resolves once all promises passed to\n     * {@link workbox-strategies.StrategyHandler~waitUntil}\n     * have settled.\n     *\n     * Note: any work done after `doneWaiting()` settles should be manually\n     * passed to an event's `waitUntil()` method (not this handler's\n     * `waitUntil()` method), otherwise the service worker thread my be killed\n     * prior to your work completing.\n     */ async doneWaiting() {\n        let promise;\n        while(promise = this._extendLifetimePromises.shift())await promise;\n    }\n    /**\n     * Stops running the strategy and immediately resolves any pending\n     * `waitUntil()` promises.\n     */ destroy() {\n        this._handlerDeferred.resolve(null);\n    }\n    /**\n     * This method will call cacheWillUpdate on the available plugins (or use\n     * status === 200) to determine if the Response is safe and valid to cache.\n     *\n     * @param {Request} options.request\n     * @param {Response} options.response\n     * @return {Promise<Response|undefined>}\n     *\n     * @private\n     */ async _ensureResponseSafeToCache(response) {\n        let responseToCache = response;\n        let pluginsUsed = false;\n        for (const callback of this.iterateCallbacks('cacheWillUpdate')){\n            responseToCache = await callback({\n                request: this.request,\n                response: responseToCache,\n                event: this.event\n            }) || undefined;\n            pluginsUsed = true;\n            if (!responseToCache) break;\n        }\n        if (!pluginsUsed) {\n            if (responseToCache && responseToCache.status !== 200) responseToCache = undefined;\n        }\n        return responseToCache;\n    }\n}\n\n});\nparcelRegister(\"jvjrT\", function(module, exports) {\n\n$parcel$export(module.exports, \"cacheMatchIgnoreParams\", function () { return $e32fffba50d011ea$export$e8c0b45b884930bd; });\n/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ parcelRequire(\"j6K0f\");\nfunction $e32fffba50d011ea$var$stripParams(fullURL, ignoreParams) {\n    const strippedURL = new URL(fullURL);\n    for (const param of ignoreParams)strippedURL.searchParams.delete(param);\n    return strippedURL.href;\n}\n/**\n * Matches an item in the cache, ignoring specific URL params. This is similar\n * to the `ignoreSearch` option, but it allows you to ignore just specific\n * params (while continuing to match on the others).\n *\n * @private\n * @param {Cache} cache\n * @param {Request} request\n * @param {Object} matchOptions\n * @param {Array<string>} ignoreParams\n * @return {Promise<Response|undefined>}\n */ async function $e32fffba50d011ea$export$e8c0b45b884930bd(cache, request, ignoreParams, matchOptions) {\n    const strippedRequestURL = $e32fffba50d011ea$var$stripParams(request.url, ignoreParams);\n    // If the request doesn't include any ignored params, match as normal.\n    if (request.url === strippedRequestURL) return cache.match(request, matchOptions);\n    // Otherwise, match by comparing keys\n    const keysOptions = Object.assign(Object.assign({}, matchOptions), {\n        ignoreSearch: true\n    });\n    const cacheKeys = await cache.keys(request, keysOptions);\n    for (const cacheKey of cacheKeys){\n        const strippedCacheKeyURL = $e32fffba50d011ea$var$stripParams(cacheKey.url, ignoreParams);\n        if (strippedRequestURL === strippedCacheKeyURL) return cache.match(cacheKey, matchOptions);\n    }\n    return;\n}\n\n});\n\nparcelRegister(\"5PQ27\", function(module, exports) {\n\n$parcel$export(module.exports, \"Deferred\", function () { return $43fa13e5545bbc8a$export$85f6557964517f1a; });\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ parcelRequire(\"j6K0f\");\n/**\n * The Deferred class composes Promises in a way that allows for them to be\n * resolved or rejected from outside the constructor. In most cases promises\n * should be used directly, but Deferreds can be necessary when the logic to\n * resolve a promise must be separate.\n *\n * @private\n */ class $43fa13e5545bbc8a$export$85f6557964517f1a {\n    /**\n     * Creates a promise and exposes its resolve and reject functions as methods.\n     */ constructor(){\n        this.promise = new Promise((resolve, reject)=>{\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n}\n\n});\n\nparcelRegister(\"gLG8R\", function(module, exports) {\n\n$parcel$export(module.exports, \"executeQuotaErrorCallbacks\", function () { return $c351b99c9d29c0ef$export$8c2c97e92a341abf; });\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ parcelRequire(\"j4Ws3\");\n\nvar $9CgW0 = parcelRequire(\"9CgW0\");\nparcelRequire(\"j6K0f\");\n/**\n * Runs all of the callback functions, one at a time sequentially, in the order\n * in which they were registered.\n *\n * @memberof workbox-core\n * @private\n */ async function $c351b99c9d29c0ef$export$8c2c97e92a341abf() {\n    for (const callback of (0, $9CgW0.quotaErrorCallbacks))await callback();\n}\n\n});\nparcelRegister(\"9CgW0\", function(module, exports) {\n\n$parcel$export(module.exports, \"quotaErrorCallbacks\", function () { return $7004cc86732d5f3a$export$8809c7646fb39931; });\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ parcelRequire(\"j6K0f\");\n// Callbacks to be executed whenever there's a quota error.\n// Can't change Function type right now.\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst $7004cc86732d5f3a$export$8809c7646fb39931 = new Set();\n\n});\n\n\nparcelRegister(\"ddiLb\", function(module, exports) {\n\n$parcel$export(module.exports, \"timeout\", function () { return $99eb0aa0e4b12f96$export$83e74882c5df8fe1; });\n/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ parcelRequire(\"j6K0f\");\nfunction $99eb0aa0e4b12f96$export$83e74882c5df8fe1(ms) {\n    return new Promise((resolve)=>setTimeout(resolve, ms));\n}\n\n});\n\nparcelRegister(\"aagxE\", function(module, exports) {\n\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:strategies:7.2.0'] && _();\n} catch (e) {}\n\n});\n\n\n\nparcelRegister(\"ckdRY\", function(module, exports) {\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ \nvar $j4Ws3 = parcelRequire(\"j4Ws3\");\n\nvar $dBE2C = parcelRequire(\"dBE2C\");\nparcelRequire(\"aagxE\");\nconst $8f921c8016bdddd1$export$defe85febe8b728c = {\n    strategyStart: (strategyName, request)=>`Using ${strategyName} to respond to '${(0, $dBE2C.getFriendlyURL)(request.url)}'`,\n    printFinalResponse: (response)=>{\n        if (response) {\n            (0, $j4Ws3.logger).groupCollapsed(`View the final response here.`);\n            (0, $j4Ws3.logger).log(response || '[No response returned]');\n            (0, $j4Ws3.logger).groupEnd();\n        }\n    }\n};\n\n});\n\n\nparcelRegister(\"jS9VE\", function(module, exports) {\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ parcelRequire(\"hdoOF\");\nparcelRequire(\"j4Ws3\");\n\nvar $bLao8 = parcelRequire(\"bLao8\");\n\nvar $cuyhQ = parcelRequire(\"cuyhQ\");\nparcelRequire(\"ckdRY\");\nparcelRequire(\"aagxE\");\n/**\n * An implementation of a [cache-only](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#cache-only)\n * request strategy.\n *\n * This class is useful if you want to take advantage of any\n * [Workbox plugins](https://developer.chrome.com/docs/workbox/using-plugins/).\n *\n * If there is no cache match, this will throw a `WorkboxError` exception.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-strategies\n */ class $e77ac32622fa65a9$export$6b8962c5e4ddae5b extends (0, $cuyhQ.Strategy) {\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */ async _handle(request, handler) {\n        const response = await handler.cacheMatch(request);\n        if (!response) throw new (0, $bLao8.WorkboxError)('no-response', {\n            url: request.url\n        });\n        return response;\n    }\n}\n\n});\n\nparcelRegister(\"azwmW\", function(module, exports) {\n\n$parcel$export(module.exports, \"NetworkFirst\", function () { return $7b264818abf3e678$export$fe842248fe84e163; });\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ parcelRequire(\"hdoOF\");\nparcelRequire(\"j4Ws3\");\n\nvar $bLao8 = parcelRequire(\"bLao8\");\n\nvar $eYGlt = parcelRequire(\"eYGlt\");\n\nvar $cuyhQ = parcelRequire(\"cuyhQ\");\nparcelRequire(\"ckdRY\");\nparcelRequire(\"aagxE\");\n/**\n * An implementation of a\n * [network first](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#network-first-falling-back-to-cache)\n * request strategy.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses](https://developer.chrome.com/docs/workbox/caching-resources-during-runtime/#opaque-responses).\n * Opaque responses are are cross-origin requests where the response doesn't\n * support [CORS](https://enable-cors.org/).\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-strategies\n */ class $7b264818abf3e678$export$fe842248fe84e163 extends (0, $cuyhQ.Strategy) {\n    /**\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n     * @param {number} [options.networkTimeoutSeconds] If set, any network requests\n     * that fail to respond within the timeout will fallback to the cache.\n     *\n     * This option can be used to combat\n     * \"[lie-fi]{@link https://developers.google.com/web/fundamentals/performance/poor-connectivity/#lie-fi}\"\n     * scenarios.\n     */ constructor(options = {}){\n        super(options);\n        // If this instance contains no plugins with a 'cacheWillUpdate' callback,\n        // prepend the `cacheOkAndOpaquePlugin` plugin to the plugins list.\n        if (!this.plugins.some((p)=>'cacheWillUpdate' in p)) this.plugins.unshift((0, $eYGlt.cacheOkAndOpaquePlugin));\n        this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */ async _handle(request, handler) {\n        const logs = [];\n        const promises = [];\n        let timeoutId;\n        if (this._networkTimeoutSeconds) {\n            const { id: id, promise: promise } = this._getTimeoutPromise({\n                request: request,\n                logs: logs,\n                handler: handler\n            });\n            timeoutId = id;\n            promises.push(promise);\n        }\n        const networkPromise = this._getNetworkPromise({\n            timeoutId: timeoutId,\n            request: request,\n            logs: logs,\n            handler: handler\n        });\n        promises.push(networkPromise);\n        const response = await handler.waitUntil((async ()=>{\n            // Promise.race() will resolve as soon as the first promise resolves.\n            return await handler.waitUntil(Promise.race(promises)) || // If Promise.race() resolved with null, it might be due to a network\n            // timeout + a cache miss. If that were to happen, we'd rather wait until\n            // the networkPromise resolves instead of returning null.\n            // Note that it's fine to await an already-resolved promise, so we don't\n            // have to check to see if it's still \"in flight\".\n            await networkPromise;\n        })());\n        if (!response) throw new (0, $bLao8.WorkboxError)('no-response', {\n            url: request.url\n        });\n        return response;\n    }\n    /**\n     * @param {Object} options\n     * @param {Request} options.request\n     * @param {Array} options.logs A reference to the logs array\n     * @param {Event} options.event\n     * @return {Promise<Response>}\n     *\n     * @private\n     */ _getTimeoutPromise({ request: request, logs: logs, handler: handler }) {\n        let timeoutId;\n        const timeoutPromise = new Promise((resolve)=>{\n            const onNetworkTimeout = async ()=>{\n                resolve(await handler.cacheMatch(request));\n            };\n            timeoutId = setTimeout(onNetworkTimeout, this._networkTimeoutSeconds * 1000);\n        });\n        return {\n            promise: timeoutPromise,\n            id: timeoutId\n        };\n    }\n    /**\n     * @param {Object} options\n     * @param {number|undefined} options.timeoutId\n     * @param {Request} options.request\n     * @param {Array} options.logs A reference to the logs Array.\n     * @param {Event} options.event\n     * @return {Promise<Response>}\n     *\n     * @private\n     */ async _getNetworkPromise({ timeoutId: timeoutId, request: request, logs: logs, handler: handler }) {\n        let error;\n        let response;\n        try {\n            response = await handler.fetchAndCachePut(request);\n        } catch (fetchError) {\n            if (fetchError instanceof Error) error = fetchError;\n        }\n        if (timeoutId) clearTimeout(timeoutId);\n        if (error || !response) response = await handler.cacheMatch(request);\n        return response;\n    }\n}\n\n});\nparcelRegister(\"eYGlt\", function(module, exports) {\n\n$parcel$export(module.exports, \"cacheOkAndOpaquePlugin\", function () { return $ae77842cf7c4a631$export$ac87a12a5a435e99; });\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ parcelRequire(\"aagxE\");\nconst $ae77842cf7c4a631$export$ac87a12a5a435e99 = {\n    /**\n     * Returns a valid response (to allow caching) if the status is 200 (OK) or\n     * 0 (opaque).\n     *\n     * @param {Object} options\n     * @param {Response} options.response\n     * @return {Response|null}\n     *\n     * @private\n     */ cacheWillUpdate: async ({ response: response })=>{\n        if (response.status === 200 || response.status === 0) return response;\n        return null;\n    }\n};\n\n});\n\n\nparcelRegister(\"iNiFZ\", function(module, exports) {\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ parcelRequire(\"hdoOF\");\nparcelRequire(\"j4Ws3\");\n\nvar $ddiLb = parcelRequire(\"ddiLb\");\n\nvar $bLao8 = parcelRequire(\"bLao8\");\n\nvar $cuyhQ = parcelRequire(\"cuyhQ\");\nparcelRequire(\"ckdRY\");\nparcelRequire(\"aagxE\");\n/**\n * An implementation of a\n * [network-only](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#network-only)\n * request strategy.\n *\n * This class is useful if you want to take advantage of any\n * [Workbox plugins](https://developer.chrome.com/docs/workbox/using-plugins/).\n *\n * If the network request fails, this will throw a `WorkboxError` exception.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-strategies\n */ class $daeb4a51babfc8e0$export$1b45f146981d5f4c extends (0, $cuyhQ.Strategy) {\n    /**\n     * @param {Object} [options]\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {number} [options.networkTimeoutSeconds] If set, any network requests\n     * that fail to respond within the timeout will result in a network error.\n     */ constructor(options = {}){\n        super(options);\n        this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */ async _handle(request, handler) {\n        let error = undefined;\n        let response;\n        try {\n            const promises = [\n                handler.fetch(request)\n            ];\n            if (this._networkTimeoutSeconds) {\n                const timeoutPromise = (0, $ddiLb.timeout)(this._networkTimeoutSeconds * 1000);\n                promises.push(timeoutPromise);\n            }\n            response = await Promise.race(promises);\n            if (!response) throw new Error(`Timed out the network response after ` + `${this._networkTimeoutSeconds} seconds.`);\n        } catch (err) {\n            if (err instanceof Error) error = err;\n        }\n        if (!response) throw new (0, $bLao8.WorkboxError)('no-response', {\n            url: request.url,\n            error: error\n        });\n        return response;\n    }\n}\n\n});\n\nparcelRegister(\"1MSXF\", function(module, exports) {\n\n$parcel$export(module.exports, \"StaleWhileRevalidate\", function () { return $14d4e8583184ff1b$export$7ea9c022a31f5797; });\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ parcelRequire(\"hdoOF\");\nparcelRequire(\"j4Ws3\");\n\nvar $bLao8 = parcelRequire(\"bLao8\");\n\nvar $eYGlt = parcelRequire(\"eYGlt\");\n\nvar $cuyhQ = parcelRequire(\"cuyhQ\");\nparcelRequire(\"ckdRY\");\nparcelRequire(\"aagxE\");\n/**\n * An implementation of a\n * [stale-while-revalidate](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#stale-while-revalidate)\n * request strategy.\n *\n * Resources are requested from both the cache and the network in parallel.\n * The strategy will respond with the cached version if available, otherwise\n * wait for the network response. The cache is updated with the network response\n * with each successful request.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses](https://developer.chrome.com/docs/workbox/caching-resources-during-runtime/#opaque-responses).\n * Opaque responses are cross-origin requests where the response doesn't\n * support [CORS](https://enable-cors.org/).\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-strategies\n */ class $14d4e8583184ff1b$export$7ea9c022a31f5797 extends (0, $cuyhQ.Strategy) {\n    /**\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n     */ constructor(options = {}){\n        super(options);\n        // If this instance contains no plugins with a 'cacheWillUpdate' callback,\n        // prepend the `cacheOkAndOpaquePlugin` plugin to the plugins list.\n        if (!this.plugins.some((p)=>'cacheWillUpdate' in p)) this.plugins.unshift((0, $eYGlt.cacheOkAndOpaquePlugin));\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */ async _handle(request, handler) {\n        const logs = [];\n        const fetchAndCachePromise = handler.fetchAndCachePut(request).catch(()=>{\n        // Swallow this error because a 'no-response' error will be thrown in\n        // main handler return flow. This will be in the `waitUntil()` flow.\n        });\n        handler.waitUntil(fetchAndCachePromise);\n        let response = await handler.cacheMatch(request);\n        let error;\n        if (response) ;\n        else try {\n            // NOTE(philipwalton): Really annoying that we have to type cast here.\n            // https://github.com/microsoft/TypeScript/issues/20006\n            response = await fetchAndCachePromise;\n        } catch (err) {\n            if (err instanceof Error) error = err;\n        }\n        if (!response) throw new (0, $bLao8.WorkboxError)('no-response', {\n            url: request.url,\n            error: error\n        });\n        return response;\n    }\n}\n\n});\n\n\n\nparcelRegister(\"e54Ah\", function(module, exports) {\n$parcel$export(module.exports, \"CacheableResponsePlugin\", function () { return (parcelRequire(\"fneqe\")).CacheableResponsePlugin; });\nparcelRequire(\"2Ks99\");\n\n});\nparcelRegister(\"2Ks99\", function(module, exports) {\n\n$parcel$export(module.exports, \"CacheableResponsePlugin\", function () { return (parcelRequire(\"fneqe\")).CacheableResponsePlugin; });\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ \nvar $kwjl0 = parcelRequire(\"kwjl0\");\n\nvar $fneqe = parcelRequire(\"fneqe\");\nparcelRequire(\"5XC3n\");\n\n});\nparcelRegister(\"kwjl0\", function(module, exports) {\n\n$parcel$export(module.exports, \"CacheableResponse\", function () { return $ef05cbe573617e58$export$a644cea2120b6d05; });\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ parcelRequire(\"hdoOF\");\nparcelRequire(\"bLao8\");\nparcelRequire(\"dBE2C\");\nparcelRequire(\"j4Ws3\");\nparcelRequire(\"5XC3n\");\n/**\n * This class allows you to set up rules determining what\n * status codes and/or headers need to be present in order for a\n * [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response)\n * to be considered cacheable.\n *\n * @memberof workbox-cacheable-response\n */ class $ef05cbe573617e58$export$a644cea2120b6d05 {\n    /**\n     * To construct a new CacheableResponse instance you must provide at least\n     * one of the `config` properties.\n     *\n     * If both `statuses` and `headers` are specified, then both conditions must\n     * be met for the `Response` to be considered cacheable.\n     *\n     * @param {Object} config\n     * @param {Array<number>} [config.statuses] One or more status codes that a\n     * `Response` can have and be considered cacheable.\n     * @param {Object<string,string>} [config.headers] A mapping of header names\n     * and expected values that a `Response` can have and be considered cacheable.\n     * If multiple headers are provided, only one needs to be present.\n     */ constructor(config = {}){\n        this._statuses = config.statuses;\n        this._headers = config.headers;\n    }\n    /**\n     * Checks a response to see whether it's cacheable or not, based on this\n     * object's configuration.\n     *\n     * @param {Response} response The response whose cacheability is being\n     * checked.\n     * @return {boolean} `true` if the `Response` is cacheable, and `false`\n     * otherwise.\n     */ isResponseCacheable(response) {\n        let cacheable = true;\n        if (this._statuses) cacheable = this._statuses.includes(response.status);\n        if (this._headers && cacheable) cacheable = Object.keys(this._headers).some((headerName)=>{\n            return response.headers.get(headerName) === this._headers[headerName];\n        });\n        var value, key;\n        return cacheable;\n    }\n}\n\n});\nparcelRegister(\"5XC3n\", function(module, exports) {\n\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:cacheable-response:7.2.0'] && _();\n} catch (e) {}\n\n});\n\n\nparcelRegister(\"fneqe\", function(module, exports) {\n\n$parcel$export(module.exports, \"CacheableResponsePlugin\", function () { return $b31430f1c8fe0d90$export$86cb7f0d61d3ac3d; });\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ \nvar $kwjl0 = parcelRequire(\"kwjl0\");\nparcelRequire(\"5XC3n\");\n/**\n * A class implementing the `cacheWillUpdate` lifecycle callback. This makes it\n * easier to add in cacheability checks to requests made via Workbox's built-in\n * strategies.\n *\n * @memberof workbox-cacheable-response\n */ class $b31430f1c8fe0d90$export$86cb7f0d61d3ac3d {\n    /**\n     * To construct a new CacheableResponsePlugin instance you must provide at\n     * least one of the `config` properties.\n     *\n     * If both `statuses` and `headers` are specified, then both conditions must\n     * be met for the `Response` to be considered cacheable.\n     *\n     * @param {Object} config\n     * @param {Array<number>} [config.statuses] One or more status codes that a\n     * `Response` can have and be considered cacheable.\n     * @param {Object<string,string>} [config.headers] A mapping of header names\n     * and expected values that a `Response` can have and be considered cacheable.\n     * If multiple headers are provided, only one needs to be present.\n     */ constructor(config){\n        /**\n         * @param {Object} options\n         * @param {Response} options.response\n         * @return {Response|null}\n         * @private\n         */ this.cacheWillUpdate = async ({ response: response })=>{\n            if (this._cacheableResponse.isResponseCacheable(response)) return response;\n            return null;\n        };\n        this._cacheableResponse = new (0, $kwjl0.CacheableResponse)(config);\n    }\n}\n\n});\n\n\n\nparcelRegister(\"9C22Z\", function(module, exports) {\n$parcel$export(module.exports, \"ExpirationPlugin\", function () { return (parcelRequire(\"6cjo5\")).ExpirationPlugin; });\nparcelRequire(\"5Hkr4\");\n\n});\nparcelRegister(\"5Hkr4\", function(module, exports) {\n\n$parcel$export(module.exports, \"ExpirationPlugin\", function () { return (parcelRequire(\"6cjo5\")).ExpirationPlugin; });\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ \nvar $1wuJf = parcelRequire(\"1wuJf\");\n\nvar $6cjo5 = parcelRequire(\"6cjo5\");\nparcelRequire(\"2rxPV\");\n\n});\nparcelRegister(\"1wuJf\", function(module, exports) {\n\n$parcel$export(module.exports, \"CacheExpiration\", function () { return $11c09db46cf28749$export$ea86921f5d945c00; });\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ parcelRequire(\"hdoOF\");\n\nvar $ewuVQ = parcelRequire(\"ewuVQ\");\nparcelRequire(\"j4Ws3\");\nparcelRequire(\"bLao8\");\n\nvar $4b7eM = parcelRequire(\"4b7eM\");\nparcelRequire(\"2rxPV\");\n/**\n * The `CacheExpiration` class allows you define an expiration and / or\n * limit on the number of responses stored in a\n * [`Cache`](https://developer.mozilla.org/en-US/docs/Web/API/Cache).\n *\n * @memberof workbox-expiration\n */ class $11c09db46cf28749$export$ea86921f5d945c00 {\n    /**\n     * To construct a new CacheExpiration instance you must provide at least\n     * one of the `config` properties.\n     *\n     * @param {string} cacheName Name of the cache to apply restrictions to.\n     * @param {Object} config\n     * @param {number} [config.maxEntries] The maximum number of entries to cache.\n     * Entries used the least will be removed as the maximum is reached.\n     * @param {number} [config.maxAgeSeconds] The maximum age of an entry before\n     * it's treated as stale and removed.\n     * @param {Object} [config.matchOptions] The [`CacheQueryOptions`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/delete#Parameters)\n     * that will be used when calling `delete()` on the cache.\n     */ constructor(cacheName, config = {}){\n        this._isRunning = false;\n        this._rerunRequested = false;\n        this._maxEntries = config.maxEntries;\n        this._maxAgeSeconds = config.maxAgeSeconds;\n        this._matchOptions = config.matchOptions;\n        this._cacheName = cacheName;\n        this._timestampModel = new (0, $4b7eM.CacheTimestampsModel)(cacheName);\n    }\n    /**\n     * Expires entries for the given cache and given criteria.\n     */ async expireEntries() {\n        if (this._isRunning) {\n            this._rerunRequested = true;\n            return;\n        }\n        this._isRunning = true;\n        const minTimestamp = this._maxAgeSeconds ? Date.now() - this._maxAgeSeconds * 1000 : 0;\n        const urlsExpired = await this._timestampModel.expireEntries(minTimestamp, this._maxEntries);\n        // Delete URLs from the cache\n        const cache = await self.caches.open(this._cacheName);\n        for (const url of urlsExpired)await cache.delete(url, this._matchOptions);\n        var url;\n        this._isRunning = false;\n        if (this._rerunRequested) {\n            this._rerunRequested = false;\n            (0, $ewuVQ.dontWaitFor)(this.expireEntries());\n        }\n    }\n    /**\n     * Update the timestamp for the given URL. This ensures the when\n     * removing entries based on maximum entries, most recently used\n     * is accurate or when expiring, the timestamp is up-to-date.\n     *\n     * @param {string} url\n     */ async updateTimestamp(url) {\n        await this._timestampModel.setTimestamp(url, Date.now());\n    }\n    /**\n     * Can be used to check if a URL has expired or not before it's used.\n     *\n     * This requires a look up from IndexedDB, so can be slow.\n     *\n     * Note: This method will not remove the cached entry, call\n     * `expireEntries()` to remove indexedDB and Cache entries.\n     *\n     * @param {string} url\n     * @return {boolean}\n     */ async isURLExpired(url) {\n        if (!this._maxAgeSeconds) return false;\n        else {\n            const timestamp = await this._timestampModel.getTimestamp(url);\n            const expireOlderThan = Date.now() - this._maxAgeSeconds * 1000;\n            return timestamp !== undefined ? timestamp < expireOlderThan : true;\n        }\n    }\n    /**\n     * Removes the IndexedDB object store used to keep track of cache expiration\n     * metadata.\n     */ async delete() {\n        // Make sure we don't attempt another rerun if we're called in the middle of\n        // a cache expiration.\n        this._rerunRequested = false;\n        await this._timestampModel.expireEntries(Infinity); // Expires all.\n    }\n}\n\n});\nparcelRegister(\"ewuVQ\", function(module, exports) {\n\n$parcel$export(module.exports, \"dontWaitFor\", function () { return $a92c0c4ef8f2c6ed$export$13dca588e4212d04; });\n/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ parcelRequire(\"j6K0f\");\nfunction $a92c0c4ef8f2c6ed$export$13dca588e4212d04(promise) {\n    // Effective no-op.\n    promise.then(()=>{});\n}\n\n});\n\nparcelRegister(\"4b7eM\", function(module, exports) {\n\n$parcel$export(module.exports, \"CacheTimestampsModel\", function () { return $30adcdad86646d84$export$3ea434045ca20946; });\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ \nvar $bKuVu = parcelRequire(\"bKuVu\");\nparcelRequire(\"2rxPV\");\nconst $30adcdad86646d84$var$DB_NAME = 'workbox-expiration';\nconst $30adcdad86646d84$var$CACHE_OBJECT_STORE = 'cache-entries';\nconst $30adcdad86646d84$var$normalizeURL = (unNormalizedUrl)=>{\n    const url = new URL(unNormalizedUrl, location.href);\n    url.hash = '';\n    return url.href;\n};\n/**\n * Returns the timestamp model.\n *\n * @private\n */ class $30adcdad86646d84$export$3ea434045ca20946 {\n    /**\n     *\n     * @param {string} cacheName\n     *\n     * @private\n     */ constructor(cacheName){\n        this._db = null;\n        this._cacheName = cacheName;\n    }\n    /**\n     * Performs an upgrade of indexedDB.\n     *\n     * @param {IDBPDatabase<CacheDbSchema>} db\n     *\n     * @private\n     */ _upgradeDb(db) {\n        // TODO(philipwalton): EdgeHTML doesn't support arrays as a keyPath, so we\n        // have to use the `id` keyPath here and create our own values (a\n        // concatenation of `url + cacheName`) instead of simply using\n        // `keyPath: ['url', 'cacheName']`, which is supported in other browsers.\n        const objStore = db.createObjectStore($30adcdad86646d84$var$CACHE_OBJECT_STORE, {\n            keyPath: 'id'\n        });\n        // TODO(philipwalton): once we don't have to support EdgeHTML, we can\n        // create a single index with the keyPath `['cacheName', 'timestamp']`\n        // instead of doing both these indexes.\n        objStore.createIndex('cacheName', 'cacheName', {\n            unique: false\n        });\n        objStore.createIndex('timestamp', 'timestamp', {\n            unique: false\n        });\n    }\n    /**\n     * Performs an upgrade of indexedDB and deletes deprecated DBs.\n     *\n     * @param {IDBPDatabase<CacheDbSchema>} db\n     *\n     * @private\n     */ _upgradeDbAndDeleteOldDbs(db) {\n        this._upgradeDb(db);\n        if (this._cacheName) (0, $bKuVu.deleteDB)(this._cacheName);\n    }\n    /**\n     * @param {string} url\n     * @param {number} timestamp\n     *\n     * @private\n     */ async setTimestamp(url, timestamp) {\n        url = $30adcdad86646d84$var$normalizeURL(url);\n        const entry = {\n            url: url,\n            timestamp: timestamp,\n            cacheName: this._cacheName,\n            // Creating an ID from the URL and cache name won't be necessary once\n            // Edge switches to Chromium and all browsers we support work with\n            // array keyPaths.\n            id: this._getId(url)\n        };\n        const db = await this.getDb();\n        const tx = db.transaction($30adcdad86646d84$var$CACHE_OBJECT_STORE, 'readwrite', {\n            durability: 'relaxed'\n        });\n        await tx.store.put(entry);\n        await tx.done;\n    }\n    /**\n     * Returns the timestamp stored for a given URL.\n     *\n     * @param {string} url\n     * @return {number | undefined}\n     *\n     * @private\n     */ async getTimestamp(url) {\n        const db = await this.getDb();\n        const entry = await db.get($30adcdad86646d84$var$CACHE_OBJECT_STORE, this._getId(url));\n        return entry === null || entry === void 0 ? void 0 : entry.timestamp;\n    }\n    /**\n     * Iterates through all the entries in the object store (from newest to\n     * oldest) and removes entries once either `maxCount` is reached or the\n     * entry's timestamp is less than `minTimestamp`.\n     *\n     * @param {number} minTimestamp\n     * @param {number} maxCount\n     * @return {Array<string>}\n     *\n     * @private\n     */ async expireEntries(minTimestamp, maxCount) {\n        const db = await this.getDb();\n        let cursor = await db.transaction($30adcdad86646d84$var$CACHE_OBJECT_STORE).store.index('timestamp').openCursor(null, 'prev');\n        const entriesToDelete = [];\n        let entriesNotDeletedCount = 0;\n        while(cursor){\n            const result = cursor.value;\n            // TODO(philipwalton): once we can use a multi-key index, we\n            // won't have to check `cacheName` here.\n            if (result.cacheName === this._cacheName) {\n                // Delete an entry if it's older than the max age or\n                // if we already have the max number allowed.\n                if (minTimestamp && result.timestamp < minTimestamp || maxCount && entriesNotDeletedCount >= maxCount) // TODO(philipwalton): we should be able to delete the\n                // entry right here, but doing so causes an iteration\n                // bug in Safari stable (fixed in TP). Instead we can\n                // store the keys of the entries to delete, and then\n                // delete the separate transactions.\n                // https://github.com/GoogleChrome/workbox/issues/1978\n                // cursor.delete();\n                // We only need to return the URL, not the whole entry.\n                entriesToDelete.push(cursor.value);\n                else entriesNotDeletedCount++;\n            }\n            cursor = await cursor.continue();\n        }\n        // TODO(philipwalton): once the Safari bug in the following issue is fixed,\n        // we should be able to remove this loop and do the entry deletion in the\n        // cursor loop above:\n        // https://github.com/GoogleChrome/workbox/issues/1978\n        const urlsDeleted = [];\n        for (const entry of entriesToDelete){\n            await db.delete($30adcdad86646d84$var$CACHE_OBJECT_STORE, entry.id);\n            urlsDeleted.push(entry.url);\n        }\n        return urlsDeleted;\n    }\n    /**\n     * Takes a URL and returns an ID that will be unique in the object store.\n     *\n     * @param {string} url\n     * @return {string}\n     *\n     * @private\n     */ _getId(url) {\n        // Creating an ID from the URL and cache name won't be necessary once\n        // Edge switches to Chromium and all browsers we support work with\n        // array keyPaths.\n        return this._cacheName + '|' + $30adcdad86646d84$var$normalizeURL(url);\n    }\n    /**\n     * Returns an open connection to the database.\n     *\n     * @private\n     */ async getDb() {\n        if (!this._db) this._db = await (0, $bKuVu.openDB)($30adcdad86646d84$var$DB_NAME, 1, {\n            upgrade: this._upgradeDbAndDeleteOldDbs.bind(this)\n        });\n        return this._db;\n    }\n}\n\n});\nparcelRegister(\"bKuVu\", function(module, exports) {\n\n$parcel$export(module.exports, \"openDB\", function () { return $88dbfae9e736e969$export$ca0ed41b1a2af7e; });\n$parcel$export(module.exports, \"deleteDB\", function () { return $88dbfae9e736e969$export$9d6df0ac66a98bb2; });\n\nvar $hvqz6 = parcelRequire(\"hvqz6\");\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */ function $88dbfae9e736e969$export$ca0ed41b1a2af7e(name, version, { blocked: blocked, upgrade: upgrade, blocking: blocking, terminated: terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = (0, $hvqz6.w)(request);\n    if (upgrade) request.addEventListener('upgradeneeded', (event)=>{\n        upgrade((0, $hvqz6.w)(request.result), event.oldVersion, event.newVersion, (0, $hvqz6.w)(request.transaction), event);\n    });\n    if (blocked) request.addEventListener('blocked', (event)=>blocked(// Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event.newVersion, event));\n    openPromise.then((db)=>{\n        if (terminated) db.addEventListener('close', ()=>terminated());\n        if (blocking) db.addEventListener('versionchange', (event)=>blocking(event.oldVersion, event.newVersion, event));\n    }).catch(()=>{});\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */ function $88dbfae9e736e969$export$9d6df0ac66a98bb2(name, { blocked: blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked) request.addEventListener('blocked', (event)=>blocked(// Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event));\n    return (0, $hvqz6.w)(request).then(()=>undefined);\n}\nconst $88dbfae9e736e969$var$readMethods = [\n    'get',\n    'getKey',\n    'getAll',\n    'getAllKeys',\n    'count'\n];\nconst $88dbfae9e736e969$var$writeMethods = [\n    'put',\n    'add',\n    'delete',\n    'clear'\n];\nconst $88dbfae9e736e969$var$cachedMethods = new Map();\nfunction $88dbfae9e736e969$var$getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase && !(prop in target) && typeof prop === 'string')) return;\n    if ($88dbfae9e736e969$var$cachedMethods.get(prop)) return $88dbfae9e736e969$var$cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = $88dbfae9e736e969$var$writeMethods.includes(targetFuncName);\n    if (// Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) || !(isWrite || $88dbfae9e736e969$var$readMethods.includes(targetFuncName))) return;\n    const method = async function(storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex) target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done\n        ]))[0];\n    };\n    $88dbfae9e736e969$var$cachedMethods.set(prop, method);\n    return method;\n}\n(0, $hvqz6.r)((oldTraps)=>({\n        ...oldTraps,\n        get: (target, prop, receiver)=>$88dbfae9e736e969$var$getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n        has: (target, prop)=>!!$88dbfae9e736e969$var$getMethod(target, prop) || oldTraps.has(target, prop)\n    }));\n\n});\nparcelRegister(\"hvqz6\", function(module, exports) {\n\n$parcel$export(module.exports, \"w\", function () { return $cbe9f03a448ab574$export$efccba1c4a2ef57b; });\n$parcel$export(module.exports, \"r\", function () { return $cbe9f03a448ab574$export$43caf9889c228507; });\nconst $cbe9f03a448ab574$export$23f2a1d2818174ef = (object, constructors)=>constructors.some((c)=>object instanceof c);\nlet $cbe9f03a448ab574$var$idbProxyableTypes;\nlet $cbe9f03a448ab574$var$cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction $cbe9f03a448ab574$var$getIdbProxyableTypes() {\n    return $cbe9f03a448ab574$var$idbProxyableTypes || ($cbe9f03a448ab574$var$idbProxyableTypes = [\n        IDBDatabase,\n        IDBObjectStore,\n        IDBIndex,\n        IDBCursor,\n        IDBTransaction\n    ]);\n}\n// This is a function to prevent it throwing up in node environments.\nfunction $cbe9f03a448ab574$var$getCursorAdvanceMethods() {\n    return $cbe9f03a448ab574$var$cursorAdvanceMethods || ($cbe9f03a448ab574$var$cursorAdvanceMethods = [\n        IDBCursor.prototype.advance,\n        IDBCursor.prototype.continue,\n        IDBCursor.prototype.continuePrimaryKey\n    ]);\n}\nconst $cbe9f03a448ab574$var$cursorRequestMap = new WeakMap();\nconst $cbe9f03a448ab574$var$transactionDoneMap = new WeakMap();\nconst $cbe9f03a448ab574$var$transactionStoreNamesMap = new WeakMap();\nconst $cbe9f03a448ab574$var$transformCache = new WeakMap();\nconst $cbe9f03a448ab574$export$407448d2b89b1813 = new WeakMap();\nfunction $cbe9f03a448ab574$var$promisifyRequest(request) {\n    const promise = new Promise((resolve, reject)=>{\n        const unlisten = ()=>{\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = ()=>{\n            resolve($cbe9f03a448ab574$export$efccba1c4a2ef57b(request.result));\n            unlisten();\n        };\n        const error = ()=>{\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise.then((value)=>{\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) $cbe9f03a448ab574$var$cursorRequestMap.set(value, request);\n    // Catching to avoid \"Uncaught Promise exceptions\"\n    }).catch(()=>{});\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    $cbe9f03a448ab574$export$407448d2b89b1813.set(promise, request);\n    return promise;\n}\nfunction $cbe9f03a448ab574$var$cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if ($cbe9f03a448ab574$var$transactionDoneMap.has(tx)) return;\n    const done = new Promise((resolve, reject)=>{\n        const unlisten = ()=>{\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = ()=>{\n            resolve();\n            unlisten();\n        };\n        const error = ()=>{\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    $cbe9f03a448ab574$var$transactionDoneMap.set(tx, done);\n}\nlet $cbe9f03a448ab574$var$idbProxyTraps = {\n    get (target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done') return $cbe9f03a448ab574$var$transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') return target.objectStoreNames || $cbe9f03a448ab574$var$transactionStoreNamesMap.get(target);\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') return receiver.objectStoreNames[1] ? undefined : receiver.objectStore(receiver.objectStoreNames[0]);\n        }\n        // Else transform whatever we get back.\n        return $cbe9f03a448ab574$export$efccba1c4a2ef57b(target[prop]);\n    },\n    set (target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has (target, prop) {\n        if (target instanceof IDBTransaction && (prop === 'done' || prop === 'store')) return true;\n        return prop in target;\n    }\n};\nfunction $cbe9f03a448ab574$export$43caf9889c228507(callback) {\n    $cbe9f03a448ab574$var$idbProxyTraps = callback($cbe9f03a448ab574$var$idbProxyTraps);\n}\nfunction $cbe9f03a448ab574$var$wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction && !('objectStoreNames' in IDBTransaction.prototype)) return function(storeNames, ...args) {\n        const tx = func.call($cbe9f03a448ab574$export$3b14a55fb2447963(this), storeNames, ...args);\n        $cbe9f03a448ab574$var$transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [\n            storeNames\n        ]);\n        return $cbe9f03a448ab574$export$efccba1c4a2ef57b(tx);\n    };\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if ($cbe9f03a448ab574$var$getCursorAdvanceMethods().includes(func)) return function(...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        func.apply($cbe9f03a448ab574$export$3b14a55fb2447963(this), args);\n        return $cbe9f03a448ab574$export$efccba1c4a2ef57b($cbe9f03a448ab574$var$cursorRequestMap.get(this));\n    };\n    return function(...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return $cbe9f03a448ab574$export$efccba1c4a2ef57b(func.apply($cbe9f03a448ab574$export$3b14a55fb2447963(this), args));\n    };\n}\nfunction $cbe9f03a448ab574$var$transformCachableValue(value) {\n    if (typeof value === 'function') return $cbe9f03a448ab574$var$wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction) $cbe9f03a448ab574$var$cacheDonePromiseForTransaction(value);\n    if ($cbe9f03a448ab574$export$23f2a1d2818174ef(value, $cbe9f03a448ab574$var$getIdbProxyableTypes())) return new Proxy(value, $cbe9f03a448ab574$var$idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction $cbe9f03a448ab574$export$efccba1c4a2ef57b(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest) return $cbe9f03a448ab574$var$promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if ($cbe9f03a448ab574$var$transformCache.has(value)) return $cbe9f03a448ab574$var$transformCache.get(value);\n    const newValue = $cbe9f03a448ab574$var$transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        $cbe9f03a448ab574$var$transformCache.set(value, newValue);\n        $cbe9f03a448ab574$export$407448d2b89b1813.set(newValue, value);\n    }\n    return newValue;\n}\nconst $cbe9f03a448ab574$export$3b14a55fb2447963 = (value)=>$cbe9f03a448ab574$export$407448d2b89b1813.get(value);\n\n});\n\n\nparcelRegister(\"2rxPV\", function(module, exports) {\n\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:expiration:7.2.0'] && _();\n} catch (e) {}\n\n});\n\n\n\nparcelRegister(\"6cjo5\", function(module, exports) {\n\n$parcel$export(module.exports, \"ExpirationPlugin\", function () { return $4832e7094f67c6d0$export$90f76ceeb98e6f81; });\n/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ parcelRequire(\"hdoOF\");\n\nvar $1SZVT = parcelRequire(\"1SZVT\");\n\nvar $ewuVQ = parcelRequire(\"ewuVQ\");\nparcelRequire(\"dBE2C\");\nparcelRequire(\"j4Ws3\");\n\nvar $knpH0 = parcelRequire(\"knpH0\");\n\nvar $bLao8 = parcelRequire(\"bLao8\");\n\nvar $1wuJf = parcelRequire(\"1wuJf\");\nparcelRequire(\"2rxPV\");\n/**\n * This plugin can be used in a `workbox-strategy` to regularly enforce a\n * limit on the age and / or the number of cached requests.\n *\n * It can only be used with `workbox-strategy` instances that have a\n * [custom `cacheName` property set](/web/tools/workbox/guides/configure-workbox#custom_cache_names_in_strategies).\n * In other words, it can't be used to expire entries in strategy that uses the\n * default runtime cache name.\n *\n * Whenever a cached response is used or updated, this plugin will look\n * at the associated cache and remove any old or extra responses.\n *\n * When using `maxAgeSeconds`, responses may be used *once* after expiring\n * because the expiration clean up will not have occurred until *after* the\n * cached response has been used. If the response has a \"Date\" header, then\n * a light weight expiration check is performed and the response will not be\n * used immediately.\n *\n * When using `maxEntries`, the entry least-recently requested will be removed\n * from the cache first.\n *\n * @memberof workbox-expiration\n */ class $4832e7094f67c6d0$export$90f76ceeb98e6f81 {\n    /**\n     * @param {ExpirationPluginOptions} config\n     * @param {number} [config.maxEntries] The maximum number of entries to cache.\n     * Entries used the least will be removed as the maximum is reached.\n     * @param {number} [config.maxAgeSeconds] The maximum age of an entry before\n     * it's treated as stale and removed.\n     * @param {Object} [config.matchOptions] The [`CacheQueryOptions`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/delete#Parameters)\n     * that will be used when calling `delete()` on the cache.\n     * @param {boolean} [config.purgeOnQuotaError] Whether to opt this cache in to\n     * automatic deletion if the available storage quota has been exceeded.\n     */ constructor(config = {}){\n        /**\n         * A \"lifecycle\" callback that will be triggered automatically by the\n         * `workbox-strategies` handlers when a `Response` is about to be returned\n         * from a [Cache](https://developer.mozilla.org/en-US/docs/Web/API/Cache) to\n         * the handler. It allows the `Response` to be inspected for freshness and\n         * prevents it from being used if the `Response`'s `Date` header value is\n         * older than the configured `maxAgeSeconds`.\n         *\n         * @param {Object} options\n         * @param {string} options.cacheName Name of the cache the response is in.\n         * @param {Response} options.cachedResponse The `Response` object that's been\n         *     read from a cache and whose freshness should be checked.\n         * @return {Response} Either the `cachedResponse`, if it's\n         *     fresh, or `null` if the `Response` is older than `maxAgeSeconds`.\n         *\n         * @private\n         */ this.cachedResponseWillBeUsed = async ({ event: event, request: request, cacheName: cacheName, cachedResponse: cachedResponse })=>{\n            if (!cachedResponse) return null;\n            const isFresh = this._isResponseDateFresh(cachedResponse);\n            // Expire entries to ensure that even if the expiration date has\n            // expired, it'll only be used once.\n            const cacheExpiration = this._getCacheExpiration(cacheName);\n            (0, $ewuVQ.dontWaitFor)(cacheExpiration.expireEntries());\n            // Update the metadata for the request URL to the current timestamp,\n            // but don't `await` it as we don't want to block the response.\n            const updateTimestampDone = cacheExpiration.updateTimestamp(request.url);\n            if (event) try {\n                event.waitUntil(updateTimestampDone);\n            } catch (error) {}\n            return isFresh ? cachedResponse : null;\n        };\n        /**\n         * A \"lifecycle\" callback that will be triggered automatically by the\n         * `workbox-strategies` handlers when an entry is added to a cache.\n         *\n         * @param {Object} options\n         * @param {string} options.cacheName Name of the cache that was updated.\n         * @param {string} options.request The Request for the cached entry.\n         *\n         * @private\n         */ this.cacheDidUpdate = async ({ cacheName: cacheName, request: request })=>{\n            const cacheExpiration = this._getCacheExpiration(cacheName);\n            await cacheExpiration.updateTimestamp(request.url);\n            await cacheExpiration.expireEntries();\n        };\n        this._config = config;\n        this._maxAgeSeconds = config.maxAgeSeconds;\n        this._cacheExpirations = new Map();\n        if (config.purgeOnQuotaError) (0, $knpH0.registerQuotaErrorCallback)(()=>this.deleteCacheAndMetadata());\n    }\n    /**\n     * A simple helper method to return a CacheExpiration instance for a given\n     * cache name.\n     *\n     * @param {string} cacheName\n     * @return {CacheExpiration}\n     *\n     * @private\n     */ _getCacheExpiration(cacheName) {\n        if (cacheName === (0, $1SZVT.cacheNames).getRuntimeName()) throw new (0, $bLao8.WorkboxError)('expire-custom-caches-only');\n        let cacheExpiration = this._cacheExpirations.get(cacheName);\n        if (!cacheExpiration) {\n            cacheExpiration = new (0, $1wuJf.CacheExpiration)(cacheName, this._config);\n            this._cacheExpirations.set(cacheName, cacheExpiration);\n        }\n        return cacheExpiration;\n    }\n    /**\n     * @param {Response} cachedResponse\n     * @return {boolean}\n     *\n     * @private\n     */ _isResponseDateFresh(cachedResponse) {\n        if (!this._maxAgeSeconds) // We aren't expiring by age, so return true, it's fresh\n        return true;\n        // Check if the 'date' header will suffice a quick expiration check.\n        // See https://github.com/GoogleChromeLabs/sw-toolbox/issues/164 for\n        // discussion.\n        const dateHeaderTimestamp = this._getDateHeaderTimestamp(cachedResponse);\n        if (dateHeaderTimestamp === null) // Unable to parse date, so assume it's fresh.\n        return true;\n        // If we have a valid headerTime, then our response is fresh iff the\n        // headerTime plus maxAgeSeconds is greater than the current time.\n        const now = Date.now();\n        return dateHeaderTimestamp >= now - this._maxAgeSeconds * 1000;\n    }\n    /**\n     * This method will extract the data header and parse it into a useful\n     * value.\n     *\n     * @param {Response} cachedResponse\n     * @return {number|null}\n     *\n     * @private\n     */ _getDateHeaderTimestamp(cachedResponse) {\n        if (!cachedResponse.headers.has('date')) return null;\n        const dateHeader = cachedResponse.headers.get('date');\n        const parsedDate = new Date(dateHeader);\n        const headerTime = parsedDate.getTime();\n        // If the Date header was invalid for some reason, parsedDate.getTime()\n        // will return NaN.\n        if (isNaN(headerTime)) return null;\n        return headerTime;\n    }\n    /**\n     * This is a helper method that performs two operations:\n     *\n     * - Deletes *all* the underlying Cache instances associated with this plugin\n     * instance, by calling caches.delete() on your behalf.\n     * - Deletes the metadata from IndexedDB used to keep track of expiration\n     * details for each Cache instance.\n     *\n     * When using cache expiration, calling this method is preferable to calling\n     * `caches.delete()` directly, since this will ensure that the IndexedDB\n     * metadata is also cleanly removed and open IndexedDB instances are deleted.\n     *\n     * Note that if you're *not* using cache expiration for a given cache, calling\n     * `caches.delete()` and passing in the cache's name should be sufficient.\n     * There is no Workbox-specific method needed for cleanup in that case.\n     */ async deleteCacheAndMetadata() {\n        // Do this one at a time instead of all at once via `Promise.all()` to\n        // reduce the chance of inconsistency if a promise rejects.\n        for (const [cacheName, cacheExpiration] of this._cacheExpirations){\n            await self.caches.delete(cacheName);\n            await cacheExpiration.delete();\n        }\n        // Reset this._cacheExpirations to its initial state.\n        this._cacheExpirations = new Map();\n    }\n}\n\n});\nparcelRegister(\"knpH0\", function(module, exports) {\n\n$parcel$export(module.exports, \"registerQuotaErrorCallback\", function () { return $ed59e2a4e4cf6039$export$52ec5cc2119a4bb4; });\n/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/ parcelRequire(\"j4Ws3\");\nparcelRequire(\"hdoOF\");\n\nvar $9CgW0 = parcelRequire(\"9CgW0\");\nparcelRequire(\"j6K0f\");\n/**\n * Adds a function to the set of quotaErrorCallbacks that will be executed if\n * there's a quota error.\n *\n * @param {Function} callback\n * @memberof workbox-core\n */ // Can't change Function type\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction $ed59e2a4e4cf6039$export$52ec5cc2119a4bb4(callback) {\n    (0, $9CgW0.quotaErrorCallbacks).add(callback);\n}\n\n});\n\n\n\n\n\n\nparcelRequire(\"fcCO2\");\n})();\n//# sourceMappingURL=service-worker.js.map\n","import { registerRoute } from 'workbox-routing';\nimport {\n  NetworkFirst,\n  StaleWhileRevalidate,\n  CacheFirst,\n} from 'workbox-strategies';\nimport { CacheableResponsePlugin } from 'workbox-cacheable-response';\nimport { ExpirationPlugin } from 'workbox-expiration';\n\n// Cache page navigations that result only in 200 responses.\nregisterRoute(\n  ({ request }) => request.mode === 'navigate',\n  new NetworkFirst({\n    cacheName: 'pages',\n    plugins: [new CacheableResponsePlugin({ statuses: [200] })],\n  })\n);\n\n// Cache dust api\nregisterRoute(\n  ({url}) =>\n    url.origin === 'https://data.dust.events/',\n  new StaleWhileRevalidate({\n    cacheName: 'api-cache',\n    plugins: [\n      new CacheableResponsePlugin({\n        statuses: [0, 200],\n      }),\n    ],\n  })\n);\n\n// Cache CSS, JS, and web worker requests.\nregisterRoute(\n  ({ request }) =>\n    request.destination === 'style' ||\n    request.destination === 'script' ||\n    request.destination === 'worker',\n  new StaleWhileRevalidate({\n    cacheName: 'assets',\n    plugins: [\n      new CacheableResponsePlugin({\n        statuses: [200],\n      }),\n    ],\n  })\n);\n\n// Cache images.\nregisterRoute(\n  ({ request }) => request.destination === 'image',\n  new CacheFirst({\n    cacheName: 'images',\n    plugins: [\n      new CacheableResponsePlugin({\n        statuses: [200],\n      }),\n      new ExpirationPlugin({\n        maxEntries: 60,\n        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 Days\n      }),\n    ],\n  })\n);\n","export * from './index.js';","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { NavigationRoute, } from './NavigationRoute.js';\nimport { RegExpRoute } from './RegExpRoute.js';\nimport { registerRoute } from './registerRoute.js';\nimport { Route } from './Route.js';\nimport { Router } from './Router.js';\nimport { setCatchHandler } from './setCatchHandler.js';\nimport { setDefaultHandler } from './setDefaultHandler.js';\nimport './_version.js';\n/**\n * @module workbox-routing\n */\nexport { NavigationRoute, RegExpRoute, registerRoute, Route, Router, setCatchHandler, setDefaultHandler, };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { Route } from './Route.js';\nimport './_version.js';\n/**\n * NavigationRoute makes it easy to create a\n * {@link workbox-routing.Route} that matches for browser\n * [navigation requests]{@link https://developers.google.com/web/fundamentals/primers/service-workers/high-performance-loading#first_what_are_navigation_requests}.\n *\n * It will only match incoming Requests whose\n * {@link https://fetch.spec.whatwg.org/#concept-request-mode|mode}\n * is set to `navigate`.\n *\n * You can optionally only apply this route to a subset of navigation requests\n * by using one or both of the `denylist` and `allowlist` parameters.\n *\n * @memberof workbox-routing\n * @extends workbox-routing.Route\n */\nclass NavigationRoute extends Route {\n    /**\n     * If both `denylist` and `allowlist` are provided, the `denylist` will\n     * take precedence and the request will not match this route.\n     *\n     * The regular expressions in `allowlist` and `denylist`\n     * are matched against the concatenated\n     * [`pathname`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/pathname}\n     * and [`search`]{@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLHyperlinkElementUtils/search}\n     * portions of the requested URL.\n     *\n     * *Note*: These RegExps may be evaluated against every destination URL during\n     * a navigation. Avoid using\n     * [complex RegExps](https://github.com/GoogleChrome/workbox/issues/3077),\n     * or else your users may see delays when navigating your site.\n     *\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {Object} options\n     * @param {Array<RegExp>} [options.denylist] If any of these patterns match,\n     * the route will not handle the request (even if a allowlist RegExp matches).\n     * @param {Array<RegExp>} [options.allowlist=[/./]] If any of these patterns\n     * match the URL's pathname and search parameter, the route will handle the\n     * request (assuming the denylist doesn't match).\n     */\n    constructor(handler, { allowlist = [/./], denylist = [] } = {}) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isArrayOfClass(allowlist, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'NavigationRoute',\n                funcName: 'constructor',\n                paramName: 'options.allowlist',\n            });\n            assert.isArrayOfClass(denylist, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'NavigationRoute',\n                funcName: 'constructor',\n                paramName: 'options.denylist',\n            });\n        }\n        super((options) => this._match(options), handler);\n        this._allowlist = allowlist;\n        this._denylist = denylist;\n    }\n    /**\n     * Routes match handler.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {Request} options.request\n     * @return {boolean}\n     *\n     * @private\n     */\n    _match({ url, request }) {\n        if (request && request.mode !== 'navigate') {\n            return false;\n        }\n        const pathnameAndSearch = url.pathname + url.search;\n        for (const regExp of this._denylist) {\n            if (regExp.test(pathnameAndSearch)) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log(`The navigation route ${pathnameAndSearch} is not ` +\n                        `being used, since the URL matches this denylist pattern: ` +\n                        `${regExp.toString()}`);\n                }\n                return false;\n            }\n        }\n        if (this._allowlist.some((regExp) => regExp.test(pathnameAndSearch))) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`The navigation route ${pathnameAndSearch} ` + `is being used.`);\n            }\n            return true;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.log(`The navigation route ${pathnameAndSearch} is not ` +\n                `being used, since the URL being navigated to doesn't ` +\n                `match the allowlist.`);\n        }\n        return false;\n    }\n}\nexport { NavigationRoute };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { WorkboxError } from '../_private/WorkboxError.js';\nimport '../_version.js';\n/*\n * This method throws if the supplied value is not an array.\n * The destructed values are required to produce a meaningful error for users.\n * The destructed and restructured object is so it's clear what is\n * needed.\n */\nconst isArray = (value, details) => {\n    if (!Array.isArray(value)) {\n        throw new WorkboxError('not-an-array', details);\n    }\n};\nconst hasMethod = (object, expectedMethod, details) => {\n    const type = typeof object[expectedMethod];\n    if (type !== 'function') {\n        details['expectedMethod'] = expectedMethod;\n        throw new WorkboxError('missing-a-method', details);\n    }\n};\nconst isType = (object, expectedType, details) => {\n    if (typeof object !== expectedType) {\n        details['expectedType'] = expectedType;\n        throw new WorkboxError('incorrect-type', details);\n    }\n};\nconst isInstance = (object, \n// Need the general type to do the check later.\n// eslint-disable-next-line @typescript-eslint/ban-types\nexpectedClass, details) => {\n    if (!(object instanceof expectedClass)) {\n        details['expectedClassName'] = expectedClass.name;\n        throw new WorkboxError('incorrect-class', details);\n    }\n};\nconst isOneOf = (value, validValues, details) => {\n    if (!validValues.includes(value)) {\n        details['validValueDescription'] = `Valid values are ${JSON.stringify(validValues)}.`;\n        throw new WorkboxError('invalid-value', details);\n    }\n};\nconst isArrayOfClass = (value, \n// Need general type to do check later.\nexpectedClass, // eslint-disable-line\ndetails) => {\n    const error = new WorkboxError('not-array-of-class', details);\n    if (!Array.isArray(value)) {\n        throw error;\n    }\n    for (const item of value) {\n        if (!(item instanceof expectedClass)) {\n            throw error;\n        }\n    }\n};\nconst finalAssertExports = process.env.NODE_ENV === 'production'\n    ? null\n    : {\n        hasMethod,\n        isArray,\n        isInstance,\n        isOneOf,\n        isType,\n        isArrayOfClass,\n    };\nexport { finalAssertExports as assert };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messageGenerator } from '../models/messages/messageGenerator.js';\nimport '../_version.js';\n/**\n * Workbox errors should be thrown with this class.\n * This allows use to ensure the type easily in tests,\n * helps developers identify errors from workbox\n * easily and allows use to optimise error\n * messages correctly.\n *\n * @private\n */\nclass WorkboxError extends Error {\n    /**\n     *\n     * @param {string} errorCode The error code that\n     * identifies this particular error.\n     * @param {Object=} details Any relevant arguments\n     * that will help developers identify issues should\n     * be added as a key on the context object.\n     */\n    constructor(errorCode, details) {\n        const message = messageGenerator(errorCode, details);\n        super(message);\n        this.name = errorCode;\n        this.details = details;\n    }\n}\nexport { WorkboxError };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { messages } from './messages.js';\nimport '../../_version.js';\nconst fallback = (code, ...args) => {\n    let msg = code;\n    if (args.length > 0) {\n        msg += ` :: ${JSON.stringify(args)}`;\n    }\n    return msg;\n};\nconst generatorFunction = (code, details = {}) => {\n    const message = messages[code];\n    if (!message) {\n        throw new Error(`Unable to find message for code '${code}'.`);\n    }\n    return message(details);\n};\nexport const messageGenerator = process.env.NODE_ENV === 'production' ? fallback : generatorFunction;\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../../_version.js';\nexport const messages = {\n    'invalid-value': ({ paramName, validValueDescription, value }) => {\n        if (!paramName || !validValueDescription) {\n            throw new Error(`Unexpected input to 'invalid-value' error.`);\n        }\n        return (`The '${paramName}' parameter was given a value with an ` +\n            `unexpected value. ${validValueDescription} Received a value of ` +\n            `${JSON.stringify(value)}.`);\n    },\n    'not-an-array': ({ moduleName, className, funcName, paramName }) => {\n        if (!moduleName || !className || !funcName || !paramName) {\n            throw new Error(`Unexpected input to 'not-an-array' error.`);\n        }\n        return (`The parameter '${paramName}' passed into ` +\n            `'${moduleName}.${className}.${funcName}()' must be an array.`);\n    },\n    'incorrect-type': ({ expectedType, paramName, moduleName, className, funcName, }) => {\n        if (!expectedType || !paramName || !moduleName || !funcName) {\n            throw new Error(`Unexpected input to 'incorrect-type' error.`);\n        }\n        const classNameStr = className ? `${className}.` : '';\n        return (`The parameter '${paramName}' passed into ` +\n            `'${moduleName}.${classNameStr}` +\n            `${funcName}()' must be of type ${expectedType}.`);\n    },\n    'incorrect-class': ({ expectedClassName, paramName, moduleName, className, funcName, isReturnValueProblem, }) => {\n        if (!expectedClassName || !moduleName || !funcName) {\n            throw new Error(`Unexpected input to 'incorrect-class' error.`);\n        }\n        const classNameStr = className ? `${className}.` : '';\n        if (isReturnValueProblem) {\n            return (`The return value from ` +\n                `'${moduleName}.${classNameStr}${funcName}()' ` +\n                `must be an instance of class ${expectedClassName}.`);\n        }\n        return (`The parameter '${paramName}' passed into ` +\n            `'${moduleName}.${classNameStr}${funcName}()' ` +\n            `must be an instance of class ${expectedClassName}.`);\n    },\n    'missing-a-method': ({ expectedMethod, paramName, moduleName, className, funcName, }) => {\n        if (!expectedMethod ||\n            !paramName ||\n            !moduleName ||\n            !className ||\n            !funcName) {\n            throw new Error(`Unexpected input to 'missing-a-method' error.`);\n        }\n        return (`${moduleName}.${className}.${funcName}() expected the ` +\n            `'${paramName}' parameter to expose a '${expectedMethod}' method.`);\n    },\n    'add-to-cache-list-unexpected-type': ({ entry }) => {\n        return (`An unexpected entry was passed to ` +\n            `'workbox-precaching.PrecacheController.addToCacheList()' The entry ` +\n            `'${JSON.stringify(entry)}' isn't supported. You must supply an array of ` +\n            `strings with one or more characters, objects with a url property or ` +\n            `Request objects.`);\n    },\n    'add-to-cache-list-conflicting-entries': ({ firstEntry, secondEntry }) => {\n        if (!firstEntry || !secondEntry) {\n            throw new Error(`Unexpected input to ` + `'add-to-cache-list-duplicate-entries' error.`);\n        }\n        return (`Two of the entries passed to ` +\n            `'workbox-precaching.PrecacheController.addToCacheList()' had the URL ` +\n            `${firstEntry} but different revision details. Workbox is ` +\n            `unable to cache and version the asset correctly. Please remove one ` +\n            `of the entries.`);\n    },\n    'plugin-error-request-will-fetch': ({ thrownErrorMessage }) => {\n        if (!thrownErrorMessage) {\n            throw new Error(`Unexpected input to ` + `'plugin-error-request-will-fetch', error.`);\n        }\n        return (`An error was thrown by a plugins 'requestWillFetch()' method. ` +\n            `The thrown error message was: '${thrownErrorMessage}'.`);\n    },\n    'invalid-cache-name': ({ cacheNameId, value }) => {\n        if (!cacheNameId) {\n            throw new Error(`Expected a 'cacheNameId' for error 'invalid-cache-name'`);\n        }\n        return (`You must provide a name containing at least one character for ` +\n            `setCacheDetails({${cacheNameId}: '...'}). Received a value of ` +\n            `'${JSON.stringify(value)}'`);\n    },\n    'unregister-route-but-not-found-with-method': ({ method }) => {\n        if (!method) {\n            throw new Error(`Unexpected input to ` +\n                `'unregister-route-but-not-found-with-method' error.`);\n        }\n        return (`The route you're trying to unregister was not  previously ` +\n            `registered for the method type '${method}'.`);\n    },\n    'unregister-route-route-not-registered': () => {\n        return (`The route you're trying to unregister was not previously ` +\n            `registered.`);\n    },\n    'queue-replay-failed': ({ name }) => {\n        return `Replaying the background sync queue '${name}' failed.`;\n    },\n    'duplicate-queue-name': ({ name }) => {\n        return (`The Queue name '${name}' is already being used. ` +\n            `All instances of backgroundSync.Queue must be given unique names.`);\n    },\n    'expired-test-without-max-age': ({ methodName, paramName }) => {\n        return (`The '${methodName}()' method can only be used when the ` +\n            `'${paramName}' is used in the constructor.`);\n    },\n    'unsupported-route-type': ({ moduleName, className, funcName, paramName }) => {\n        return (`The supplied '${paramName}' parameter was an unsupported type. ` +\n            `Please check the docs for ${moduleName}.${className}.${funcName} for ` +\n            `valid input types.`);\n    },\n    'not-array-of-class': ({ value, expectedClass, moduleName, className, funcName, paramName, }) => {\n        return (`The supplied '${paramName}' parameter must be an array of ` +\n            `'${expectedClass}' objects. Received '${JSON.stringify(value)},'. ` +\n            `Please check the call to ${moduleName}.${className}.${funcName}() ` +\n            `to fix the issue.`);\n    },\n    'max-entries-or-age-required': ({ moduleName, className, funcName }) => {\n        return (`You must define either config.maxEntries or config.maxAgeSeconds` +\n            `in ${moduleName}.${className}.${funcName}`);\n    },\n    'statuses-or-headers-required': ({ moduleName, className, funcName }) => {\n        return (`You must define either config.statuses or config.headers` +\n            `in ${moduleName}.${className}.${funcName}`);\n    },\n    'invalid-string': ({ moduleName, funcName, paramName }) => {\n        if (!paramName || !moduleName || !funcName) {\n            throw new Error(`Unexpected input to 'invalid-string' error.`);\n        }\n        return (`When using strings, the '${paramName}' parameter must start with ` +\n            `'http' (for cross-origin matches) or '/' (for same-origin matches). ` +\n            `Please see the docs for ${moduleName}.${funcName}() for ` +\n            `more info.`);\n    },\n    'channel-name-required': () => {\n        return (`You must provide a channelName to construct a ` +\n            `BroadcastCacheUpdate instance.`);\n    },\n    'invalid-responses-are-same-args': () => {\n        return (`The arguments passed into responsesAreSame() appear to be ` +\n            `invalid. Please ensure valid Responses are used.`);\n    },\n    'expire-custom-caches-only': () => {\n        return (`You must provide a 'cacheName' property when using the ` +\n            `expiration plugin with a runtime caching strategy.`);\n    },\n    'unit-must-be-bytes': ({ normalizedRangeHeader }) => {\n        if (!normalizedRangeHeader) {\n            throw new Error(`Unexpected input to 'unit-must-be-bytes' error.`);\n        }\n        return (`The 'unit' portion of the Range header must be set to 'bytes'. ` +\n            `The Range header provided was \"${normalizedRangeHeader}\"`);\n    },\n    'single-range-only': ({ normalizedRangeHeader }) => {\n        if (!normalizedRangeHeader) {\n            throw new Error(`Unexpected input to 'single-range-only' error.`);\n        }\n        return (`Multiple ranges are not supported. Please use a  single start ` +\n            `value, and optional end value. The Range header provided was ` +\n            `\"${normalizedRangeHeader}\"`);\n    },\n    'invalid-range-values': ({ normalizedRangeHeader }) => {\n        if (!normalizedRangeHeader) {\n            throw new Error(`Unexpected input to 'invalid-range-values' error.`);\n        }\n        return (`The Range header is missing both start and end values. At least ` +\n            `one of those values is needed. The Range header provided was ` +\n            `\"${normalizedRangeHeader}\"`);\n    },\n    'no-range-header': () => {\n        return `No Range header was found in the Request provided.`;\n    },\n    'range-not-satisfiable': ({ size, start, end }) => {\n        return (`The start (${start}) and end (${end}) values in the Range are ` +\n            `not satisfiable by the cached response, which is ${size} bytes.`);\n    },\n    'attempt-to-cache-non-get-request': ({ url, method }) => {\n        return (`Unable to cache '${url}' because it is a '${method}' request and ` +\n            `only 'GET' requests can be cached.`);\n    },\n    'cache-put-with-no-response': ({ url }) => {\n        return (`There was an attempt to cache '${url}' but the response was not ` +\n            `defined.`);\n    },\n    'no-response': ({ url, error }) => {\n        let message = `The strategy could not generate a response for '${url}'.`;\n        if (error) {\n            message += ` The underlying error is ${error}.`;\n        }\n        return message;\n    },\n    'bad-precaching-response': ({ url, status }) => {\n        return (`The precaching request for '${url}' failed` +\n            (status ? ` with an HTTP status of ${status}.` : `.`));\n    },\n    'non-precached-url': ({ url }) => {\n        return (`createHandlerBoundToURL('${url}') was called, but that URL is ` +\n            `not precached. Please pass in a URL that is precached instead.`);\n    },\n    'add-to-cache-list-conflicting-integrities': ({ url }) => {\n        return (`Two of the entries passed to ` +\n            `'workbox-precaching.PrecacheController.addToCacheList()' had the URL ` +\n            `${url} with different integrity values. Please remove one of them.`);\n    },\n    'missing-precache-entry': ({ cacheName, url }) => {\n        return `Unable to find a precached response in ${cacheName} for ${url}.`;\n    },\n    'cross-origin-copy-response': ({ origin }) => {\n        return (`workbox-core.copyResponse() can only be used with same-origin ` +\n            `responses. It was passed a response with origin ${origin}.`);\n    },\n    'opaque-streams-source': ({ type }) => {\n        const message = `One of the workbox-streams sources resulted in an ` +\n            `'${type}' response.`;\n        if (type === 'opaqueredirect') {\n            return (`${message} Please do not use a navigation request that results ` +\n                `in a redirect as a source.`);\n        }\n        return `${message} Please ensure your sources are CORS-enabled.`;\n    },\n};\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:core:7.2.0'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst logger = (process.env.NODE_ENV === 'production'\n    ? null\n    : (() => {\n        // Don't overwrite this value if it's already set.\n        // See https://github.com/GoogleChrome/workbox/pull/2284#issuecomment-560470923\n        if (!('__WB_DISABLE_DEV_LOGS' in globalThis)) {\n            self.__WB_DISABLE_DEV_LOGS = false;\n        }\n        let inGroup = false;\n        const methodToColorMap = {\n            debug: `#7f8c8d`,\n            log: `#2ecc71`,\n            warn: `#f39c12`,\n            error: `#c0392b`,\n            groupCollapsed: `#3498db`,\n            groupEnd: null, // No colored prefix on groupEnd\n        };\n        const print = function (method, args) {\n            if (self.__WB_DISABLE_DEV_LOGS) {\n                return;\n            }\n            if (method === 'groupCollapsed') {\n                // Safari doesn't print all console.groupCollapsed() arguments:\n                // https://bugs.webkit.org/show_bug.cgi?id=182754\n                if (/^((?!chrome|android).)*safari/i.test(navigator.userAgent)) {\n                    console[method](...args);\n                    return;\n                }\n            }\n            const styles = [\n                `background: ${methodToColorMap[method]}`,\n                `border-radius: 0.5em`,\n                `color: white`,\n                `font-weight: bold`,\n                `padding: 2px 0.5em`,\n            ];\n            // When in a group, the workbox prefix is not displayed.\n            const logPrefix = inGroup ? [] : ['%cworkbox', styles.join(';')];\n            console[method](...logPrefix, ...args);\n            if (method === 'groupCollapsed') {\n                inGroup = true;\n            }\n            if (method === 'groupEnd') {\n                inGroup = false;\n            }\n        };\n        // eslint-disable-next-line @typescript-eslint/ban-types\n        const api = {};\n        const loggerMethods = Object.keys(methodToColorMap);\n        for (const key of loggerMethods) {\n            const method = key;\n            api[method] = (...args) => {\n                print(method, args);\n            };\n        }\n        return api;\n    })());\nexport { logger };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { defaultMethod, validMethods } from './utils/constants.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport './_version.js';\n/**\n * A `Route` consists of a pair of callback functions, \"match\" and \"handler\".\n * The \"match\" callback determine if a route should be used to \"handle\" a\n * request by returning a non-falsy value if it can. The \"handler\" callback\n * is called when there is a match and should return a Promise that resolves\n * to a `Response`.\n *\n * @memberof workbox-routing\n */\nclass Route {\n    /**\n     * Constructor for Route class.\n     *\n     * @param {workbox-routing~matchCallback} match\n     * A callback function that determines whether the route matches a given\n     * `fetch` event by returning a non-falsy value.\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(match, handler, method = defaultMethod) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(match, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'match',\n            });\n            if (method) {\n                assert.isOneOf(method, validMethods, { paramName: 'method' });\n            }\n        }\n        // These values are referenced directly by Router so cannot be\n        // altered by minificaton.\n        this.handler = normalizeHandler(handler);\n        this.match = match;\n        this.method = method;\n    }\n    /**\n     *\n     * @param {workbox-routing-handlerCallback} handler A callback\n     * function that returns a Promise resolving to a Response\n     */\n    setCatchHandler(handler) {\n        this.catchHandler = normalizeHandler(handler);\n    }\n}\nexport { Route };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The default HTTP method, 'GET', used when there's no specific method\n * configured for a route.\n *\n * @type {string}\n *\n * @private\n */\nexport const defaultMethod = 'GET';\n/**\n * The list of valid HTTP methods associated with requests that could be routed.\n *\n * @type {Array<string>}\n *\n * @private\n */\nexport const validMethods = [\n    'DELETE',\n    'GET',\n    'HEAD',\n    'PATCH',\n    'POST',\n    'PUT',\n];\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:routing:7.2.0'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport '../_version.js';\n/**\n * @param {function()|Object} handler Either a function, or an object with a\n * 'handle' method.\n * @return {Object} An object with a handle method.\n *\n * @private\n */\nexport const normalizeHandler = (handler) => {\n    if (handler && typeof handler === 'object') {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.hasMethod(handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return handler;\n    }\n    else {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(handler, 'function', {\n                moduleName: 'workbox-routing',\n                className: 'Route',\n                funcName: 'constructor',\n                paramName: 'handler',\n            });\n        }\n        return { handle: handler };\n    }\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { Route } from './Route.js';\nimport './_version.js';\n/**\n * RegExpRoute makes it easy to create a regular expression based\n * {@link workbox-routing.Route}.\n *\n * For same-origin requests the RegExp only needs to match part of the URL. For\n * requests against third-party servers, you must define a RegExp that matches\n * the start of the URL.\n *\n * @memberof workbox-routing\n * @extends workbox-routing.Route\n */\nclass RegExpRoute extends Route {\n    /**\n     * If the regular expression contains\n     * [capture groups]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp#grouping-back-references},\n     * the captured values will be passed to the\n     * {@link workbox-routing~handlerCallback} `params`\n     * argument.\n     *\n     * @param {RegExp} regExp The regular expression to match against URLs.\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to match the Route\n     * against.\n     */\n    constructor(regExp, handler, method) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(regExp, RegExp, {\n                moduleName: 'workbox-routing',\n                className: 'RegExpRoute',\n                funcName: 'constructor',\n                paramName: 'pattern',\n            });\n        }\n        const match = ({ url }) => {\n            const result = regExp.exec(url.href);\n            // Return immediately if there's no match.\n            if (!result) {\n                return;\n            }\n            // Require that the match start at the first character in the URL string\n            // if it's a cross-origin request.\n            // See https://github.com/GoogleChrome/workbox/issues/281 for the context\n            // behind this behavior.\n            if (url.origin !== location.origin && result.index !== 0) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`The regular expression '${regExp.toString()}' only partially matched ` +\n                        `against the cross-origin URL '${url.toString()}'. RegExpRoute's will only ` +\n                        `handle cross-origin requests if they match the entire URL.`);\n                }\n                return;\n            }\n            // If the route matches, but there aren't any capture groups defined, then\n            // this will return [], which is truthy and therefore sufficient to\n            // indicate a match.\n            // If there are capture groups, then it will return their values.\n            return result.slice(1);\n        };\n        super(match, handler, method);\n    }\n}\nexport { RegExpRoute };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Route } from './Route.js';\nimport { RegExpRoute } from './RegExpRoute.js';\nimport { getOrCreateDefaultRouter } from './utils/getOrCreateDefaultRouter.js';\nimport './_version.js';\n/**\n * Easily register a RegExp, string, or function with a caching\n * strategy to a singleton Router instance.\n *\n * This method will generate a Route for you if needed and\n * call {@link workbox-routing.Router#registerRoute}.\n *\n * @param {RegExp|string|workbox-routing.Route~matchCallback|workbox-routing.Route} capture\n * If the capture param is a `Route`, all other arguments will be ignored.\n * @param {workbox-routing~handlerCallback} [handler] A callback\n * function that returns a Promise resulting in a Response. This parameter\n * is required if `capture` is not a `Route` object.\n * @param {string} [method='GET'] The HTTP method to match the Route\n * against.\n * @return {workbox-routing.Route} The generated `Route`.\n *\n * @memberof workbox-routing\n */\nfunction registerRoute(capture, handler, method) {\n    let route;\n    if (typeof capture === 'string') {\n        const captureUrl = new URL(capture, location.href);\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(capture.startsWith('/') || capture.startsWith('http'))) {\n                throw new WorkboxError('invalid-string', {\n                    moduleName: 'workbox-routing',\n                    funcName: 'registerRoute',\n                    paramName: 'capture',\n                });\n            }\n            // We want to check if Express-style wildcards are in the pathname only.\n            // TODO: Remove this log message in v4.\n            const valueToCheck = capture.startsWith('http')\n                ? captureUrl.pathname\n                : capture;\n            // See https://github.com/pillarjs/path-to-regexp#parameters\n            const wildcards = '[*:?+]';\n            if (new RegExp(`${wildcards}`).exec(valueToCheck)) {\n                logger.debug(`The '$capture' parameter contains an Express-style wildcard ` +\n                    `character (${wildcards}). Strings are now always interpreted as ` +\n                    `exact matches; use a RegExp for partial or wildcard matches.`);\n            }\n        }\n        const matchCallback = ({ url }) => {\n            if (process.env.NODE_ENV !== 'production') {\n                if (url.pathname === captureUrl.pathname &&\n                    url.origin !== captureUrl.origin) {\n                    logger.debug(`${capture} only partially matches the cross-origin URL ` +\n                        `${url.toString()}. This route will only handle cross-origin requests ` +\n                        `if they match the entire URL.`);\n                }\n            }\n            return url.href === captureUrl.href;\n        };\n        // If `capture` is a string then `handler` and `method` must be present.\n        route = new Route(matchCallback, handler, method);\n    }\n    else if (capture instanceof RegExp) {\n        // If `capture` is a `RegExp` then `handler` and `method` must be present.\n        route = new RegExpRoute(capture, handler, method);\n    }\n    else if (typeof capture === 'function') {\n        // If `capture` is a function then `handler` and `method` must be present.\n        route = new Route(capture, handler, method);\n    }\n    else if (capture instanceof Route) {\n        route = capture;\n    }\n    else {\n        throw new WorkboxError('unsupported-route-type', {\n            moduleName: 'workbox-routing',\n            funcName: 'registerRoute',\n            paramName: 'capture',\n        });\n    }\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.registerRoute(route);\n    return route;\n}\nexport { registerRoute };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { Router } from '../Router.js';\nimport '../_version.js';\nlet defaultRouter;\n/**\n * Creates a new, singleton Router instance if one does not exist. If one\n * does already exist, that instance is returned.\n *\n * @private\n * @return {Router}\n */\nexport const getOrCreateDefaultRouter = () => {\n    if (!defaultRouter) {\n        defaultRouter = new Router();\n        // The helpers that use the default Router assume these listeners exist.\n        defaultRouter.addFetchListener();\n        defaultRouter.addCacheListener();\n    }\n    return defaultRouter;\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { defaultMethod } from './utils/constants.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { normalizeHandler } from './utils/normalizeHandler.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\n/**\n * The Router can be used to process a `FetchEvent` using one or more\n * {@link workbox-routing.Route}, responding with a `Response` if\n * a matching route exists.\n *\n * If no route matches a given a request, the Router will use a \"default\"\n * handler if one is defined.\n *\n * Should the matching Route throw an error, the Router will use a \"catch\"\n * handler if one is defined to gracefully deal with issues and respond with a\n * Request.\n *\n * If a request matches multiple routes, the **earliest** registered route will\n * be used to respond to the request.\n *\n * @memberof workbox-routing\n */\nclass Router {\n    /**\n     * Initializes a new Router.\n     */\n    constructor() {\n        this._routes = new Map();\n        this._defaultHandlerMap = new Map();\n    }\n    /**\n     * @return {Map<string, Array<workbox-routing.Route>>} routes A `Map` of HTTP\n     * method name ('GET', etc.) to an array of all the corresponding `Route`\n     * instances that are registered.\n     */\n    get routes() {\n        return this._routes;\n    }\n    /**\n     * Adds a fetch event listener to respond to events when a route matches\n     * the event's request.\n     */\n    addFetchListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('fetch', ((event) => {\n            const { request } = event;\n            const responsePromise = this.handleRequest({ request, event });\n            if (responsePromise) {\n                event.respondWith(responsePromise);\n            }\n        }));\n    }\n    /**\n     * Adds a message event listener for URLs to cache from the window.\n     * This is useful to cache resources loaded on the page prior to when the\n     * service worker started controlling it.\n     *\n     * The format of the message data sent from the window should be as follows.\n     * Where the `urlsToCache` array may consist of URL strings or an array of\n     * URL string + `requestInit` object (the same as you'd pass to `fetch()`).\n     *\n     * ```\n     * {\n     *   type: 'CACHE_URLS',\n     *   payload: {\n     *     urlsToCache: [\n     *       './script1.js',\n     *       './script2.js',\n     *       ['./script3.js', {mode: 'no-cors'}],\n     *     ],\n     *   },\n     * }\n     * ```\n     */\n    addCacheListener() {\n        // See https://github.com/Microsoft/TypeScript/issues/28357#issuecomment-436484705\n        self.addEventListener('message', ((event) => {\n            // event.data is type 'any'\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            if (event.data && event.data.type === 'CACHE_URLS') {\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                const { payload } = event.data;\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.debug(`Caching URLs from the window`, payload.urlsToCache);\n                }\n                const requestPromises = Promise.all(payload.urlsToCache.map((entry) => {\n                    if (typeof entry === 'string') {\n                        entry = [entry];\n                    }\n                    const request = new Request(...entry);\n                    return this.handleRequest({ request, event });\n                    // TODO(philipwalton): TypeScript errors without this typecast for\n                    // some reason (probably a bug). The real type here should work but\n                    // doesn't: `Array<Promise<Response> | undefined>`.\n                })); // TypeScript\n                event.waitUntil(requestPromises);\n                // If a MessageChannel was used, reply to the message on success.\n                if (event.ports && event.ports[0]) {\n                    void requestPromises.then(() => event.ports[0].postMessage(true));\n                }\n            }\n        }));\n    }\n    /**\n     * Apply the routing rules to a FetchEvent object to get a Response from an\n     * appropriate Route's handler.\n     *\n     * @param {Object} options\n     * @param {Request} options.request The request to handle.\n     * @param {ExtendableEvent} options.event The event that triggered the\n     *     request.\n     * @return {Promise<Response>|undefined} A promise is returned if a\n     *     registered route can handle the request. If there is no matching\n     *     route and there's no `defaultHandler`, `undefined` is returned.\n     */\n    handleRequest({ request, event, }) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'handleRequest',\n                paramName: 'options.request',\n            });\n        }\n        const url = new URL(request.url, location.href);\n        if (!url.protocol.startsWith('http')) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Workbox Router only supports URLs that start with 'http'.`);\n            }\n            return;\n        }\n        const sameOrigin = url.origin === location.origin;\n        const { params, route } = this.findMatchingRoute({\n            event,\n            request,\n            sameOrigin,\n            url,\n        });\n        let handler = route && route.handler;\n        const debugMessages = [];\n        if (process.env.NODE_ENV !== 'production') {\n            if (handler) {\n                debugMessages.push([`Found a route to handle this request:`, route]);\n                if (params) {\n                    debugMessages.push([\n                        `Passing the following params to the route's handler:`,\n                        params,\n                    ]);\n                }\n            }\n        }\n        // If we don't have a handler because there was no matching route, then\n        // fall back to defaultHandler if that's defined.\n        const method = request.method;\n        if (!handler && this._defaultHandlerMap.has(method)) {\n            if (process.env.NODE_ENV !== 'production') {\n                debugMessages.push(`Failed to find a matching route. Falling ` +\n                    `back to the default handler for ${method}.`);\n            }\n            handler = this._defaultHandlerMap.get(method);\n        }\n        if (!handler) {\n            if (process.env.NODE_ENV !== 'production') {\n                // No handler so Workbox will do nothing. If logs is set of debug\n                // i.e. verbose, we should print out this information.\n                logger.debug(`No route found for: ${getFriendlyURL(url)}`);\n            }\n            return;\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            // We have a handler, meaning Workbox is going to handle the route.\n            // print the routing details to the console.\n            logger.groupCollapsed(`Router is responding to: ${getFriendlyURL(url)}`);\n            debugMessages.forEach((msg) => {\n                if (Array.isArray(msg)) {\n                    logger.log(...msg);\n                }\n                else {\n                    logger.log(msg);\n                }\n            });\n            logger.groupEnd();\n        }\n        // Wrap in try and catch in case the handle method throws a synchronous\n        // error. It should still callback to the catch handler.\n        let responsePromise;\n        try {\n            responsePromise = handler.handle({ url, request, event, params });\n        }\n        catch (err) {\n            responsePromise = Promise.reject(err);\n        }\n        // Get route's catch handler, if it exists\n        const catchHandler = route && route.catchHandler;\n        if (responsePromise instanceof Promise &&\n            (this._catchHandler || catchHandler)) {\n            responsePromise = responsePromise.catch(async (err) => {\n                // If there's a route catch handler, process that first\n                if (catchHandler) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\n                            ` ${getFriendlyURL(url)}. Falling back to route's Catch Handler.`);\n                        logger.error(`Error thrown by:`, route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    }\n                    try {\n                        return await catchHandler.handle({ url, request, event, params });\n                    }\n                    catch (catchErr) {\n                        if (catchErr instanceof Error) {\n                            err = catchErr;\n                        }\n                    }\n                }\n                if (this._catchHandler) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // Still include URL here as it will be async from the console group\n                        // and may not make sense without the URL\n                        logger.groupCollapsed(`Error thrown when responding to: ` +\n                            ` ${getFriendlyURL(url)}. Falling back to global Catch Handler.`);\n                        logger.error(`Error thrown by:`, route);\n                        logger.error(err);\n                        logger.groupEnd();\n                    }\n                    return this._catchHandler.handle({ url, request, event });\n                }\n                throw err;\n            });\n        }\n        return responsePromise;\n    }\n    /**\n     * Checks a request and URL (and optionally an event) against the list of\n     * registered routes, and if there's a match, returns the corresponding\n     * route along with any params generated by the match.\n     *\n     * @param {Object} options\n     * @param {URL} options.url\n     * @param {boolean} options.sameOrigin The result of comparing `url.origin`\n     *     against the current origin.\n     * @param {Request} options.request The request to match.\n     * @param {Event} options.event The corresponding event.\n     * @return {Object} An object with `route` and `params` properties.\n     *     They are populated if a matching route was found or `undefined`\n     *     otherwise.\n     */\n    findMatchingRoute({ url, sameOrigin, request, event, }) {\n        const routes = this._routes.get(request.method) || [];\n        for (const route of routes) {\n            let params;\n            // route.match returns type any, not possible to change right now.\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            const matchResult = route.match({ url, sameOrigin, request, event });\n            if (matchResult) {\n                if (process.env.NODE_ENV !== 'production') {\n                    // Warn developers that using an async matchCallback is almost always\n                    // not the right thing to do.\n                    if (matchResult instanceof Promise) {\n                        logger.warn(`While routing ${getFriendlyURL(url)}, an async ` +\n                            `matchCallback function was used. Please convert the ` +\n                            `following route to use a synchronous matchCallback function:`, route);\n                    }\n                }\n                // See https://github.com/GoogleChrome/workbox/issues/2079\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                params = matchResult;\n                if (Array.isArray(params) && params.length === 0) {\n                    // Instead of passing an empty array in as params, use undefined.\n                    params = undefined;\n                }\n                else if (matchResult.constructor === Object && // eslint-disable-line\n                    Object.keys(matchResult).length === 0) {\n                    // Instead of passing an empty object in as params, use undefined.\n                    params = undefined;\n                }\n                else if (typeof matchResult === 'boolean') {\n                    // For the boolean value true (rather than just something truth-y),\n                    // don't set params.\n                    // See https://github.com/GoogleChrome/workbox/pull/2134#issuecomment-513924353\n                    params = undefined;\n                }\n                // Return early if have a match.\n                return { route, params };\n            }\n        }\n        // If no match was found above, return and empty object.\n        return {};\n    }\n    /**\n     * Define a default `handler` that's called when no routes explicitly\n     * match the incoming request.\n     *\n     * Each HTTP method ('GET', 'POST', etc.) gets its own default handler.\n     *\n     * Without a default handler, unmatched requests will go against the\n     * network as if there were no service worker present.\n     *\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     * @param {string} [method='GET'] The HTTP method to associate with this\n     * default handler. Each method has its own default.\n     */\n    setDefaultHandler(handler, method = defaultMethod) {\n        this._defaultHandlerMap.set(method, normalizeHandler(handler));\n    }\n    /**\n     * If a Route throws an error while handling a request, this `handler`\n     * will be called and given a chance to provide a response.\n     *\n     * @param {workbox-routing~handlerCallback} handler A callback\n     * function that returns a Promise resulting in a Response.\n     */\n    setCatchHandler(handler) {\n        this._catchHandler = normalizeHandler(handler);\n    }\n    /**\n     * Registers a route with the router.\n     *\n     * @param {workbox-routing.Route} route The route to register.\n     */\n    registerRoute(route) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(route, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route, 'match', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.isType(route.handler, 'object', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route',\n            });\n            assert.hasMethod(route.handler, 'handle', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.handler',\n            });\n            assert.isType(route.method, 'string', {\n                moduleName: 'workbox-routing',\n                className: 'Router',\n                funcName: 'registerRoute',\n                paramName: 'route.method',\n            });\n        }\n        if (!this._routes.has(route.method)) {\n            this._routes.set(route.method, []);\n        }\n        // Give precedence to all of the earlier routes by adding this additional\n        // route to the end of the array.\n        this._routes.get(route.method).push(route);\n    }\n    /**\n     * Unregisters a route with the router.\n     *\n     * @param {workbox-routing.Route} route The route to unregister.\n     */\n    unregisterRoute(route) {\n        if (!this._routes.has(route.method)) {\n            throw new WorkboxError('unregister-route-but-not-found-with-method', {\n                method: route.method,\n            });\n        }\n        const routeIndex = this._routes.get(route.method).indexOf(route);\n        if (routeIndex > -1) {\n            this._routes.get(route.method).splice(routeIndex, 1);\n        }\n        else {\n            throw new WorkboxError('unregister-route-route-not-registered');\n        }\n    }\n}\nexport { Router };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst getFriendlyURL = (url) => {\n    const urlObj = new URL(String(url), location.href);\n    // See https://github.com/GoogleChrome/workbox/issues/2323\n    // We want to include everything, except for the origin if it's same-origin.\n    return urlObj.href.replace(new RegExp(`^${location.origin}`), '');\n};\nexport { getFriendlyURL };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreateDefaultRouter } from './utils/getOrCreateDefaultRouter.js';\nimport './_version.js';\n/**\n * If a Route throws an error while handling a request, this `handler`\n * will be called and given a chance to provide a response.\n *\n * @param {workbox-routing~handlerCallback} handler A callback\n * function that returns a Promise resulting in a Response.\n *\n * @memberof workbox-routing\n */\nfunction setCatchHandler(handler) {\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.setCatchHandler(handler);\n}\nexport { setCatchHandler };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { getOrCreateDefaultRouter } from './utils/getOrCreateDefaultRouter.js';\nimport './_version.js';\n/**\n * Define a default `handler` that's called when no routes explicitly\n * match the incoming request.\n *\n * Without a default handler, unmatched requests will go against the\n * network as if there were no service worker present.\n *\n * @param {workbox-routing~handlerCallback} handler A callback\n * function that returns a Promise resulting in a Response.\n *\n * @memberof workbox-routing\n */\nfunction setDefaultHandler(handler) {\n    const defaultRouter = getOrCreateDefaultRouter();\n    defaultRouter.setDefaultHandler(handler);\n}\nexport { setDefaultHandler };\n","export * from './index.js';","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { CacheFirst } from './CacheFirst.js';\nimport { CacheOnly } from './CacheOnly.js';\nimport { NetworkFirst } from './NetworkFirst.js';\nimport { NetworkOnly } from './NetworkOnly.js';\nimport { StaleWhileRevalidate } from './StaleWhileRevalidate.js';\nimport { Strategy } from './Strategy.js';\nimport { StrategyHandler } from './StrategyHandler.js';\nimport './_version.js';\n/**\n * There are common caching strategies that most service workers will need\n * and use. This module provides simple implementations of these strategies.\n *\n * @module workbox-strategies\n */\nexport { CacheFirst, CacheOnly, NetworkFirst, NetworkOnly, StaleWhileRevalidate, Strategy, StrategyHandler, };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a [cache-first](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#cache-first-falling-back-to-network)\n * request strategy.\n *\n * A cache first strategy is useful for assets that have been revisioned,\n * such as URLs like `/styles/example.a8f5f1.css`, since they\n * can be cached for long periods of time.\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-strategies\n */\nclass CacheFirst extends Strategy {\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const logs = [];\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: 'makeRequest',\n                paramName: 'request',\n            });\n        }\n        let response = await handler.cacheMatch(request);\n        let error = undefined;\n        if (!response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`No response found in the '${this.cacheName}' cache. ` +\n                    `Will respond with a network request.`);\n            }\n            try {\n                response = await handler.fetchAndCachePut(request);\n            }\n            catch (err) {\n                if (err instanceof Error) {\n                    error = err;\n                }\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                if (response) {\n                    logs.push(`Got response from network.`);\n                }\n                else {\n                    logs.push(`Unable to get a response from the network.`);\n                }\n            }\n        }\n        else {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`Found a cached response in the '${this.cacheName}' cache.`);\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url, error });\n        }\n        return response;\n    }\n}\nexport { CacheFirst };\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { StrategyHandler } from './StrategyHandler.js';\nimport './_version.js';\n/**\n * An abstract base class that all other strategy classes must extend from:\n *\n * @memberof workbox-strategies\n */\nclass Strategy {\n    /**\n     * Creates a new instance of the strategy and sets all documented option\n     * properties as public instance properties.\n     *\n     * Note: if a custom strategy class extends the base Strategy class and does\n     * not need more than these properties, it does not need to define its own\n     * constructor.\n     *\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to the cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] The\n     * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n     * for any `cache.match()` or `cache.put()` calls made by this strategy.\n     */\n    constructor(options = {}) {\n        /**\n         * Cache name to store and retrieve\n         * requests. Defaults to the cache names provided by\n         * {@link workbox-core.cacheNames}.\n         *\n         * @type {string}\n         */\n        this.cacheName = cacheNames.getRuntimeName(options.cacheName);\n        /**\n         * The list\n         * [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n         * used by this strategy.\n         *\n         * @type {Array<Object>}\n         */\n        this.plugins = options.plugins || [];\n        /**\n         * Values passed along to the\n         * [`init`]{@link https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters}\n         * of all fetch() requests made by this strategy.\n         *\n         * @type {Object}\n         */\n        this.fetchOptions = options.fetchOptions;\n        /**\n         * The\n         * [`CacheQueryOptions`]{@link https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions}\n         * for any `cache.match()` or `cache.put()` calls made by this strategy.\n         *\n         * @type {Object}\n         */\n        this.matchOptions = options.matchOptions;\n    }\n    /**\n     * Perform a request strategy and returns a `Promise` that will resolve with\n     * a `Response`, invoking all relevant plugin callbacks.\n     *\n     * When a strategy instance is registered with a Workbox\n     * {@link workbox-routing.Route}, this method is automatically\n     * called when the route matches.\n     *\n     * Alternatively, this method can be used in a standalone `FetchEvent`\n     * listener by passing it to `event.respondWith()`.\n     *\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     */\n    handle(options) {\n        const [responseDone] = this.handleAll(options);\n        return responseDone;\n    }\n    /**\n     * Similar to {@link workbox-strategies.Strategy~handle}, but\n     * instead of just returning a `Promise` that resolves to a `Response` it\n     * it will return an tuple of `[response, done]` promises, where the former\n     * (`response`) is equivalent to what `handle()` returns, and the latter is a\n     * Promise that will resolve once any promises that were added to\n     * `event.waitUntil()` as part of performing the strategy have completed.\n     *\n     * You can await the `done` promise to ensure any extra work performed by\n     * the strategy (usually caching responses) completes successfully.\n     *\n     * @param {FetchEvent|Object} options A `FetchEvent` or an object with the\n     *     properties listed below.\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params]\n     * @return {Array<Promise>} A tuple of [response, done]\n     *     promises that can be used to determine when the response resolves as\n     *     well as when the handler has completed all its work.\n     */\n    handleAll(options) {\n        // Allow for flexible options to be passed.\n        if (options instanceof FetchEvent) {\n            options = {\n                event: options,\n                request: options.request,\n            };\n        }\n        const event = options.event;\n        const request = typeof options.request === 'string'\n            ? new Request(options.request)\n            : options.request;\n        const params = 'params' in options ? options.params : undefined;\n        const handler = new StrategyHandler(this, { event, request, params });\n        const responseDone = this._getResponse(handler, request, event);\n        const handlerDone = this._awaitComplete(responseDone, handler, request, event);\n        // Return an array of promises, suitable for use with Promise.all().\n        return [responseDone, handlerDone];\n    }\n    async _getResponse(handler, request, event) {\n        await handler.runCallbacks('handlerWillStart', { event, request });\n        let response = undefined;\n        try {\n            response = await this._handle(request, handler);\n            // The \"official\" Strategy subclasses all throw this error automatically,\n            // but in case a third-party Strategy doesn't, ensure that we have a\n            // consistent failure when there's no response or an error response.\n            if (!response || response.type === 'error') {\n                throw new WorkboxError('no-response', { url: request.url });\n            }\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                for (const callback of handler.iterateCallbacks('handlerDidError')) {\n                    response = await callback({ error, event, request });\n                    if (response) {\n                        break;\n                    }\n                }\n            }\n            if (!response) {\n                throw error;\n            }\n            else if (process.env.NODE_ENV !== 'production') {\n                logger.log(`While responding to '${getFriendlyURL(request.url)}', ` +\n                    `an ${error instanceof Error ? error.toString() : ''} error occurred. Using a fallback response provided by ` +\n                    `a handlerDidError plugin.`);\n            }\n        }\n        for (const callback of handler.iterateCallbacks('handlerWillRespond')) {\n            response = await callback({ event, request, response });\n        }\n        return response;\n    }\n    async _awaitComplete(responseDone, handler, request, event) {\n        let response;\n        let error;\n        try {\n            response = await responseDone;\n        }\n        catch (error) {\n            // Ignore errors, as response errors should be caught via the `response`\n            // promise above. The `done` promise will only throw for errors in\n            // promises passed to `handler.waitUntil()`.\n        }\n        try {\n            await handler.runCallbacks('handlerDidRespond', {\n                event,\n                request,\n                response,\n            });\n            await handler.doneWaiting();\n        }\n        catch (waitUntilError) {\n            if (waitUntilError instanceof Error) {\n                error = waitUntilError;\n            }\n        }\n        await handler.runCallbacks('handlerDidComplete', {\n            event,\n            request,\n            response,\n            error: error,\n        });\n        handler.destroy();\n        if (error) {\n            throw error;\n        }\n    }\n}\nexport { Strategy };\n/**\n * Classes extending the `Strategy` based class should implement this method,\n * and leverage the {@link workbox-strategies.StrategyHandler}\n * arg to perform all fetching and cache logic, which will ensure all relevant\n * cache, cache options, fetch options and plugins are used (per the current\n * strategy instance).\n *\n * @name _handle\n * @instance\n * @abstract\n * @function\n * @param {Request} request\n * @param {workbox-strategies.StrategyHandler} handler\n * @return {Promise<Response>}\n *\n * @memberof workbox-strategies.Strategy\n */\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nconst _cacheNameDetails = {\n    googleAnalytics: 'googleAnalytics',\n    precache: 'precache-v2',\n    prefix: 'workbox',\n    runtime: 'runtime',\n    suffix: typeof registration !== 'undefined' ? registration.scope : '',\n};\nconst _createCacheName = (cacheName) => {\n    return [_cacheNameDetails.prefix, cacheName, _cacheNameDetails.suffix]\n        .filter((value) => value && value.length > 0)\n        .join('-');\n};\nconst eachCacheNameDetail = (fn) => {\n    for (const key of Object.keys(_cacheNameDetails)) {\n        fn(key);\n    }\n};\nexport const cacheNames = {\n    updateDetails: (details) => {\n        eachCacheNameDetail((key) => {\n            if (typeof details[key] === 'string') {\n                _cacheNameDetails[key] = details[key];\n            }\n        });\n    },\n    getGoogleAnalyticsName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.googleAnalytics);\n    },\n    getPrecacheName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.precache);\n    },\n    getPrefix: () => {\n        return _cacheNameDetails.prefix;\n    },\n    getRuntimeName: (userCacheName) => {\n        return userCacheName || _createCacheName(_cacheNameDetails.runtime);\n    },\n    getSuffix: () => {\n        return _cacheNameDetails.suffix;\n    },\n};\n","/*\n  Copyright 2020 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheMatchIgnoreParams } from 'workbox-core/_private/cacheMatchIgnoreParams.js';\nimport { Deferred } from 'workbox-core/_private/Deferred.js';\nimport { executeQuotaErrorCallbacks } from 'workbox-core/_private/executeQuotaErrorCallbacks.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { timeout } from 'workbox-core/_private/timeout.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport './_version.js';\nfunction toRequest(input) {\n    return typeof input === 'string' ? new Request(input) : input;\n}\n/**\n * A class created every time a Strategy instance instance calls\n * {@link workbox-strategies.Strategy~handle} or\n * {@link workbox-strategies.Strategy~handleAll} that wraps all fetch and\n * cache actions around plugin callbacks and keeps track of when the strategy\n * is \"done\" (i.e. all added `event.waitUntil()` promises have resolved).\n *\n * @memberof workbox-strategies\n */\nclass StrategyHandler {\n    /**\n     * Creates a new instance associated with the passed strategy and event\n     * that's handling the request.\n     *\n     * The constructor also initializes the state that will be passed to each of\n     * the plugins handling this request.\n     *\n     * @param {workbox-strategies.Strategy} strategy\n     * @param {Object} options\n     * @param {Request|string} options.request A request to run this strategy for.\n     * @param {ExtendableEvent} options.event The event associated with the\n     *     request.\n     * @param {URL} [options.url]\n     * @param {*} [options.params] The return value from the\n     *     {@link workbox-routing~matchCallback} (if applicable).\n     */\n    constructor(strategy, options) {\n        this._cacheKeys = {};\n        /**\n         * The request the strategy is performing (passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * @name request\n         * @instance\n         * @type {Request}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * The event associated with this request.\n         * @name event\n         * @instance\n         * @type {ExtendableEvent}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `URL` instance of `request.url` (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `url` param will be present if the strategy was invoked\n         * from a workbox `Route` object.\n         * @name url\n         * @instance\n         * @type {URL|undefined}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        /**\n         * A `param` value (if passed to the strategy's\n         * `handle()` or `handleAll()` method).\n         * Note: the `param` param will be present if the strategy was invoked\n         * from a workbox `Route` object and the\n         * {@link workbox-routing~matchCallback} returned\n         * a truthy value (it will be that value).\n         * @name params\n         * @instance\n         * @type {*|undefined}\n         * @memberof workbox-strategies.StrategyHandler\n         */\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(options.event, ExtendableEvent, {\n                moduleName: 'workbox-strategies',\n                className: 'StrategyHandler',\n                funcName: 'constructor',\n                paramName: 'options.event',\n            });\n        }\n        Object.assign(this, options);\n        this.event = options.event;\n        this._strategy = strategy;\n        this._handlerDeferred = new Deferred();\n        this._extendLifetimePromises = [];\n        // Copy the plugins list (since it's mutable on the strategy),\n        // so any mutations don't affect this handler instance.\n        this._plugins = [...strategy.plugins];\n        this._pluginStateMap = new Map();\n        for (const plugin of this._plugins) {\n            this._pluginStateMap.set(plugin, {});\n        }\n        this.event.waitUntil(this._handlerDeferred.promise);\n    }\n    /**\n     * Fetches a given request (and invokes any applicable plugin callback\n     * methods) using the `fetchOptions` (for non-navigation requests) and\n     * `plugins` defined on the `Strategy` object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - `requestWillFetch()`\n     * - `fetchDidSucceed()`\n     * - `fetchDidFail()`\n     *\n     * @param {Request|string} input The URL or request to fetch.\n     * @return {Promise<Response>}\n     */\n    async fetch(input) {\n        const { event } = this;\n        let request = toRequest(input);\n        if (request.mode === 'navigate' &&\n            event instanceof FetchEvent &&\n            event.preloadResponse) {\n            const possiblePreloadResponse = (await event.preloadResponse);\n            if (possiblePreloadResponse) {\n                if (process.env.NODE_ENV !== 'production') {\n                    logger.log(`Using a preloaded navigation response for ` +\n                        `'${getFriendlyURL(request.url)}'`);\n                }\n                return possiblePreloadResponse;\n            }\n        }\n        // If there is a fetchDidFail plugin, we need to save a clone of the\n        // original request before it's either modified by a requestWillFetch\n        // plugin or before the original request's body is consumed via fetch().\n        const originalRequest = this.hasCallback('fetchDidFail')\n            ? request.clone()\n            : null;\n        try {\n            for (const cb of this.iterateCallbacks('requestWillFetch')) {\n                request = await cb({ request: request.clone(), event });\n            }\n        }\n        catch (err) {\n            if (err instanceof Error) {\n                throw new WorkboxError('plugin-error-request-will-fetch', {\n                    thrownErrorMessage: err.message,\n                });\n            }\n        }\n        // The request can be altered by plugins with `requestWillFetch` making\n        // the original request (most likely from a `fetch` event) different\n        // from the Request we make. Pass both to `fetchDidFail` to aid debugging.\n        const pluginFilteredRequest = request.clone();\n        try {\n            let fetchResponse;\n            // See https://github.com/GoogleChrome/workbox/issues/1796\n            fetchResponse = await fetch(request, request.mode === 'navigate' ? undefined : this._strategy.fetchOptions);\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' returned a response with ` +\n                    `status '${fetchResponse.status}'.`);\n            }\n            for (const callback of this.iterateCallbacks('fetchDidSucceed')) {\n                fetchResponse = await callback({\n                    event,\n                    request: pluginFilteredRequest,\n                    response: fetchResponse,\n                });\n            }\n            return fetchResponse;\n        }\n        catch (error) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.log(`Network request for ` +\n                    `'${getFriendlyURL(request.url)}' threw an error.`, error);\n            }\n            // `originalRequest` will only exist if a `fetchDidFail` callback\n            // is being used (see above).\n            if (originalRequest) {\n                await this.runCallbacks('fetchDidFail', {\n                    error: error,\n                    event,\n                    originalRequest: originalRequest.clone(),\n                    request: pluginFilteredRequest.clone(),\n                });\n            }\n            throw error;\n        }\n    }\n    /**\n     * Calls `this.fetch()` and (in the background) runs `this.cachePut()` on\n     * the response generated by `this.fetch()`.\n     *\n     * The call to `this.cachePut()` automatically invokes `this.waitUntil()`,\n     * so you do not have to manually call `waitUntil()` on the event.\n     *\n     * @param {Request|string} input The request or URL to fetch and cache.\n     * @return {Promise<Response>}\n     */\n    async fetchAndCachePut(input) {\n        const response = await this.fetch(input);\n        const responseClone = response.clone();\n        void this.waitUntil(this.cachePut(input, responseClone));\n        return response;\n    }\n    /**\n     * Matches a request from the cache (and invokes any applicable plugin\n     * callback methods) using the `cacheName`, `matchOptions`, and `plugins`\n     * defined on the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillBeUsed()\n     * - cachedResponseWillBeUsed()\n     *\n     * @param {Request|string} key The Request or URL to use as the cache key.\n     * @return {Promise<Response|undefined>} A matching response, if found.\n     */\n    async cacheMatch(key) {\n        const request = toRequest(key);\n        let cachedResponse;\n        const { cacheName, matchOptions } = this._strategy;\n        const effectiveRequest = await this.getCacheKey(request, 'read');\n        const multiMatchOptions = Object.assign(Object.assign({}, matchOptions), { cacheName });\n        cachedResponse = await caches.match(effectiveRequest, multiMatchOptions);\n        if (process.env.NODE_ENV !== 'production') {\n            if (cachedResponse) {\n                logger.debug(`Found a cached response in '${cacheName}'.`);\n            }\n            else {\n                logger.debug(`No cached response found in '${cacheName}'.`);\n            }\n        }\n        for (const callback of this.iterateCallbacks('cachedResponseWillBeUsed')) {\n            cachedResponse =\n                (await callback({\n                    cacheName,\n                    matchOptions,\n                    cachedResponse,\n                    request: effectiveRequest,\n                    event: this.event,\n                })) || undefined;\n        }\n        return cachedResponse;\n    }\n    /**\n     * Puts a request/response pair in the cache (and invokes any applicable\n     * plugin callback methods) using the `cacheName` and `plugins` defined on\n     * the strategy object.\n     *\n     * The following plugin lifecycle methods are invoked when using this method:\n     * - cacheKeyWillBeUsed()\n     * - cacheWillUpdate()\n     * - cacheDidUpdate()\n     *\n     * @param {Request|string} key The request or URL to use as the cache key.\n     * @param {Response} response The response to cache.\n     * @return {Promise<boolean>} `false` if a cacheWillUpdate caused the response\n     * not be cached, and `true` otherwise.\n     */\n    async cachePut(key, response) {\n        const request = toRequest(key);\n        // Run in the next task to avoid blocking other cache reads.\n        // https://github.com/w3c/ServiceWorker/issues/1397\n        await timeout(0);\n        const effectiveRequest = await this.getCacheKey(request, 'write');\n        if (process.env.NODE_ENV !== 'production') {\n            if (effectiveRequest.method && effectiveRequest.method !== 'GET') {\n                throw new WorkboxError('attempt-to-cache-non-get-request', {\n                    url: getFriendlyURL(effectiveRequest.url),\n                    method: effectiveRequest.method,\n                });\n            }\n            // See https://github.com/GoogleChrome/workbox/issues/2818\n            const vary = response.headers.get('Vary');\n            if (vary) {\n                logger.debug(`The response for ${getFriendlyURL(effectiveRequest.url)} ` +\n                    `has a 'Vary: ${vary}' header. ` +\n                    `Consider setting the {ignoreVary: true} option on your strategy ` +\n                    `to ensure cache matching and deletion works as expected.`);\n            }\n        }\n        if (!response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.error(`Cannot cache non-existent response for ` +\n                    `'${getFriendlyURL(effectiveRequest.url)}'.`);\n            }\n            throw new WorkboxError('cache-put-with-no-response', {\n                url: getFriendlyURL(effectiveRequest.url),\n            });\n        }\n        const responseToCache = await this._ensureResponseSafeToCache(response);\n        if (!responseToCache) {\n            if (process.env.NODE_ENV !== 'production') {\n                logger.debug(`Response '${getFriendlyURL(effectiveRequest.url)}' ` +\n                    `will not be cached.`, responseToCache);\n            }\n            return false;\n        }\n        const { cacheName, matchOptions } = this._strategy;\n        const cache = await self.caches.open(cacheName);\n        const hasCacheUpdateCallback = this.hasCallback('cacheDidUpdate');\n        const oldResponse = hasCacheUpdateCallback\n            ? await cacheMatchIgnoreParams(\n            // TODO(philipwalton): the `__WB_REVISION__` param is a precaching\n            // feature. Consider into ways to only add this behavior if using\n            // precaching.\n            cache, effectiveRequest.clone(), ['__WB_REVISION__'], matchOptions)\n            : null;\n        if (process.env.NODE_ENV !== 'production') {\n            logger.debug(`Updating the '${cacheName}' cache with a new Response ` +\n                `for ${getFriendlyURL(effectiveRequest.url)}.`);\n        }\n        try {\n            await cache.put(effectiveRequest, hasCacheUpdateCallback ? responseToCache.clone() : responseToCache);\n        }\n        catch (error) {\n            if (error instanceof Error) {\n                // See https://developer.mozilla.org/en-US/docs/Web/API/DOMException#exception-QuotaExceededError\n                if (error.name === 'QuotaExceededError') {\n                    await executeQuotaErrorCallbacks();\n                }\n                throw error;\n            }\n        }\n        for (const callback of this.iterateCallbacks('cacheDidUpdate')) {\n            await callback({\n                cacheName,\n                oldResponse,\n                newResponse: responseToCache.clone(),\n                request: effectiveRequest,\n                event: this.event,\n            });\n        }\n        return true;\n    }\n    /**\n     * Checks the list of plugins for the `cacheKeyWillBeUsed` callback, and\n     * executes any of those callbacks found in sequence. The final `Request`\n     * object returned by the last plugin is treated as the cache key for cache\n     * reads and/or writes. If no `cacheKeyWillBeUsed` plugin callbacks have\n     * been registered, the passed request is returned unmodified\n     *\n     * @param {Request} request\n     * @param {string} mode\n     * @return {Promise<Request>}\n     */\n    async getCacheKey(request, mode) {\n        const key = `${request.url} | ${mode}`;\n        if (!this._cacheKeys[key]) {\n            let effectiveRequest = request;\n            for (const callback of this.iterateCallbacks('cacheKeyWillBeUsed')) {\n                effectiveRequest = toRequest(await callback({\n                    mode,\n                    request: effectiveRequest,\n                    event: this.event,\n                    // params has a type any can't change right now.\n                    params: this.params, // eslint-disable-line\n                }));\n            }\n            this._cacheKeys[key] = effectiveRequest;\n        }\n        return this._cacheKeys[key];\n    }\n    /**\n     * Returns true if the strategy has at least one plugin with the given\n     * callback.\n     *\n     * @param {string} name The name of the callback to check for.\n     * @return {boolean}\n     */\n    hasCallback(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (name in plugin) {\n                return true;\n            }\n        }\n        return false;\n    }\n    /**\n     * Runs all plugin callbacks matching the given name, in order, passing the\n     * given param object (merged ith the current plugin state) as the only\n     * argument.\n     *\n     * Note: since this method runs all plugins, it's not suitable for cases\n     * where the return value of a callback needs to be applied prior to calling\n     * the next callback. See\n     * {@link workbox-strategies.StrategyHandler#iterateCallbacks}\n     * below for how to handle that case.\n     *\n     * @param {string} name The name of the callback to run within each plugin.\n     * @param {Object} param The object to pass as the first (and only) param\n     *     when executing each callback. This object will be merged with the\n     *     current plugin state prior to callback execution.\n     */\n    async runCallbacks(name, param) {\n        for (const callback of this.iterateCallbacks(name)) {\n            // TODO(philipwalton): not sure why `any` is needed. It seems like\n            // this should work with `as WorkboxPluginCallbackParam[C]`.\n            await callback(param);\n        }\n    }\n    /**\n     * Accepts a callback and returns an iterable of matching plugin callbacks,\n     * where each callback is wrapped with the current handler state (i.e. when\n     * you call each callback, whatever object parameter you pass it will\n     * be merged with the plugin's current state).\n     *\n     * @param {string} name The name fo the callback to run\n     * @return {Array<Function>}\n     */\n    *iterateCallbacks(name) {\n        for (const plugin of this._strategy.plugins) {\n            if (typeof plugin[name] === 'function') {\n                const state = this._pluginStateMap.get(plugin);\n                const statefulCallback = (param) => {\n                    const statefulParam = Object.assign(Object.assign({}, param), { state });\n                    // TODO(philipwalton): not sure why `any` is needed. It seems like\n                    // this should work with `as WorkboxPluginCallbackParam[C]`.\n                    return plugin[name](statefulParam);\n                };\n                yield statefulCallback;\n            }\n        }\n    }\n    /**\n     * Adds a promise to the\n     * [extend lifetime promises]{@link https://w3c.github.io/ServiceWorker/#extendableevent-extend-lifetime-promises}\n     * of the event event associated with the request being handled (usually a\n     * `FetchEvent`).\n     *\n     * Note: you can await\n     * {@link workbox-strategies.StrategyHandler~doneWaiting}\n     * to know when all added promises have settled.\n     *\n     * @param {Promise} promise A promise to add to the extend lifetime promises\n     *     of the event that triggered the request.\n     */\n    waitUntil(promise) {\n        this._extendLifetimePromises.push(promise);\n        return promise;\n    }\n    /**\n     * Returns a promise that resolves once all promises passed to\n     * {@link workbox-strategies.StrategyHandler~waitUntil}\n     * have settled.\n     *\n     * Note: any work done after `doneWaiting()` settles should be manually\n     * passed to an event's `waitUntil()` method (not this handler's\n     * `waitUntil()` method), otherwise the service worker thread my be killed\n     * prior to your work completing.\n     */\n    async doneWaiting() {\n        let promise;\n        while ((promise = this._extendLifetimePromises.shift())) {\n            await promise;\n        }\n    }\n    /**\n     * Stops running the strategy and immediately resolves any pending\n     * `waitUntil()` promises.\n     */\n    destroy() {\n        this._handlerDeferred.resolve(null);\n    }\n    /**\n     * This method will call cacheWillUpdate on the available plugins (or use\n     * status === 200) to determine if the Response is safe and valid to cache.\n     *\n     * @param {Request} options.request\n     * @param {Response} options.response\n     * @return {Promise<Response|undefined>}\n     *\n     * @private\n     */\n    async _ensureResponseSafeToCache(response) {\n        let responseToCache = response;\n        let pluginsUsed = false;\n        for (const callback of this.iterateCallbacks('cacheWillUpdate')) {\n            responseToCache =\n                (await callback({\n                    request: this.request,\n                    response: responseToCache,\n                    event: this.event,\n                })) || undefined;\n            pluginsUsed = true;\n            if (!responseToCache) {\n                break;\n            }\n        }\n        if (!pluginsUsed) {\n            if (responseToCache && responseToCache.status !== 200) {\n                responseToCache = undefined;\n            }\n            if (process.env.NODE_ENV !== 'production') {\n                if (responseToCache) {\n                    if (responseToCache.status !== 200) {\n                        if (responseToCache.status === 0) {\n                            logger.warn(`The response for '${this.request.url}' ` +\n                                `is an opaque response. The caching strategy that you're ` +\n                                `using will not cache opaque responses by default.`);\n                        }\n                        else {\n                            logger.debug(`The response for '${this.request.url}' ` +\n                                `returned a status code of '${response.status}' and won't ` +\n                                `be cached as a result.`);\n                        }\n                    }\n                }\n            }\n        }\n        return responseToCache;\n    }\n}\nexport { StrategyHandler };\n","/*\n  Copyright 2020 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nfunction stripParams(fullURL, ignoreParams) {\n    const strippedURL = new URL(fullURL);\n    for (const param of ignoreParams) {\n        strippedURL.searchParams.delete(param);\n    }\n    return strippedURL.href;\n}\n/**\n * Matches an item in the cache, ignoring specific URL params. This is similar\n * to the `ignoreSearch` option, but it allows you to ignore just specific\n * params (while continuing to match on the others).\n *\n * @private\n * @param {Cache} cache\n * @param {Request} request\n * @param {Object} matchOptions\n * @param {Array<string>} ignoreParams\n * @return {Promise<Response|undefined>}\n */\nasync function cacheMatchIgnoreParams(cache, request, ignoreParams, matchOptions) {\n    const strippedRequestURL = stripParams(request.url, ignoreParams);\n    // If the request doesn't include any ignored params, match as normal.\n    if (request.url === strippedRequestURL) {\n        return cache.match(request, matchOptions);\n    }\n    // Otherwise, match by comparing keys\n    const keysOptions = Object.assign(Object.assign({}, matchOptions), { ignoreSearch: true });\n    const cacheKeys = await cache.keys(request, keysOptions);\n    for (const cacheKey of cacheKeys) {\n        const strippedCacheKeyURL = stripParams(cacheKey.url, ignoreParams);\n        if (strippedRequestURL === strippedCacheKeyURL) {\n            return cache.match(cacheKey, matchOptions);\n        }\n    }\n    return;\n}\nexport { cacheMatchIgnoreParams };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * The Deferred class composes Promises in a way that allows for them to be\n * resolved or rejected from outside the constructor. In most cases promises\n * should be used directly, but Deferreds can be necessary when the logic to\n * resolve a promise must be separate.\n *\n * @private\n */\nclass Deferred {\n    /**\n     * Creates a promise and exposes its resolve and reject functions as methods.\n     */\n    constructor() {\n        this.promise = new Promise((resolve, reject) => {\n            this.resolve = resolve;\n            this.reject = reject;\n        });\n    }\n}\nexport { Deferred };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from '../_private/logger.js';\nimport { quotaErrorCallbacks } from '../models/quotaErrorCallbacks.js';\nimport '../_version.js';\n/**\n * Runs all of the callback functions, one at a time sequentially, in the order\n * in which they were registered.\n *\n * @memberof workbox-core\n * @private\n */\nasync function executeQuotaErrorCallbacks() {\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log(`About to run ${quotaErrorCallbacks.size} ` +\n            `callbacks to clean up caches.`);\n    }\n    for (const callback of quotaErrorCallbacks) {\n        await callback();\n        if (process.env.NODE_ENV !== 'production') {\n            logger.log(callback, 'is complete.');\n        }\n    }\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log('Finished running callbacks.');\n    }\n}\nexport { executeQuotaErrorCallbacks };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n// Callbacks to be executed whenever there's a quota error.\n// Can't change Function type right now.\n// eslint-disable-next-line @typescript-eslint/ban-types\nconst quotaErrorCallbacks = new Set();\nexport { quotaErrorCallbacks };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * Returns a promise that resolves and the passed number of milliseconds.\n * This utility is an async/await-friendly version of `setTimeout`.\n *\n * @param {number} ms\n * @return {Promise}\n * @private\n */\nexport function timeout(ms) {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n}\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:strategies:7.2.0'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport '../_version.js';\nexport const messages = {\n    strategyStart: (strategyName, request) => `Using ${strategyName} to respond to '${getFriendlyURL(request.url)}'`,\n    printFinalResponse: (response) => {\n        if (response) {\n            logger.groupCollapsed(`View the final response here.`);\n            logger.log(response || '[No response returned]');\n            logger.groupEnd();\n        }\n    },\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a [cache-only](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#cache-only)\n * request strategy.\n *\n * This class is useful if you want to take advantage of any\n * [Workbox plugins](https://developer.chrome.com/docs/workbox/using-plugins/).\n *\n * If there is no cache match, this will throw a `WorkboxError` exception.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-strategies\n */\nclass CacheOnly extends Strategy {\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: 'makeRequest',\n                paramName: 'request',\n            });\n        }\n        const response = await handler.cacheMatch(request);\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            if (response) {\n                logger.log(`Found a cached response in the '${this.cacheName}' ` + `cache.`);\n                messages.printFinalResponse(response);\n            }\n            else {\n                logger.log(`No response found in the '${this.cacheName}' cache.`);\n            }\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url });\n        }\n        return response;\n    }\n}\nexport { CacheOnly };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [network first](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#network-first-falling-back-to-cache)\n * request strategy.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses](https://developer.chrome.com/docs/workbox/caching-resources-during-runtime/#opaque-responses).\n * Opaque responses are are cross-origin requests where the response doesn't\n * support [CORS](https://enable-cors.org/).\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-strategies\n */\nclass NetworkFirst extends Strategy {\n    /**\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n     * @param {number} [options.networkTimeoutSeconds] If set, any network requests\n     * that fail to respond within the timeout will fallback to the cache.\n     *\n     * This option can be used to combat\n     * \"[lie-fi]{@link https://developers.google.com/web/fundamentals/performance/poor-connectivity/#lie-fi}\"\n     * scenarios.\n     */\n    constructor(options = {}) {\n        super(options);\n        // If this instance contains no plugins with a 'cacheWillUpdate' callback,\n        // prepend the `cacheOkAndOpaquePlugin` plugin to the plugins list.\n        if (!this.plugins.some((p) => 'cacheWillUpdate' in p)) {\n            this.plugins.unshift(cacheOkAndOpaquePlugin);\n        }\n        this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\n        if (process.env.NODE_ENV !== 'production') {\n            if (this._networkTimeoutSeconds) {\n                assert.isType(this._networkTimeoutSeconds, 'number', {\n                    moduleName: 'workbox-strategies',\n                    className: this.constructor.name,\n                    funcName: 'constructor',\n                    paramName: 'networkTimeoutSeconds',\n                });\n            }\n        }\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const logs = [];\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: 'handle',\n                paramName: 'makeRequest',\n            });\n        }\n        const promises = [];\n        let timeoutId;\n        if (this._networkTimeoutSeconds) {\n            const { id, promise } = this._getTimeoutPromise({ request, logs, handler });\n            timeoutId = id;\n            promises.push(promise);\n        }\n        const networkPromise = this._getNetworkPromise({\n            timeoutId,\n            request,\n            logs,\n            handler,\n        });\n        promises.push(networkPromise);\n        const response = await handler.waitUntil((async () => {\n            // Promise.race() will resolve as soon as the first promise resolves.\n            return ((await handler.waitUntil(Promise.race(promises))) ||\n                // If Promise.race() resolved with null, it might be due to a network\n                // timeout + a cache miss. If that were to happen, we'd rather wait until\n                // the networkPromise resolves instead of returning null.\n                // Note that it's fine to await an already-resolved promise, so we don't\n                // have to check to see if it's still \"in flight\".\n                (await networkPromise));\n        })());\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url });\n        }\n        return response;\n    }\n    /**\n     * @param {Object} options\n     * @param {Request} options.request\n     * @param {Array} options.logs A reference to the logs array\n     * @param {Event} options.event\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n    _getTimeoutPromise({ request, logs, handler, }) {\n        let timeoutId;\n        const timeoutPromise = new Promise((resolve) => {\n            const onNetworkTimeout = async () => {\n                if (process.env.NODE_ENV !== 'production') {\n                    logs.push(`Timing out the network response at ` +\n                        `${this._networkTimeoutSeconds} seconds.`);\n                }\n                resolve(await handler.cacheMatch(request));\n            };\n            timeoutId = setTimeout(onNetworkTimeout, this._networkTimeoutSeconds * 1000);\n        });\n        return {\n            promise: timeoutPromise,\n            id: timeoutId,\n        };\n    }\n    /**\n     * @param {Object} options\n     * @param {number|undefined} options.timeoutId\n     * @param {Request} options.request\n     * @param {Array} options.logs A reference to the logs Array.\n     * @param {Event} options.event\n     * @return {Promise<Response>}\n     *\n     * @private\n     */\n    async _getNetworkPromise({ timeoutId, request, logs, handler, }) {\n        let error;\n        let response;\n        try {\n            response = await handler.fetchAndCachePut(request);\n        }\n        catch (fetchError) {\n            if (fetchError instanceof Error) {\n                error = fetchError;\n            }\n        }\n        if (timeoutId) {\n            clearTimeout(timeoutId);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            if (response) {\n                logs.push(`Got response from network.`);\n            }\n            else {\n                logs.push(`Unable to get a response from the network. Will respond ` +\n                    `with a cached response.`);\n            }\n        }\n        if (error || !response) {\n            response = await handler.cacheMatch(request);\n            if (process.env.NODE_ENV !== 'production') {\n                if (response) {\n                    logs.push(`Found a cached response in the '${this.cacheName}'` + ` cache.`);\n                }\n                else {\n                    logs.push(`No response found in the '${this.cacheName}' cache.`);\n                }\n            }\n        }\n        return response;\n    }\n}\nexport { NetworkFirst };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\nexport const cacheOkAndOpaquePlugin = {\n    /**\n     * Returns a valid response (to allow caching) if the status is 200 (OK) or\n     * 0 (opaque).\n     *\n     * @param {Object} options\n     * @param {Response} options.response\n     * @return {Response|null}\n     *\n     * @private\n     */\n    cacheWillUpdate: async ({ response }) => {\n        if (response.status === 200 || response.status === 0) {\n            return response;\n        }\n        return null;\n    },\n};\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { timeout } from 'workbox-core/_private/timeout.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [network-only](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#network-only)\n * request strategy.\n *\n * This class is useful if you want to take advantage of any\n * [Workbox plugins](https://developer.chrome.com/docs/workbox/using-plugins/).\n *\n * If the network request fails, this will throw a `WorkboxError` exception.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-strategies\n */\nclass NetworkOnly extends Strategy {\n    /**\n     * @param {Object} [options]\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {number} [options.networkTimeoutSeconds] If set, any network requests\n     * that fail to respond within the timeout will result in a network error.\n     */\n    constructor(options = {}) {\n        super(options);\n        this._networkTimeoutSeconds = options.networkTimeoutSeconds || 0;\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: '_handle',\n                paramName: 'request',\n            });\n        }\n        let error = undefined;\n        let response;\n        try {\n            const promises = [\n                handler.fetch(request),\n            ];\n            if (this._networkTimeoutSeconds) {\n                const timeoutPromise = timeout(this._networkTimeoutSeconds * 1000);\n                promises.push(timeoutPromise);\n            }\n            response = await Promise.race(promises);\n            if (!response) {\n                throw new Error(`Timed out the network response after ` +\n                    `${this._networkTimeoutSeconds} seconds.`);\n            }\n        }\n        catch (err) {\n            if (err instanceof Error) {\n                error = err;\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            if (response) {\n                logger.log(`Got response from network.`);\n            }\n            else {\n                logger.log(`Unable to get a response from the network.`);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url, error });\n        }\n        return response;\n    }\n}\nexport { NetworkOnly };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { cacheOkAndOpaquePlugin } from './plugins/cacheOkAndOpaquePlugin.js';\nimport { Strategy } from './Strategy.js';\nimport { messages } from './utils/messages.js';\nimport './_version.js';\n/**\n * An implementation of a\n * [stale-while-revalidate](https://developer.chrome.com/docs/workbox/caching-strategies-overview/#stale-while-revalidate)\n * request strategy.\n *\n * Resources are requested from both the cache and the network in parallel.\n * The strategy will respond with the cached version if available, otherwise\n * wait for the network response. The cache is updated with the network response\n * with each successful request.\n *\n * By default, this strategy will cache responses with a 200 status code as\n * well as [opaque responses](https://developer.chrome.com/docs/workbox/caching-resources-during-runtime/#opaque-responses).\n * Opaque responses are cross-origin requests where the response doesn't\n * support [CORS](https://enable-cors.org/).\n *\n * If the network request fails, and there is no cache match, this will throw\n * a `WorkboxError` exception.\n *\n * @extends workbox-strategies.Strategy\n * @memberof workbox-strategies\n */\nclass StaleWhileRevalidate extends Strategy {\n    /**\n     * @param {Object} [options]\n     * @param {string} [options.cacheName] Cache name to store and retrieve\n     * requests. Defaults to cache names provided by\n     * {@link workbox-core.cacheNames}.\n     * @param {Array<Object>} [options.plugins] [Plugins]{@link https://developers.google.com/web/tools/workbox/guides/using-plugins}\n     * to use in conjunction with this caching strategy.\n     * @param {Object} [options.fetchOptions] Values passed along to the\n     * [`init`](https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch#Parameters)\n     * of [non-navigation](https://github.com/GoogleChrome/workbox/issues/1796)\n     * `fetch()` requests made by this strategy.\n     * @param {Object} [options.matchOptions] [`CacheQueryOptions`](https://w3c.github.io/ServiceWorker/#dictdef-cachequeryoptions)\n     */\n    constructor(options = {}) {\n        super(options);\n        // If this instance contains no plugins with a 'cacheWillUpdate' callback,\n        // prepend the `cacheOkAndOpaquePlugin` plugin to the plugins list.\n        if (!this.plugins.some((p) => 'cacheWillUpdate' in p)) {\n            this.plugins.unshift(cacheOkAndOpaquePlugin);\n        }\n    }\n    /**\n     * @private\n     * @param {Request|string} request A request to run this strategy for.\n     * @param {workbox-strategies.StrategyHandler} handler The event that\n     *     triggered the request.\n     * @return {Promise<Response>}\n     */\n    async _handle(request, handler) {\n        const logs = [];\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(request, Request, {\n                moduleName: 'workbox-strategies',\n                className: this.constructor.name,\n                funcName: 'handle',\n                paramName: 'request',\n            });\n        }\n        const fetchAndCachePromise = handler.fetchAndCachePut(request).catch(() => {\n            // Swallow this error because a 'no-response' error will be thrown in\n            // main handler return flow. This will be in the `waitUntil()` flow.\n        });\n        void handler.waitUntil(fetchAndCachePromise);\n        let response = await handler.cacheMatch(request);\n        let error;\n        if (response) {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`Found a cached response in the '${this.cacheName}'` +\n                    ` cache. Will update with the network response in the background.`);\n            }\n        }\n        else {\n            if (process.env.NODE_ENV !== 'production') {\n                logs.push(`No response found in the '${this.cacheName}' cache. ` +\n                    `Will wait for the network response.`);\n            }\n            try {\n                // NOTE(philipwalton): Really annoying that we have to type cast here.\n                // https://github.com/microsoft/TypeScript/issues/20006\n                response = (await fetchAndCachePromise);\n            }\n            catch (err) {\n                if (err instanceof Error) {\n                    error = err;\n                }\n            }\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            logger.groupCollapsed(messages.strategyStart(this.constructor.name, request));\n            for (const log of logs) {\n                logger.log(log);\n            }\n            messages.printFinalResponse(response);\n            logger.groupEnd();\n        }\n        if (!response) {\n            throw new WorkboxError('no-response', { url: request.url, error });\n        }\n        return response;\n    }\n}\nexport { StaleWhileRevalidate };\n","export * from './index.js';","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { CacheableResponse, } from './CacheableResponse.js';\nimport { CacheableResponsePlugin } from './CacheableResponsePlugin.js';\nimport './_version.js';\n/**\n * @module workbox-cacheable-response\n */\nexport { CacheableResponse, CacheableResponsePlugin };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport './_version.js';\n/**\n * This class allows you to set up rules determining what\n * status codes and/or headers need to be present in order for a\n * [`Response`](https://developer.mozilla.org/en-US/docs/Web/API/Response)\n * to be considered cacheable.\n *\n * @memberof workbox-cacheable-response\n */\nclass CacheableResponse {\n    /**\n     * To construct a new CacheableResponse instance you must provide at least\n     * one of the `config` properties.\n     *\n     * If both `statuses` and `headers` are specified, then both conditions must\n     * be met for the `Response` to be considered cacheable.\n     *\n     * @param {Object} config\n     * @param {Array<number>} [config.statuses] One or more status codes that a\n     * `Response` can have and be considered cacheable.\n     * @param {Object<string,string>} [config.headers] A mapping of header names\n     * and expected values that a `Response` can have and be considered cacheable.\n     * If multiple headers are provided, only one needs to be present.\n     */\n    constructor(config = {}) {\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(config.statuses || config.headers)) {\n                throw new WorkboxError('statuses-or-headers-required', {\n                    moduleName: 'workbox-cacheable-response',\n                    className: 'CacheableResponse',\n                    funcName: 'constructor',\n                });\n            }\n            if (config.statuses) {\n                assert.isArray(config.statuses, {\n                    moduleName: 'workbox-cacheable-response',\n                    className: 'CacheableResponse',\n                    funcName: 'constructor',\n                    paramName: 'config.statuses',\n                });\n            }\n            if (config.headers) {\n                assert.isType(config.headers, 'object', {\n                    moduleName: 'workbox-cacheable-response',\n                    className: 'CacheableResponse',\n                    funcName: 'constructor',\n                    paramName: 'config.headers',\n                });\n            }\n        }\n        this._statuses = config.statuses;\n        this._headers = config.headers;\n    }\n    /**\n     * Checks a response to see whether it's cacheable or not, based on this\n     * object's configuration.\n     *\n     * @param {Response} response The response whose cacheability is being\n     * checked.\n     * @return {boolean} `true` if the `Response` is cacheable, and `false`\n     * otherwise.\n     */\n    isResponseCacheable(response) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isInstance(response, Response, {\n                moduleName: 'workbox-cacheable-response',\n                className: 'CacheableResponse',\n                funcName: 'isResponseCacheable',\n                paramName: 'response',\n            });\n        }\n        let cacheable = true;\n        if (this._statuses) {\n            cacheable = this._statuses.includes(response.status);\n        }\n        if (this._headers && cacheable) {\n            cacheable = Object.keys(this._headers).some((headerName) => {\n                return response.headers.get(headerName) === this._headers[headerName];\n            });\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            if (!cacheable) {\n                logger.groupCollapsed(`The request for ` +\n                    `'${getFriendlyURL(response.url)}' returned a response that does ` +\n                    `not meet the criteria for being cached.`);\n                logger.groupCollapsed(`View cacheability criteria here.`);\n                logger.log(`Cacheable statuses: ` + JSON.stringify(this._statuses));\n                logger.log(`Cacheable headers: ` + JSON.stringify(this._headers, null, 2));\n                logger.groupEnd();\n                const logFriendlyHeaders = {};\n                response.headers.forEach((value, key) => {\n                    logFriendlyHeaders[key] = value;\n                });\n                logger.groupCollapsed(`View response status and headers here.`);\n                logger.log(`Response status: ${response.status}`);\n                logger.log(`Response headers: ` + JSON.stringify(logFriendlyHeaders, null, 2));\n                logger.groupEnd();\n                logger.groupCollapsed(`View full response details here.`);\n                logger.log(response.headers);\n                logger.log(response);\n                logger.groupEnd();\n                logger.groupEnd();\n            }\n        }\n        return cacheable;\n    }\n}\nexport { CacheableResponse };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:cacheable-response:7.2.0'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { CacheableResponse, } from './CacheableResponse.js';\nimport './_version.js';\n/**\n * A class implementing the `cacheWillUpdate` lifecycle callback. This makes it\n * easier to add in cacheability checks to requests made via Workbox's built-in\n * strategies.\n *\n * @memberof workbox-cacheable-response\n */\nclass CacheableResponsePlugin {\n    /**\n     * To construct a new CacheableResponsePlugin instance you must provide at\n     * least one of the `config` properties.\n     *\n     * If both `statuses` and `headers` are specified, then both conditions must\n     * be met for the `Response` to be considered cacheable.\n     *\n     * @param {Object} config\n     * @param {Array<number>} [config.statuses] One or more status codes that a\n     * `Response` can have and be considered cacheable.\n     * @param {Object<string,string>} [config.headers] A mapping of header names\n     * and expected values that a `Response` can have and be considered cacheable.\n     * If multiple headers are provided, only one needs to be present.\n     */\n    constructor(config) {\n        /**\n         * @param {Object} options\n         * @param {Response} options.response\n         * @return {Response|null}\n         * @private\n         */\n        this.cacheWillUpdate = async ({ response }) => {\n            if (this._cacheableResponse.isResponseCacheable(response)) {\n                return response;\n            }\n            return null;\n        };\n        this._cacheableResponse = new CacheableResponse(config);\n    }\n}\nexport { CacheableResponsePlugin };\n","export * from './index.js';","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { CacheExpiration } from './CacheExpiration.js';\nimport { ExpirationPlugin } from './ExpirationPlugin.js';\nimport './_version.js';\n/**\n * @module workbox-expiration\n */\nexport { CacheExpiration, ExpirationPlugin };\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { dontWaitFor } from 'workbox-core/_private/dontWaitFor.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { CacheTimestampsModel } from './models/CacheTimestampsModel.js';\nimport './_version.js';\n/**\n * The `CacheExpiration` class allows you define an expiration and / or\n * limit on the number of responses stored in a\n * [`Cache`](https://developer.mozilla.org/en-US/docs/Web/API/Cache).\n *\n * @memberof workbox-expiration\n */\nclass CacheExpiration {\n    /**\n     * To construct a new CacheExpiration instance you must provide at least\n     * one of the `config` properties.\n     *\n     * @param {string} cacheName Name of the cache to apply restrictions to.\n     * @param {Object} config\n     * @param {number} [config.maxEntries] The maximum number of entries to cache.\n     * Entries used the least will be removed as the maximum is reached.\n     * @param {number} [config.maxAgeSeconds] The maximum age of an entry before\n     * it's treated as stale and removed.\n     * @param {Object} [config.matchOptions] The [`CacheQueryOptions`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/delete#Parameters)\n     * that will be used when calling `delete()` on the cache.\n     */\n    constructor(cacheName, config = {}) {\n        this._isRunning = false;\n        this._rerunRequested = false;\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(cacheName, 'string', {\n                moduleName: 'workbox-expiration',\n                className: 'CacheExpiration',\n                funcName: 'constructor',\n                paramName: 'cacheName',\n            });\n            if (!(config.maxEntries || config.maxAgeSeconds)) {\n                throw new WorkboxError('max-entries-or-age-required', {\n                    moduleName: 'workbox-expiration',\n                    className: 'CacheExpiration',\n                    funcName: 'constructor',\n                });\n            }\n            if (config.maxEntries) {\n                assert.isType(config.maxEntries, 'number', {\n                    moduleName: 'workbox-expiration',\n                    className: 'CacheExpiration',\n                    funcName: 'constructor',\n                    paramName: 'config.maxEntries',\n                });\n            }\n            if (config.maxAgeSeconds) {\n                assert.isType(config.maxAgeSeconds, 'number', {\n                    moduleName: 'workbox-expiration',\n                    className: 'CacheExpiration',\n                    funcName: 'constructor',\n                    paramName: 'config.maxAgeSeconds',\n                });\n            }\n        }\n        this._maxEntries = config.maxEntries;\n        this._maxAgeSeconds = config.maxAgeSeconds;\n        this._matchOptions = config.matchOptions;\n        this._cacheName = cacheName;\n        this._timestampModel = new CacheTimestampsModel(cacheName);\n    }\n    /**\n     * Expires entries for the given cache and given criteria.\n     */\n    async expireEntries() {\n        if (this._isRunning) {\n            this._rerunRequested = true;\n            return;\n        }\n        this._isRunning = true;\n        const minTimestamp = this._maxAgeSeconds\n            ? Date.now() - this._maxAgeSeconds * 1000\n            : 0;\n        const urlsExpired = await this._timestampModel.expireEntries(minTimestamp, this._maxEntries);\n        // Delete URLs from the cache\n        const cache = await self.caches.open(this._cacheName);\n        for (const url of urlsExpired) {\n            await cache.delete(url, this._matchOptions);\n        }\n        if (process.env.NODE_ENV !== 'production') {\n            if (urlsExpired.length > 0) {\n                logger.groupCollapsed(`Expired ${urlsExpired.length} ` +\n                    `${urlsExpired.length === 1 ? 'entry' : 'entries'} and removed ` +\n                    `${urlsExpired.length === 1 ? 'it' : 'them'} from the ` +\n                    `'${this._cacheName}' cache.`);\n                logger.log(`Expired the following ${urlsExpired.length === 1 ? 'URL' : 'URLs'}:`);\n                urlsExpired.forEach((url) => logger.log(`    ${url}`));\n                logger.groupEnd();\n            }\n            else {\n                logger.debug(`Cache expiration ran and found no entries to remove.`);\n            }\n        }\n        this._isRunning = false;\n        if (this._rerunRequested) {\n            this._rerunRequested = false;\n            dontWaitFor(this.expireEntries());\n        }\n    }\n    /**\n     * Update the timestamp for the given URL. This ensures the when\n     * removing entries based on maximum entries, most recently used\n     * is accurate or when expiring, the timestamp is up-to-date.\n     *\n     * @param {string} url\n     */\n    async updateTimestamp(url) {\n        if (process.env.NODE_ENV !== 'production') {\n            assert.isType(url, 'string', {\n                moduleName: 'workbox-expiration',\n                className: 'CacheExpiration',\n                funcName: 'updateTimestamp',\n                paramName: 'url',\n            });\n        }\n        await this._timestampModel.setTimestamp(url, Date.now());\n    }\n    /**\n     * Can be used to check if a URL has expired or not before it's used.\n     *\n     * This requires a look up from IndexedDB, so can be slow.\n     *\n     * Note: This method will not remove the cached entry, call\n     * `expireEntries()` to remove indexedDB and Cache entries.\n     *\n     * @param {string} url\n     * @return {boolean}\n     */\n    async isURLExpired(url) {\n        if (!this._maxAgeSeconds) {\n            if (process.env.NODE_ENV !== 'production') {\n                throw new WorkboxError(`expired-test-without-max-age`, {\n                    methodName: 'isURLExpired',\n                    paramName: 'maxAgeSeconds',\n                });\n            }\n            return false;\n        }\n        else {\n            const timestamp = await this._timestampModel.getTimestamp(url);\n            const expireOlderThan = Date.now() - this._maxAgeSeconds * 1000;\n            return timestamp !== undefined ? timestamp < expireOlderThan : true;\n        }\n    }\n    /**\n     * Removes the IndexedDB object store used to keep track of cache expiration\n     * metadata.\n     */\n    async delete() {\n        // Make sure we don't attempt another rerun if we're called in the middle of\n        // a cache expiration.\n        this._rerunRequested = false;\n        await this._timestampModel.expireEntries(Infinity); // Expires all.\n    }\n}\nexport { CacheExpiration };\n","/*\n  Copyright 2019 Google LLC\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport '../_version.js';\n/**\n * A helper function that prevents a promise from being flagged as unused.\n *\n * @private\n **/\nexport function dontWaitFor(promise) {\n    // Effective no-op.\n    void promise.then(() => { });\n}\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { openDB, deleteDB } from 'idb';\nimport '../_version.js';\nconst DB_NAME = 'workbox-expiration';\nconst CACHE_OBJECT_STORE = 'cache-entries';\nconst normalizeURL = (unNormalizedUrl) => {\n    const url = new URL(unNormalizedUrl, location.href);\n    url.hash = '';\n    return url.href;\n};\n/**\n * Returns the timestamp model.\n *\n * @private\n */\nclass CacheTimestampsModel {\n    /**\n     *\n     * @param {string} cacheName\n     *\n     * @private\n     */\n    constructor(cacheName) {\n        this._db = null;\n        this._cacheName = cacheName;\n    }\n    /**\n     * Performs an upgrade of indexedDB.\n     *\n     * @param {IDBPDatabase<CacheDbSchema>} db\n     *\n     * @private\n     */\n    _upgradeDb(db) {\n        // TODO(philipwalton): EdgeHTML doesn't support arrays as a keyPath, so we\n        // have to use the `id` keyPath here and create our own values (a\n        // concatenation of `url + cacheName`) instead of simply using\n        // `keyPath: ['url', 'cacheName']`, which is supported in other browsers.\n        const objStore = db.createObjectStore(CACHE_OBJECT_STORE, { keyPath: 'id' });\n        // TODO(philipwalton): once we don't have to support EdgeHTML, we can\n        // create a single index with the keyPath `['cacheName', 'timestamp']`\n        // instead of doing both these indexes.\n        objStore.createIndex('cacheName', 'cacheName', { unique: false });\n        objStore.createIndex('timestamp', 'timestamp', { unique: false });\n    }\n    /**\n     * Performs an upgrade of indexedDB and deletes deprecated DBs.\n     *\n     * @param {IDBPDatabase<CacheDbSchema>} db\n     *\n     * @private\n     */\n    _upgradeDbAndDeleteOldDbs(db) {\n        this._upgradeDb(db);\n        if (this._cacheName) {\n            void deleteDB(this._cacheName);\n        }\n    }\n    /**\n     * @param {string} url\n     * @param {number} timestamp\n     *\n     * @private\n     */\n    async setTimestamp(url, timestamp) {\n        url = normalizeURL(url);\n        const entry = {\n            url,\n            timestamp,\n            cacheName: this._cacheName,\n            // Creating an ID from the URL and cache name won't be necessary once\n            // Edge switches to Chromium and all browsers we support work with\n            // array keyPaths.\n            id: this._getId(url),\n        };\n        const db = await this.getDb();\n        const tx = db.transaction(CACHE_OBJECT_STORE, 'readwrite', {\n            durability: 'relaxed',\n        });\n        await tx.store.put(entry);\n        await tx.done;\n    }\n    /**\n     * Returns the timestamp stored for a given URL.\n     *\n     * @param {string} url\n     * @return {number | undefined}\n     *\n     * @private\n     */\n    async getTimestamp(url) {\n        const db = await this.getDb();\n        const entry = await db.get(CACHE_OBJECT_STORE, this._getId(url));\n        return entry === null || entry === void 0 ? void 0 : entry.timestamp;\n    }\n    /**\n     * Iterates through all the entries in the object store (from newest to\n     * oldest) and removes entries once either `maxCount` is reached or the\n     * entry's timestamp is less than `minTimestamp`.\n     *\n     * @param {number} minTimestamp\n     * @param {number} maxCount\n     * @return {Array<string>}\n     *\n     * @private\n     */\n    async expireEntries(minTimestamp, maxCount) {\n        const db = await this.getDb();\n        let cursor = await db\n            .transaction(CACHE_OBJECT_STORE)\n            .store.index('timestamp')\n            .openCursor(null, 'prev');\n        const entriesToDelete = [];\n        let entriesNotDeletedCount = 0;\n        while (cursor) {\n            const result = cursor.value;\n            // TODO(philipwalton): once we can use a multi-key index, we\n            // won't have to check `cacheName` here.\n            if (result.cacheName === this._cacheName) {\n                // Delete an entry if it's older than the max age or\n                // if we already have the max number allowed.\n                if ((minTimestamp && result.timestamp < minTimestamp) ||\n                    (maxCount && entriesNotDeletedCount >= maxCount)) {\n                    // TODO(philipwalton): we should be able to delete the\n                    // entry right here, but doing so causes an iteration\n                    // bug in Safari stable (fixed in TP). Instead we can\n                    // store the keys of the entries to delete, and then\n                    // delete the separate transactions.\n                    // https://github.com/GoogleChrome/workbox/issues/1978\n                    // cursor.delete();\n                    // We only need to return the URL, not the whole entry.\n                    entriesToDelete.push(cursor.value);\n                }\n                else {\n                    entriesNotDeletedCount++;\n                }\n            }\n            cursor = await cursor.continue();\n        }\n        // TODO(philipwalton): once the Safari bug in the following issue is fixed,\n        // we should be able to remove this loop and do the entry deletion in the\n        // cursor loop above:\n        // https://github.com/GoogleChrome/workbox/issues/1978\n        const urlsDeleted = [];\n        for (const entry of entriesToDelete) {\n            await db.delete(CACHE_OBJECT_STORE, entry.id);\n            urlsDeleted.push(entry.url);\n        }\n        return urlsDeleted;\n    }\n    /**\n     * Takes a URL and returns an ID that will be unique in the object store.\n     *\n     * @param {string} url\n     * @return {string}\n     *\n     * @private\n     */\n    _getId(url) {\n        // Creating an ID from the URL and cache name won't be necessary once\n        // Edge switches to Chromium and all browsers we support work with\n        // array keyPaths.\n        return this._cacheName + '|' + normalizeURL(url);\n    }\n    /**\n     * Returns an open connection to the database.\n     *\n     * @private\n     */\n    async getDb() {\n        if (!this._db) {\n            this._db = await openDB(DB_NAME, 1, {\n                upgrade: this._upgradeDbAndDeleteOldDbs.bind(this),\n            });\n        }\n        return this._db;\n    }\n}\nexport { CacheTimestampsModel };\n","import { w as wrap, r as replaceTraps } from './wrap-idb-value.js';\nexport { u as unwrap, w as wrap } from './wrap-idb-value.js';\n\n/**\n * Open a database.\n *\n * @param name Name of the database.\n * @param version Schema version.\n * @param callbacks Additional callbacks.\n */\nfunction openDB(name, version, { blocked, upgrade, blocking, terminated } = {}) {\n    const request = indexedDB.open(name, version);\n    const openPromise = wrap(request);\n    if (upgrade) {\n        request.addEventListener('upgradeneeded', (event) => {\n            upgrade(wrap(request.result), event.oldVersion, event.newVersion, wrap(request.transaction), event);\n        });\n    }\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event.newVersion, event));\n    }\n    openPromise\n        .then((db) => {\n        if (terminated)\n            db.addEventListener('close', () => terminated());\n        if (blocking) {\n            db.addEventListener('versionchange', (event) => blocking(event.oldVersion, event.newVersion, event));\n        }\n    })\n        .catch(() => { });\n    return openPromise;\n}\n/**\n * Delete a database.\n *\n * @param name Name of the database.\n */\nfunction deleteDB(name, { blocked } = {}) {\n    const request = indexedDB.deleteDatabase(name);\n    if (blocked) {\n        request.addEventListener('blocked', (event) => blocked(\n        // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405\n        event.oldVersion, event));\n    }\n    return wrap(request).then(() => undefined);\n}\n\nconst readMethods = ['get', 'getKey', 'getAll', 'getAllKeys', 'count'];\nconst writeMethods = ['put', 'add', 'delete', 'clear'];\nconst cachedMethods = new Map();\nfunction getMethod(target, prop) {\n    if (!(target instanceof IDBDatabase &&\n        !(prop in target) &&\n        typeof prop === 'string')) {\n        return;\n    }\n    if (cachedMethods.get(prop))\n        return cachedMethods.get(prop);\n    const targetFuncName = prop.replace(/FromIndex$/, '');\n    const useIndex = prop !== targetFuncName;\n    const isWrite = writeMethods.includes(targetFuncName);\n    if (\n    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.\n    !(targetFuncName in (useIndex ? IDBIndex : IDBObjectStore).prototype) ||\n        !(isWrite || readMethods.includes(targetFuncName))) {\n        return;\n    }\n    const method = async function (storeName, ...args) {\n        // isWrite ? 'readwrite' : undefined gzipps better, but fails in Edge :(\n        const tx = this.transaction(storeName, isWrite ? 'readwrite' : 'readonly');\n        let target = tx.store;\n        if (useIndex)\n            target = target.index(args.shift());\n        // Must reject if op rejects.\n        // If it's a write operation, must reject if tx.done rejects.\n        // Must reject with op rejection first.\n        // Must resolve with op value.\n        // Must handle both promises (no unhandled rejections)\n        return (await Promise.all([\n            target[targetFuncName](...args),\n            isWrite && tx.done,\n        ]))[0];\n    };\n    cachedMethods.set(prop, method);\n    return method;\n}\nreplaceTraps((oldTraps) => ({\n    ...oldTraps,\n    get: (target, prop, receiver) => getMethod(target, prop) || oldTraps.get(target, prop, receiver),\n    has: (target, prop) => !!getMethod(target, prop) || oldTraps.has(target, prop),\n}));\n\nexport { deleteDB, openDB };\n","const instanceOfAny = (object, constructors) => constructors.some((c) => object instanceof c);\n\nlet idbProxyableTypes;\nlet cursorAdvanceMethods;\n// This is a function to prevent it throwing up in node environments.\nfunction getIdbProxyableTypes() {\n    return (idbProxyableTypes ||\n        (idbProxyableTypes = [\n            IDBDatabase,\n            IDBObjectStore,\n            IDBIndex,\n            IDBCursor,\n            IDBTransaction,\n        ]));\n}\n// This is a function to prevent it throwing up in node environments.\nfunction getCursorAdvanceMethods() {\n    return (cursorAdvanceMethods ||\n        (cursorAdvanceMethods = [\n            IDBCursor.prototype.advance,\n            IDBCursor.prototype.continue,\n            IDBCursor.prototype.continuePrimaryKey,\n        ]));\n}\nconst cursorRequestMap = new WeakMap();\nconst transactionDoneMap = new WeakMap();\nconst transactionStoreNamesMap = new WeakMap();\nconst transformCache = new WeakMap();\nconst reverseTransformCache = new WeakMap();\nfunction promisifyRequest(request) {\n    const promise = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            request.removeEventListener('success', success);\n            request.removeEventListener('error', error);\n        };\n        const success = () => {\n            resolve(wrap(request.result));\n            unlisten();\n        };\n        const error = () => {\n            reject(request.error);\n            unlisten();\n        };\n        request.addEventListener('success', success);\n        request.addEventListener('error', error);\n    });\n    promise\n        .then((value) => {\n        // Since cursoring reuses the IDBRequest (*sigh*), we cache it for later retrieval\n        // (see wrapFunction).\n        if (value instanceof IDBCursor) {\n            cursorRequestMap.set(value, request);\n        }\n        // Catching to avoid \"Uncaught Promise exceptions\"\n    })\n        .catch(() => { });\n    // This mapping exists in reverseTransformCache but doesn't doesn't exist in transformCache. This\n    // is because we create many promises from a single IDBRequest.\n    reverseTransformCache.set(promise, request);\n    return promise;\n}\nfunction cacheDonePromiseForTransaction(tx) {\n    // Early bail if we've already created a done promise for this transaction.\n    if (transactionDoneMap.has(tx))\n        return;\n    const done = new Promise((resolve, reject) => {\n        const unlisten = () => {\n            tx.removeEventListener('complete', complete);\n            tx.removeEventListener('error', error);\n            tx.removeEventListener('abort', error);\n        };\n        const complete = () => {\n            resolve();\n            unlisten();\n        };\n        const error = () => {\n            reject(tx.error || new DOMException('AbortError', 'AbortError'));\n            unlisten();\n        };\n        tx.addEventListener('complete', complete);\n        tx.addEventListener('error', error);\n        tx.addEventListener('abort', error);\n    });\n    // Cache it for later retrieval.\n    transactionDoneMap.set(tx, done);\n}\nlet idbProxyTraps = {\n    get(target, prop, receiver) {\n        if (target instanceof IDBTransaction) {\n            // Special handling for transaction.done.\n            if (prop === 'done')\n                return transactionDoneMap.get(target);\n            // Polyfill for objectStoreNames because of Edge.\n            if (prop === 'objectStoreNames') {\n                return target.objectStoreNames || transactionStoreNamesMap.get(target);\n            }\n            // Make tx.store return the only store in the transaction, or undefined if there are many.\n            if (prop === 'store') {\n                return receiver.objectStoreNames[1]\n                    ? undefined\n                    : receiver.objectStore(receiver.objectStoreNames[0]);\n            }\n        }\n        // Else transform whatever we get back.\n        return wrap(target[prop]);\n    },\n    set(target, prop, value) {\n        target[prop] = value;\n        return true;\n    },\n    has(target, prop) {\n        if (target instanceof IDBTransaction &&\n            (prop === 'done' || prop === 'store')) {\n            return true;\n        }\n        return prop in target;\n    },\n};\nfunction replaceTraps(callback) {\n    idbProxyTraps = callback(idbProxyTraps);\n}\nfunction wrapFunction(func) {\n    // Due to expected object equality (which is enforced by the caching in `wrap`), we\n    // only create one new func per func.\n    // Edge doesn't support objectStoreNames (booo), so we polyfill it here.\n    if (func === IDBDatabase.prototype.transaction &&\n        !('objectStoreNames' in IDBTransaction.prototype)) {\n        return function (storeNames, ...args) {\n            const tx = func.call(unwrap(this), storeNames, ...args);\n            transactionStoreNamesMap.set(tx, storeNames.sort ? storeNames.sort() : [storeNames]);\n            return wrap(tx);\n        };\n    }\n    // Cursor methods are special, as the behaviour is a little more different to standard IDB. In\n    // IDB, you advance the cursor and wait for a new 'success' on the IDBRequest that gave you the\n    // cursor. It's kinda like a promise that can resolve with many values. That doesn't make sense\n    // with real promises, so each advance methods returns a new promise for the cursor object, or\n    // undefined if the end of the cursor has been reached.\n    if (getCursorAdvanceMethods().includes(func)) {\n        return function (...args) {\n            // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n            // the original object.\n            func.apply(unwrap(this), args);\n            return wrap(cursorRequestMap.get(this));\n        };\n    }\n    return function (...args) {\n        // Calling the original function with the proxy as 'this' causes ILLEGAL INVOCATION, so we use\n        // the original object.\n        return wrap(func.apply(unwrap(this), args));\n    };\n}\nfunction transformCachableValue(value) {\n    if (typeof value === 'function')\n        return wrapFunction(value);\n    // This doesn't return, it just creates a 'done' promise for the transaction,\n    // which is later returned for transaction.done (see idbObjectHandler).\n    if (value instanceof IDBTransaction)\n        cacheDonePromiseForTransaction(value);\n    if (instanceOfAny(value, getIdbProxyableTypes()))\n        return new Proxy(value, idbProxyTraps);\n    // Return the same value back if we're not going to transform it.\n    return value;\n}\nfunction wrap(value) {\n    // We sometimes generate multiple promises from a single IDBRequest (eg when cursoring), because\n    // IDB is weird and a single IDBRequest can yield many responses, so these can't be cached.\n    if (value instanceof IDBRequest)\n        return promisifyRequest(value);\n    // If we've already transformed this value before, reuse the transformed value.\n    // This is faster, but it also provides object equality.\n    if (transformCache.has(value))\n        return transformCache.get(value);\n    const newValue = transformCachableValue(value);\n    // Not all types are transformed.\n    // These may be primitive types, so they can't be WeakMap keys.\n    if (newValue !== value) {\n        transformCache.set(value, newValue);\n        reverseTransformCache.set(newValue, value);\n    }\n    return newValue;\n}\nconst unwrap = (value) => reverseTransformCache.get(value);\n\nexport { reverseTransformCache as a, instanceOfAny as i, replaceTraps as r, unwrap as u, wrap as w };\n","\"use strict\";\n// @ts-ignore\ntry {\n    self['workbox:expiration:7.2.0'] && _();\n}\ncatch (e) { }\n","/*\n  Copyright 2018 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { assert } from 'workbox-core/_private/assert.js';\nimport { cacheNames } from 'workbox-core/_private/cacheNames.js';\nimport { dontWaitFor } from 'workbox-core/_private/dontWaitFor.js';\nimport { getFriendlyURL } from 'workbox-core/_private/getFriendlyURL.js';\nimport { logger } from 'workbox-core/_private/logger.js';\nimport { registerQuotaErrorCallback } from 'workbox-core/registerQuotaErrorCallback.js';\nimport { WorkboxError } from 'workbox-core/_private/WorkboxError.js';\nimport { CacheExpiration } from './CacheExpiration.js';\nimport './_version.js';\n/**\n * This plugin can be used in a `workbox-strategy` to regularly enforce a\n * limit on the age and / or the number of cached requests.\n *\n * It can only be used with `workbox-strategy` instances that have a\n * [custom `cacheName` property set](/web/tools/workbox/guides/configure-workbox#custom_cache_names_in_strategies).\n * In other words, it can't be used to expire entries in strategy that uses the\n * default runtime cache name.\n *\n * Whenever a cached response is used or updated, this plugin will look\n * at the associated cache and remove any old or extra responses.\n *\n * When using `maxAgeSeconds`, responses may be used *once* after expiring\n * because the expiration clean up will not have occurred until *after* the\n * cached response has been used. If the response has a \"Date\" header, then\n * a light weight expiration check is performed and the response will not be\n * used immediately.\n *\n * When using `maxEntries`, the entry least-recently requested will be removed\n * from the cache first.\n *\n * @memberof workbox-expiration\n */\nclass ExpirationPlugin {\n    /**\n     * @param {ExpirationPluginOptions} config\n     * @param {number} [config.maxEntries] The maximum number of entries to cache.\n     * Entries used the least will be removed as the maximum is reached.\n     * @param {number} [config.maxAgeSeconds] The maximum age of an entry before\n     * it's treated as stale and removed.\n     * @param {Object} [config.matchOptions] The [`CacheQueryOptions`](https://developer.mozilla.org/en-US/docs/Web/API/Cache/delete#Parameters)\n     * that will be used when calling `delete()` on the cache.\n     * @param {boolean} [config.purgeOnQuotaError] Whether to opt this cache in to\n     * automatic deletion if the available storage quota has been exceeded.\n     */\n    constructor(config = {}) {\n        /**\n         * A \"lifecycle\" callback that will be triggered automatically by the\n         * `workbox-strategies` handlers when a `Response` is about to be returned\n         * from a [Cache](https://developer.mozilla.org/en-US/docs/Web/API/Cache) to\n         * the handler. It allows the `Response` to be inspected for freshness and\n         * prevents it from being used if the `Response`'s `Date` header value is\n         * older than the configured `maxAgeSeconds`.\n         *\n         * @param {Object} options\n         * @param {string} options.cacheName Name of the cache the response is in.\n         * @param {Response} options.cachedResponse The `Response` object that's been\n         *     read from a cache and whose freshness should be checked.\n         * @return {Response} Either the `cachedResponse`, if it's\n         *     fresh, or `null` if the `Response` is older than `maxAgeSeconds`.\n         *\n         * @private\n         */\n        this.cachedResponseWillBeUsed = async ({ event, request, cacheName, cachedResponse, }) => {\n            if (!cachedResponse) {\n                return null;\n            }\n            const isFresh = this._isResponseDateFresh(cachedResponse);\n            // Expire entries to ensure that even if the expiration date has\n            // expired, it'll only be used once.\n            const cacheExpiration = this._getCacheExpiration(cacheName);\n            dontWaitFor(cacheExpiration.expireEntries());\n            // Update the metadata for the request URL to the current timestamp,\n            // but don't `await` it as we don't want to block the response.\n            const updateTimestampDone = cacheExpiration.updateTimestamp(request.url);\n            if (event) {\n                try {\n                    event.waitUntil(updateTimestampDone);\n                }\n                catch (error) {\n                    if (process.env.NODE_ENV !== 'production') {\n                        // The event may not be a fetch event; only log the URL if it is.\n                        if ('request' in event) {\n                            logger.warn(`Unable to ensure service worker stays alive when ` +\n                                `updating cache entry for ` +\n                                `'${getFriendlyURL(event.request.url)}'.`);\n                        }\n                    }\n                }\n            }\n            return isFresh ? cachedResponse : null;\n        };\n        /**\n         * A \"lifecycle\" callback that will be triggered automatically by the\n         * `workbox-strategies` handlers when an entry is added to a cache.\n         *\n         * @param {Object} options\n         * @param {string} options.cacheName Name of the cache that was updated.\n         * @param {string} options.request The Request for the cached entry.\n         *\n         * @private\n         */\n        this.cacheDidUpdate = async ({ cacheName, request, }) => {\n            if (process.env.NODE_ENV !== 'production') {\n                assert.isType(cacheName, 'string', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'cacheDidUpdate',\n                    paramName: 'cacheName',\n                });\n                assert.isInstance(request, Request, {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'cacheDidUpdate',\n                    paramName: 'request',\n                });\n            }\n            const cacheExpiration = this._getCacheExpiration(cacheName);\n            await cacheExpiration.updateTimestamp(request.url);\n            await cacheExpiration.expireEntries();\n        };\n        if (process.env.NODE_ENV !== 'production') {\n            if (!(config.maxEntries || config.maxAgeSeconds)) {\n                throw new WorkboxError('max-entries-or-age-required', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'constructor',\n                });\n            }\n            if (config.maxEntries) {\n                assert.isType(config.maxEntries, 'number', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'constructor',\n                    paramName: 'config.maxEntries',\n                });\n            }\n            if (config.maxAgeSeconds) {\n                assert.isType(config.maxAgeSeconds, 'number', {\n                    moduleName: 'workbox-expiration',\n                    className: 'Plugin',\n                    funcName: 'constructor',\n                    paramName: 'config.maxAgeSeconds',\n                });\n            }\n        }\n        this._config = config;\n        this._maxAgeSeconds = config.maxAgeSeconds;\n        this._cacheExpirations = new Map();\n        if (config.purgeOnQuotaError) {\n            registerQuotaErrorCallback(() => this.deleteCacheAndMetadata());\n        }\n    }\n    /**\n     * A simple helper method to return a CacheExpiration instance for a given\n     * cache name.\n     *\n     * @param {string} cacheName\n     * @return {CacheExpiration}\n     *\n     * @private\n     */\n    _getCacheExpiration(cacheName) {\n        if (cacheName === cacheNames.getRuntimeName()) {\n            throw new WorkboxError('expire-custom-caches-only');\n        }\n        let cacheExpiration = this._cacheExpirations.get(cacheName);\n        if (!cacheExpiration) {\n            cacheExpiration = new CacheExpiration(cacheName, this._config);\n            this._cacheExpirations.set(cacheName, cacheExpiration);\n        }\n        return cacheExpiration;\n    }\n    /**\n     * @param {Response} cachedResponse\n     * @return {boolean}\n     *\n     * @private\n     */\n    _isResponseDateFresh(cachedResponse) {\n        if (!this._maxAgeSeconds) {\n            // We aren't expiring by age, so return true, it's fresh\n            return true;\n        }\n        // Check if the 'date' header will suffice a quick expiration check.\n        // See https://github.com/GoogleChromeLabs/sw-toolbox/issues/164 for\n        // discussion.\n        const dateHeaderTimestamp = this._getDateHeaderTimestamp(cachedResponse);\n        if (dateHeaderTimestamp === null) {\n            // Unable to parse date, so assume it's fresh.\n            return true;\n        }\n        // If we have a valid headerTime, then our response is fresh iff the\n        // headerTime plus maxAgeSeconds is greater than the current time.\n        const now = Date.now();\n        return dateHeaderTimestamp >= now - this._maxAgeSeconds * 1000;\n    }\n    /**\n     * This method will extract the data header and parse it into a useful\n     * value.\n     *\n     * @param {Response} cachedResponse\n     * @return {number|null}\n     *\n     * @private\n     */\n    _getDateHeaderTimestamp(cachedResponse) {\n        if (!cachedResponse.headers.has('date')) {\n            return null;\n        }\n        const dateHeader = cachedResponse.headers.get('date');\n        const parsedDate = new Date(dateHeader);\n        const headerTime = parsedDate.getTime();\n        // If the Date header was invalid for some reason, parsedDate.getTime()\n        // will return NaN.\n        if (isNaN(headerTime)) {\n            return null;\n        }\n        return headerTime;\n    }\n    /**\n     * This is a helper method that performs two operations:\n     *\n     * - Deletes *all* the underlying Cache instances associated with this plugin\n     * instance, by calling caches.delete() on your behalf.\n     * - Deletes the metadata from IndexedDB used to keep track of expiration\n     * details for each Cache instance.\n     *\n     * When using cache expiration, calling this method is preferable to calling\n     * `caches.delete()` directly, since this will ensure that the IndexedDB\n     * metadata is also cleanly removed and open IndexedDB instances are deleted.\n     *\n     * Note that if you're *not* using cache expiration for a given cache, calling\n     * `caches.delete()` and passing in the cache's name should be sufficient.\n     * There is no Workbox-specific method needed for cleanup in that case.\n     */\n    async deleteCacheAndMetadata() {\n        // Do this one at a time instead of all at once via `Promise.all()` to\n        // reduce the chance of inconsistency if a promise rejects.\n        for (const [cacheName, cacheExpiration] of this._cacheExpirations) {\n            await self.caches.delete(cacheName);\n            await cacheExpiration.delete();\n        }\n        // Reset this._cacheExpirations to its initial state.\n        this._cacheExpirations = new Map();\n    }\n}\nexport { ExpirationPlugin };\n","/*\n  Copyright 2019 Google LLC\n\n  Use of this source code is governed by an MIT-style\n  license that can be found in the LICENSE file or at\n  https://opensource.org/licenses/MIT.\n*/\nimport { logger } from './_private/logger.js';\nimport { assert } from './_private/assert.js';\nimport { quotaErrorCallbacks } from './models/quotaErrorCallbacks.js';\nimport './_version.js';\n/**\n * Adds a function to the set of quotaErrorCallbacks that will be executed if\n * there's a quota error.\n *\n * @param {Function} callback\n * @memberof workbox-core\n */\n// Can't change Function type\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction registerQuotaErrorCallback(callback) {\n    if (process.env.NODE_ENV !== 'production') {\n        assert.isType(callback, 'function', {\n            moduleName: 'workbox-core',\n            funcName: 'register',\n            paramName: 'callback',\n        });\n    }\n    quotaErrorCallbacks.add(callback);\n    if (process.env.NODE_ENV !== 'production') {\n        logger.log('Registered a callback to respond to quota errors.', callback);\n    }\n}\nexport { registerQuotaErrorCallback };\n"],"names":["$parcel$export","e","n","v","s","Object","defineProperty","get","set","enumerable","configurable","$parcel$global","globalThis","self","window","global","$parcel$modules","$parcel$inits","parcelRequire","id","exports","init","module","call","err","Error","code","register","parcelRegister","$9OrUn","$5TCrG","$azwmW","$1MSXF","$fneqe","$6cjo5","registerRoute","request","mode","NetworkFirst","cacheName","plugins","CacheableResponsePlugin","statuses","url","origin","StaleWhileRevalidate","destination","CacheFirst","ExpirationPlugin","maxEntries","maxAgeSeconds","$b6cm1","Route","$88fc246318b599fa$export$86951c8e0bcb03a3","$888sT","constructor","errorCode","details","messageGenerator","name","$5eb5a309d70f6e0c$export$9b6405cf8a618e2b","args","msg","length","JSON","stringify","$78393224cffdc873$export$defe85febe8b728c","paramName","validValueDescription","value","moduleName","className","funcName","expectedType","classNameStr","expectedClassName","isReturnValueProblem","expectedMethod","entry","firstEntry","secondEntry","thrownErrorMessage","cacheNameId","method","methodName","expectedClass","normalizedRangeHeader","size","start","end","error","message","status","type","_","$de3bbb4d19c3a842$export$af88d00dbe7f521","$8149d68d175b9cc3$export$e7b0ac011bb776c6","$7g2xp","$hMXVl","match","handler","defaultMethod","normalizeHandler","setCatchHandler","catchHandler","$548bfeff9902e514$export$23aa776992c05e54","$cf356705827370b1$export$c3ccfd7381bc479","handle","$0ea035f669279f35$export$dadc8067e88ff641","regExp","result","exec","href","location","index","slice","$724e6e928f4f40fc$export$ecc3f737da4d6188","$bLao8","$1fQSB","$cajzJ","capture","route","captureUrl","URL","RegExp","RegExpRoute","WorkboxError","defaultRouter","getOrCreateDefaultRouter","$8db59a710c642ac7$var$defaultRouter","$8db59a710c642ac7$export$961157d28bda6197","$dcfPL","Router","addFetchListener","addCacheListener","$99b8ad9d91ca379d$export$55185c17a0fcbe46","_routes","Map","_defaultHandlerMap","routes","addEventListener","event","responsePromise","handleRequest","respondWith","data","payload","requestPromises","Promise","all","urlsToCache","map","Request","waitUntil","ports","then","postMessage","protocol","startsWith","sameOrigin","params","findMatchingRoute","has","reject","_catchHandler","catch","catchErr","matchResult","Array","isArray","keys","undefined","setDefaultHandler","push","unregisterRoute","routeIndex","indexOf","splice","$9e7dca6d233c4572$export$ea94e9f18324709a","urlObj","String","replace","$44afe9430131f559$export$31be715f8b5f3b36","$cuyhQ","Strategy","_handle","response","cacheMatch","fetchAndCachePut","$9182e20738c0122b$export$88a6666ae2487175","$1SZVT","$dovPJ","options","cacheNames","getRuntimeName","fetchOptions","matchOptions","responseDone","handleAll","FetchEvent","StrategyHandler","_getResponse","handlerDone","_awaitComplete","runCallbacks","callback","iterateCallbacks","doneWaiting","waitUntilError","destroy","$15fae0277cef1542$export$ab6e80394d30c0bd","$15fae0277cef1542$var$_cacheNameDetails","googleAnalytics","precache","prefix","runtime","suffix","registration","scope","$15fae0277cef1542$var$_createCacheName","filter","join","$15fae0277cef1542$var$eachCacheNameDetail","fn","key","updateDetails","getGoogleAnalyticsName","userCacheName","getPrecacheName","getPrefix","getSuffix","$9c0635aca457f92b$export$21756803dae8d5d1","$jvjrT","$5PQ27","$gLG8R","$dBE2C","$ddiLb","$9c0635aca457f92b$var$toRequest","input","strategy","plugin","_cacheKeys","assign","_strategy","_handlerDeferred","Deferred","_extendLifetimePromises","_plugins","_pluginStateMap","promise","fetch","preloadResponse","possiblePreloadResponse","originalRequest","hasCallback","clone","cb","pluginFilteredRequest","fetchResponse","responseClone","cachePut","cachedResponse","effectiveRequest","getCacheKey","multiMatchOptions","caches","timeout","getFriendlyURL","responseToCache","_ensureResponseSafeToCache","cache","open","hasCacheUpdateCallback","oldResponse","cacheMatchIgnoreParams","put","executeQuotaErrorCallbacks","newResponse","param","state","statefulCallback","statefulParam","shift","resolve","pluginsUsed","$e32fffba50d011ea$var$stripParams","fullURL","ignoreParams","strippedURL","searchParams","delete","$e32fffba50d011ea$export$e8c0b45b884930bd","strippedRequestURL","keysOptions","ignoreSearch","cacheKey","$43fa13e5545bbc8a$export$85f6557964517f1a","$c351b99c9d29c0ef$export$8c2c97e92a341abf","$9CgW0","quotaErrorCallbacks","$7004cc86732d5f3a$export$8809c7646fb39931","Set","$99eb0aa0e4b12f96$export$83e74882c5df8fe1","ms","setTimeout","$7b264818abf3e678$export$fe842248fe84e163","$eYGlt","some","p","unshift","cacheOkAndOpaquePlugin","_networkTimeoutSeconds","networkTimeoutSeconds","timeoutId","logs","promises","_getTimeoutPromise","networkPromise","_getNetworkPromise","race","fetchError","clearTimeout","$ae77842cf7c4a631$export$ac87a12a5a435e99","cacheWillUpdate","$14d4e8583184ff1b$export$7ea9c022a31f5797","fetchAndCachePromise","$ef05cbe573617e58$export$a644cea2120b6d05","config","_statuses","_headers","headers","isResponseCacheable","cacheable","includes","headerName","$b31430f1c8fe0d90$export$86cb7f0d61d3ac3d","$kwjl0","_cacheableResponse","CacheableResponse","$11c09db46cf28749$export$ea86921f5d945c00","$ewuVQ","$4b7eM","_isRunning","_rerunRequested","_maxEntries","_maxAgeSeconds","_matchOptions","_cacheName","_timestampModel","CacheTimestampsModel","expireEntries","minTimestamp","Date","now","urlsExpired","dontWaitFor","updateTimestamp","setTimestamp","isURLExpired","timestamp","getTimestamp","expireOlderThan","Infinity","$a92c0c4ef8f2c6ed$export$13dca588e4212d04","$30adcdad86646d84$export$3ea434045ca20946","$bKuVu","$30adcdad86646d84$var$CACHE_OBJECT_STORE","$30adcdad86646d84$var$normalizeURL","unNormalizedUrl","hash","_db","_upgradeDb","db","objStore","createObjectStore","keyPath","createIndex","unique","_upgradeDbAndDeleteOldDbs","deleteDB","_getId","tx","getDb","transaction","durability","store","done","maxCount","cursor","openCursor","entriesToDelete","entriesNotDeletedCount","continue","urlsDeleted","openDB","upgrade","bind","$88dbfae9e736e969$export$ca0ed41b1a2af7e","$88dbfae9e736e969$export$9d6df0ac66a98bb2","$hvqz6","version","blocked","blocking","terminated","indexedDB","openPromise","w","oldVersion","newVersion","deleteDatabase","$88dbfae9e736e969$var$readMethods","$88dbfae9e736e969$var$writeMethods","$88dbfae9e736e969$var$cachedMethods","$88dbfae9e736e969$var$getMethod","target","prop","IDBDatabase","targetFuncName","useIndex","isWrite","IDBIndex","IDBObjectStore","prototype","storeName","r","oldTraps","receiver","$cbe9f03a448ab574$var$idbProxyableTypes","$cbe9f03a448ab574$var$cursorAdvanceMethods","$cbe9f03a448ab574$export$efccba1c4a2ef57b","$cbe9f03a448ab574$export$43caf9889c228507","$cbe9f03a448ab574$export$23f2a1d2818174ef","object","constructors","c","$cbe9f03a448ab574$var$cursorRequestMap","WeakMap","$cbe9f03a448ab574$var$transactionDoneMap","$cbe9f03a448ab574$var$transactionStoreNamesMap","$cbe9f03a448ab574$var$transformCache","$cbe9f03a448ab574$export$407448d2b89b1813","$cbe9f03a448ab574$var$idbProxyTraps","IDBTransaction","objectStoreNames","objectStore","IDBRequest","$cbe9f03a448ab574$var$promisifyRequest","unlisten","removeEventListener","success","IDBCursor","newValue","$cbe9f03a448ab574$var$transformCachableValue","func","$cbe9f03a448ab574$var$getCursorAdvanceMethods","advance","continuePrimaryKey","apply","$cbe9f03a448ab574$export$3b14a55fb2447963","storeNames","sort","$cbe9f03a448ab574$var$cacheDonePromiseForTransaction","complete","DOMException","Proxy","$4832e7094f67c6d0$export$90f76ceeb98e6f81","$knpH0","$1wuJf","cachedResponseWillBeUsed","isFresh","_isResponseDateFresh","cacheExpiration","_getCacheExpiration","updateTimestampDone","cacheDidUpdate","_config","_cacheExpirations","purgeOnQuotaError","registerQuotaErrorCallback","deleteCacheAndMetadata","CacheExpiration","dateHeaderTimestamp","_getDateHeaderTimestamp","headerTime","parsedDate","getTime","isNaN","$ed59e2a4e4cf6039$export$52ec5cc2119a4bb4","add"],"version":3,"file":"service-worker.js.map"}